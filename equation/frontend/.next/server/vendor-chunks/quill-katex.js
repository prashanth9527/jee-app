"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/quill-katex";
exports.ids = ["vendor-chunks/quill-katex"];
exports.modules = {

/***/ "(ssr)/./node_modules/quill-katex/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/quill-katex/dist/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = this && this.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.KatexModule = exports.KatexInlineBlot = exports.KatexBlot = void 0;\nexports.registerKatex = registerKatex;\nvar katex_1 = __importDefault(__webpack_require__(/*! katex */ \"(ssr)/./node_modules/katex/dist/katex.js\"));\n// Blot para renderizar fórmulas matemáticas\nvar KatexBlot = /** @class */ function() {\n    function KatexBlot() {}\n    KatexBlot.create = function(value) {\n        var node = document.createElement(\"div\");\n        node.setAttribute(\"data-formula\", value);\n        // Renderiza a fórmula matemática usando KaTeX\n        var formulaContainer = document.createElement(\"div\");\n        katex_1.default.render(value, formulaContainer, {\n            throwOnError: false,\n            displayMode: true\n        });\n        node.appendChild(formulaContainer);\n        return node;\n    };\n    KatexBlot.value = function(node) {\n        return node.getAttribute(\"data-formula\");\n    };\n    return KatexBlot;\n}();\nexports.KatexBlot = KatexBlot;\n// Inline blot para fórmulas inline\nvar KatexInlineBlot = /** @class */ function() {\n    function KatexInlineBlot() {}\n    KatexInlineBlot.create = function(value) {\n        var node = document.createElement(\"span\");\n        node.setAttribute(\"data-formula\", value);\n        // Renderiza a fórmula matemática inline usando KaTeX\n        katex_1.default.render(value, node, {\n            throwOnError: false,\n            displayMode: false\n        });\n        return node;\n    };\n    KatexInlineBlot.value = function(node) {\n        return node.getAttribute(\"data-formula\");\n    };\n    return KatexInlineBlot;\n}();\nexports.KatexInlineBlot = KatexInlineBlot;\n// Módulo para adicionar botões e funcionalidades ao editor\nvar KatexModule = /** @class */ function() {\n    function KatexModule(quill, options) {\n        this.quill = quill;\n        this.options = options || {};\n        // Adiciona botões à toolbar se especificado nas opções\n        if (this.options.toolbar) {\n            this.addToolbarButtons();\n        }\n    }\n    KatexModule.prototype.addToolbarButtons = function() {\n        var toolbar = this.quill.getModule(\"toolbar\");\n        if (toolbar) {\n            toolbar.addHandler(\"katex\", this.katexHandler.bind(this));\n            toolbar.addHandler(\"katex-inline\", this.katexInlineHandler.bind(this));\n        }\n    };\n    KatexModule.prototype.katexHandler = function() {\n        this.showFormulaInput(true);\n    };\n    KatexModule.prototype.katexInlineHandler = function() {\n        this.showFormulaInput(false);\n    };\n    KatexModule.prototype.showFormulaInput = function(displayMode) {\n        var value = prompt(\"Digite sua f\\xf3rmula LaTeX:\");\n        if (value) {\n            var range = this.quill.getSelection(true);\n            if (displayMode) {\n                this.quill.insertEmbed(range.index, \"katex\", value);\n                this.quill.setSelection(range.index + 1);\n            } else {\n                this.quill.insertEmbed(range.index, \"katex-inline\", value);\n                this.quill.setSelection(range.index + 1);\n            }\n        }\n    };\n    return KatexModule;\n}();\nexports.KatexModule = KatexModule;\n/**\n * Registra o módulo KaTeX no Quill\n */ function registerKatex(Quill) {\n    // Registra os formatos\n    var BlockBlot = Quill.import(\"blots/block\");\n    var InlineBlot = Quill.import(\"blots/inline\");\n    // Estende os blots do Quill\n    var QuillKatexBlot = /** @class */ function(_super) {\n        __extends(QuillKatexBlot, _super);\n        function QuillKatexBlot() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        QuillKatexBlot.create = function(value) {\n            return KatexBlot.create(value);\n        };\n        QuillKatexBlot.value = function(node) {\n            return KatexBlot.value(node);\n        };\n        return QuillKatexBlot;\n    }(BlockBlot);\n    var QuillKatexInlineBlot = /** @class */ function(_super) {\n        __extends(QuillKatexInlineBlot, _super);\n        function QuillKatexInlineBlot() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        QuillKatexInlineBlot.create = function(value) {\n            return KatexInlineBlot.create(value);\n        };\n        QuillKatexInlineBlot.value = function(node) {\n            return KatexInlineBlot.value(node);\n        };\n        return QuillKatexInlineBlot;\n    }(InlineBlot);\n    // Define as propriedades dos blots\n    QuillKatexBlot.blotName = \"katex\";\n    QuillKatexBlot.tagName = \"div\";\n    QuillKatexBlot.className = \"ql-katex\";\n    QuillKatexInlineBlot.blotName = \"katex-inline\";\n    QuillKatexInlineBlot.tagName = \"span\";\n    QuillKatexInlineBlot.className = \"ql-katex-inline\";\n    // Registra os blots e o módulo no Quill\n    Quill.register({\n        \"formats/katex\": QuillKatexBlot,\n        \"formats/katex-inline\": QuillKatexInlineBlot,\n        \"modules/katex\": KatexModule\n    });\n}\n// Detecta se estamos em um ambiente de navegador com Quill disponível globalmente\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/quill-katex/dist/index.js\n");

/***/ })

};
;