
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Stream
 * 
 */
export type Stream = $Result.DefaultSelection<Prisma.$StreamPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model Topic
 * 
 */
export type Topic = $Result.DefaultSelection<Prisma.$TopicPayload>
/**
 * Model Subtopic
 * 
 */
export type Subtopic = $Result.DefaultSelection<Prisma.$SubtopicPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model QuestionOption
 * 
 */
export type QuestionOption = $Result.DefaultSelection<Prisma.$QuestionOptionPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model QuestionTag
 * 
 */
export type QuestionTag = $Result.DefaultSelection<Prisma.$QuestionTagPayload>
/**
 * Model QuestionReport
 * 
 */
export type QuestionReport = $Result.DefaultSelection<Prisma.$QuestionReportPayload>
/**
 * Model QuestionReportOption
 * 
 */
export type QuestionReportOption = $Result.DefaultSelection<Prisma.$QuestionReportOptionPayload>
/**
 * Model QuestionAlternativeExplanation
 * 
 */
export type QuestionAlternativeExplanation = $Result.DefaultSelection<Prisma.$QuestionAlternativeExplanationPayload>
/**
 * Model ExamPaper
 * 
 */
export type ExamPaper = $Result.DefaultSelection<Prisma.$ExamPaperPayload>
/**
 * Model ExamSubmission
 * 
 */
export type ExamSubmission = $Result.DefaultSelection<Prisma.$ExamSubmissionPayload>
/**
 * Model ExamAnswer
 * 
 */
export type ExamAnswer = $Result.DefaultSelection<Prisma.$ExamAnswerPayload>
/**
 * Model Plan
 * 
 */
export type Plan = $Result.DefaultSelection<Prisma.$PlanPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model Otp
 * 
 */
export type Otp = $Result.DefaultSelection<Prisma.$OtpPayload>
/**
 * Model ReferralCode
 * 
 */
export type ReferralCode = $Result.DefaultSelection<Prisma.$ReferralCodePayload>
/**
 * Model Referral
 * 
 */
export type Referral = $Result.DefaultSelection<Prisma.$ReferralPayload>
/**
 * Model ReferralReward
 * 
 */
export type ReferralReward = $Result.DefaultSelection<Prisma.$ReferralRewardPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  STUDENT: 'STUDENT'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const Difficulty: {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

export type Difficulty = (typeof Difficulty)[keyof typeof Difficulty]


export const QuestionReportType: {
  INCORRECT_ANSWER: 'INCORRECT_ANSWER',
  INCORRECT_EXPLANATION: 'INCORRECT_EXPLANATION',
  SUGGESTED_EXPLANATION: 'SUGGESTED_EXPLANATION',
  GRAMMATICAL_ERROR: 'GRAMMATICAL_ERROR',
  TECHNICAL_ERROR: 'TECHNICAL_ERROR',
  OTHER: 'OTHER'
};

export type QuestionReportType = (typeof QuestionReportType)[keyof typeof QuestionReportType]


export const ReportStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type ReportStatus = (typeof ReportStatus)[keyof typeof ReportStatus]


export const PlanType: {
  MANUAL: 'MANUAL',
  AI_ENABLED: 'AI_ENABLED'
};

export type PlanType = (typeof PlanType)[keyof typeof PlanType]


export const PlanInterval: {
  MONTH: 'MONTH',
  YEAR: 'YEAR'
};

export type PlanInterval = (typeof PlanInterval)[keyof typeof PlanInterval]


export const SubscriptionStatus: {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  EXPIRED: 'EXPIRED'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]


export const OtpType: {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE'
};

export type OtpType = (typeof OtpType)[keyof typeof OtpType]


export const ReferralStatus: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

export type ReferralStatus = (typeof ReferralStatus)[keyof typeof ReferralStatus]


export const RewardType: {
  SUBSCRIPTION_DAYS: 'SUBSCRIPTION_DAYS',
  MONETARY_CREDIT: 'MONETARY_CREDIT',
  FEATURE_ACCESS: 'FEATURE_ACCESS',
  DISCOUNT_PERCENT: 'DISCOUNT_PERCENT'
};

export type RewardType = (typeof RewardType)[keyof typeof RewardType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type Difficulty = $Enums.Difficulty

export const Difficulty: typeof $Enums.Difficulty

export type QuestionReportType = $Enums.QuestionReportType

export const QuestionReportType: typeof $Enums.QuestionReportType

export type ReportStatus = $Enums.ReportStatus

export const ReportStatus: typeof $Enums.ReportStatus

export type PlanType = $Enums.PlanType

export const PlanType: typeof $Enums.PlanType

export type PlanInterval = $Enums.PlanInterval

export const PlanInterval: typeof $Enums.PlanInterval

export type SubscriptionStatus = $Enums.SubscriptionStatus

export const SubscriptionStatus: typeof $Enums.SubscriptionStatus

export type OtpType = $Enums.OtpType

export const OtpType: typeof $Enums.OtpType

export type ReferralStatus = $Enums.ReferralStatus

export const ReferralStatus: typeof $Enums.ReferralStatus

export type RewardType = $Enums.RewardType

export const RewardType: typeof $Enums.RewardType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stream`: Exposes CRUD operations for the **Stream** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Streams
    * const streams = await prisma.stream.findMany()
    * ```
    */
  get stream(): Prisma.StreamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.topic`: Exposes CRUD operations for the **Topic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Topics
    * const topics = await prisma.topic.findMany()
    * ```
    */
  get topic(): Prisma.TopicDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subtopic`: Exposes CRUD operations for the **Subtopic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subtopics
    * const subtopics = await prisma.subtopic.findMany()
    * ```
    */
  get subtopic(): Prisma.SubtopicDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionOption`: Exposes CRUD operations for the **QuestionOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionOptions
    * const questionOptions = await prisma.questionOption.findMany()
    * ```
    */
  get questionOption(): Prisma.QuestionOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionTag`: Exposes CRUD operations for the **QuestionTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionTags
    * const questionTags = await prisma.questionTag.findMany()
    * ```
    */
  get questionTag(): Prisma.QuestionTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionReport`: Exposes CRUD operations for the **QuestionReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionReports
    * const questionReports = await prisma.questionReport.findMany()
    * ```
    */
  get questionReport(): Prisma.QuestionReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionReportOption`: Exposes CRUD operations for the **QuestionReportOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionReportOptions
    * const questionReportOptions = await prisma.questionReportOption.findMany()
    * ```
    */
  get questionReportOption(): Prisma.QuestionReportOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionAlternativeExplanation`: Exposes CRUD operations for the **QuestionAlternativeExplanation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionAlternativeExplanations
    * const questionAlternativeExplanations = await prisma.questionAlternativeExplanation.findMany()
    * ```
    */
  get questionAlternativeExplanation(): Prisma.QuestionAlternativeExplanationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.examPaper`: Exposes CRUD operations for the **ExamPaper** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamPapers
    * const examPapers = await prisma.examPaper.findMany()
    * ```
    */
  get examPaper(): Prisma.ExamPaperDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.examSubmission`: Exposes CRUD operations for the **ExamSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamSubmissions
    * const examSubmissions = await prisma.examSubmission.findMany()
    * ```
    */
  get examSubmission(): Prisma.ExamSubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.examAnswer`: Exposes CRUD operations for the **ExamAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamAnswers
    * const examAnswers = await prisma.examAnswer.findMany()
    * ```
    */
  get examAnswer(): Prisma.ExamAnswerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plan`: Exposes CRUD operations for the **Plan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plans
    * const plans = await prisma.plan.findMany()
    * ```
    */
  get plan(): Prisma.PlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.otp`: Exposes CRUD operations for the **Otp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Otps
    * const otps = await prisma.otp.findMany()
    * ```
    */
  get otp(): Prisma.OtpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referralCode`: Exposes CRUD operations for the **ReferralCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReferralCodes
    * const referralCodes = await prisma.referralCode.findMany()
    * ```
    */
  get referralCode(): Prisma.ReferralCodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referral`: Exposes CRUD operations for the **Referral** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referrals
    * const referrals = await prisma.referral.findMany()
    * ```
    */
  get referral(): Prisma.ReferralDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referralReward`: Exposes CRUD operations for the **ReferralReward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReferralRewards
    * const referralRewards = await prisma.referralReward.findMany()
    * ```
    */
  get referralReward(): Prisma.ReferralRewardDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Stream: 'Stream',
    Subject: 'Subject',
    Topic: 'Topic',
    Subtopic: 'Subtopic',
    Question: 'Question',
    QuestionOption: 'QuestionOption',
    Tag: 'Tag',
    QuestionTag: 'QuestionTag',
    QuestionReport: 'QuestionReport',
    QuestionReportOption: 'QuestionReportOption',
    QuestionAlternativeExplanation: 'QuestionAlternativeExplanation',
    ExamPaper: 'ExamPaper',
    ExamSubmission: 'ExamSubmission',
    ExamAnswer: 'ExamAnswer',
    Plan: 'Plan',
    Subscription: 'Subscription',
    Otp: 'Otp',
    ReferralCode: 'ReferralCode',
    Referral: 'Referral',
    ReferralReward: 'ReferralReward'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "stream" | "subject" | "topic" | "subtopic" | "question" | "questionOption" | "tag" | "questionTag" | "questionReport" | "questionReportOption" | "questionAlternativeExplanation" | "examPaper" | "examSubmission" | "examAnswer" | "plan" | "subscription" | "otp" | "referralCode" | "referral" | "referralReward"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Stream: {
        payload: Prisma.$StreamPayload<ExtArgs>
        fields: Prisma.StreamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StreamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StreamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          findFirst: {
            args: Prisma.StreamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StreamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          findMany: {
            args: Prisma.StreamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>[]
          }
          create: {
            args: Prisma.StreamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          createMany: {
            args: Prisma.StreamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StreamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>[]
          }
          delete: {
            args: Prisma.StreamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          update: {
            args: Prisma.StreamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          deleteMany: {
            args: Prisma.StreamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StreamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StreamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>[]
          }
          upsert: {
            args: Prisma.StreamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          aggregate: {
            args: Prisma.StreamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStream>
          }
          groupBy: {
            args: Prisma.StreamGroupByArgs<ExtArgs>
            result: $Utils.Optional<StreamGroupByOutputType>[]
          }
          count: {
            args: Prisma.StreamCountArgs<ExtArgs>
            result: $Utils.Optional<StreamCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      Topic: {
        payload: Prisma.$TopicPayload<ExtArgs>
        fields: Prisma.TopicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TopicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TopicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          findFirst: {
            args: Prisma.TopicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TopicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          findMany: {
            args: Prisma.TopicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>[]
          }
          create: {
            args: Prisma.TopicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          createMany: {
            args: Prisma.TopicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TopicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>[]
          }
          delete: {
            args: Prisma.TopicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          update: {
            args: Prisma.TopicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          deleteMany: {
            args: Prisma.TopicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TopicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TopicUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>[]
          }
          upsert: {
            args: Prisma.TopicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          aggregate: {
            args: Prisma.TopicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTopic>
          }
          groupBy: {
            args: Prisma.TopicGroupByArgs<ExtArgs>
            result: $Utils.Optional<TopicGroupByOutputType>[]
          }
          count: {
            args: Prisma.TopicCountArgs<ExtArgs>
            result: $Utils.Optional<TopicCountAggregateOutputType> | number
          }
        }
      }
      Subtopic: {
        payload: Prisma.$SubtopicPayload<ExtArgs>
        fields: Prisma.SubtopicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubtopicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubtopicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          findFirst: {
            args: Prisma.SubtopicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubtopicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          findMany: {
            args: Prisma.SubtopicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>[]
          }
          create: {
            args: Prisma.SubtopicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          createMany: {
            args: Prisma.SubtopicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubtopicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>[]
          }
          delete: {
            args: Prisma.SubtopicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          update: {
            args: Prisma.SubtopicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          deleteMany: {
            args: Prisma.SubtopicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubtopicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubtopicUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>[]
          }
          upsert: {
            args: Prisma.SubtopicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          aggregate: {
            args: Prisma.SubtopicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubtopic>
          }
          groupBy: {
            args: Prisma.SubtopicGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubtopicGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubtopicCountArgs<ExtArgs>
            result: $Utils.Optional<SubtopicCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      QuestionOption: {
        payload: Prisma.$QuestionOptionPayload<ExtArgs>
        fields: Prisma.QuestionOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          findFirst: {
            args: Prisma.QuestionOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          findMany: {
            args: Prisma.QuestionOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>[]
          }
          create: {
            args: Prisma.QuestionOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          createMany: {
            args: Prisma.QuestionOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>[]
          }
          delete: {
            args: Prisma.QuestionOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          update: {
            args: Prisma.QuestionOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          aggregate: {
            args: Prisma.QuestionOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionOption>
          }
          groupBy: {
            args: Prisma.QuestionOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionOptionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionOptionCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      QuestionTag: {
        payload: Prisma.$QuestionTagPayload<ExtArgs>
        fields: Prisma.QuestionTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload>
          }
          findFirst: {
            args: Prisma.QuestionTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload>
          }
          findMany: {
            args: Prisma.QuestionTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload>[]
          }
          create: {
            args: Prisma.QuestionTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload>
          }
          createMany: {
            args: Prisma.QuestionTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload>[]
          }
          delete: {
            args: Prisma.QuestionTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload>
          }
          update: {
            args: Prisma.QuestionTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload>
          }
          deleteMany: {
            args: Prisma.QuestionTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload>[]
          }
          upsert: {
            args: Prisma.QuestionTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTagPayload>
          }
          aggregate: {
            args: Prisma.QuestionTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionTag>
          }
          groupBy: {
            args: Prisma.QuestionTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionTagCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionTagCountAggregateOutputType> | number
          }
        }
      }
      QuestionReport: {
        payload: Prisma.$QuestionReportPayload<ExtArgs>
        fields: Prisma.QuestionReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload>
          }
          findFirst: {
            args: Prisma.QuestionReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload>
          }
          findMany: {
            args: Prisma.QuestionReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload>[]
          }
          create: {
            args: Prisma.QuestionReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload>
          }
          createMany: {
            args: Prisma.QuestionReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload>[]
          }
          delete: {
            args: Prisma.QuestionReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload>
          }
          update: {
            args: Prisma.QuestionReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload>
          }
          deleteMany: {
            args: Prisma.QuestionReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload>[]
          }
          upsert: {
            args: Prisma.QuestionReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportPayload>
          }
          aggregate: {
            args: Prisma.QuestionReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionReport>
          }
          groupBy: {
            args: Prisma.QuestionReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionReportCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionReportCountAggregateOutputType> | number
          }
        }
      }
      QuestionReportOption: {
        payload: Prisma.$QuestionReportOptionPayload<ExtArgs>
        fields: Prisma.QuestionReportOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionReportOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionReportOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload>
          }
          findFirst: {
            args: Prisma.QuestionReportOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionReportOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload>
          }
          findMany: {
            args: Prisma.QuestionReportOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload>[]
          }
          create: {
            args: Prisma.QuestionReportOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload>
          }
          createMany: {
            args: Prisma.QuestionReportOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionReportOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload>[]
          }
          delete: {
            args: Prisma.QuestionReportOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload>
          }
          update: {
            args: Prisma.QuestionReportOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionReportOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionReportOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionReportOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionReportOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionReportOptionPayload>
          }
          aggregate: {
            args: Prisma.QuestionReportOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionReportOption>
          }
          groupBy: {
            args: Prisma.QuestionReportOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionReportOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionReportOptionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionReportOptionCountAggregateOutputType> | number
          }
        }
      }
      QuestionAlternativeExplanation: {
        payload: Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>
        fields: Prisma.QuestionAlternativeExplanationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionAlternativeExplanationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionAlternativeExplanationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload>
          }
          findFirst: {
            args: Prisma.QuestionAlternativeExplanationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionAlternativeExplanationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload>
          }
          findMany: {
            args: Prisma.QuestionAlternativeExplanationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload>[]
          }
          create: {
            args: Prisma.QuestionAlternativeExplanationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload>
          }
          createMany: {
            args: Prisma.QuestionAlternativeExplanationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionAlternativeExplanationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload>[]
          }
          delete: {
            args: Prisma.QuestionAlternativeExplanationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload>
          }
          update: {
            args: Prisma.QuestionAlternativeExplanationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload>
          }
          deleteMany: {
            args: Prisma.QuestionAlternativeExplanationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionAlternativeExplanationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionAlternativeExplanationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload>[]
          }
          upsert: {
            args: Prisma.QuestionAlternativeExplanationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionAlternativeExplanationPayload>
          }
          aggregate: {
            args: Prisma.QuestionAlternativeExplanationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionAlternativeExplanation>
          }
          groupBy: {
            args: Prisma.QuestionAlternativeExplanationGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionAlternativeExplanationGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionAlternativeExplanationCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionAlternativeExplanationCountAggregateOutputType> | number
          }
        }
      }
      ExamPaper: {
        payload: Prisma.$ExamPaperPayload<ExtArgs>
        fields: Prisma.ExamPaperFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamPaperFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamPaperFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload>
          }
          findFirst: {
            args: Prisma.ExamPaperFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamPaperFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload>
          }
          findMany: {
            args: Prisma.ExamPaperFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload>[]
          }
          create: {
            args: Prisma.ExamPaperCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload>
          }
          createMany: {
            args: Prisma.ExamPaperCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExamPaperCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload>[]
          }
          delete: {
            args: Prisma.ExamPaperDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload>
          }
          update: {
            args: Prisma.ExamPaperUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload>
          }
          deleteMany: {
            args: Prisma.ExamPaperDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamPaperUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExamPaperUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload>[]
          }
          upsert: {
            args: Prisma.ExamPaperUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPaperPayload>
          }
          aggregate: {
            args: Prisma.ExamPaperAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExamPaper>
          }
          groupBy: {
            args: Prisma.ExamPaperGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamPaperGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamPaperCountArgs<ExtArgs>
            result: $Utils.Optional<ExamPaperCountAggregateOutputType> | number
          }
        }
      }
      ExamSubmission: {
        payload: Prisma.$ExamSubmissionPayload<ExtArgs>
        fields: Prisma.ExamSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload>
          }
          findFirst: {
            args: Prisma.ExamSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload>
          }
          findMany: {
            args: Prisma.ExamSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload>[]
          }
          create: {
            args: Prisma.ExamSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload>
          }
          createMany: {
            args: Prisma.ExamSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExamSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload>[]
          }
          delete: {
            args: Prisma.ExamSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload>
          }
          update: {
            args: Prisma.ExamSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.ExamSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExamSubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload>[]
          }
          upsert: {
            args: Prisma.ExamSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamSubmissionPayload>
          }
          aggregate: {
            args: Prisma.ExamSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExamSubmission>
          }
          groupBy: {
            args: Prisma.ExamSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<ExamSubmissionCountAggregateOutputType> | number
          }
        }
      }
      ExamAnswer: {
        payload: Prisma.$ExamAnswerPayload<ExtArgs>
        fields: Prisma.ExamAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload>
          }
          findFirst: {
            args: Prisma.ExamAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload>
          }
          findMany: {
            args: Prisma.ExamAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload>[]
          }
          create: {
            args: Prisma.ExamAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload>
          }
          createMany: {
            args: Prisma.ExamAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExamAnswerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload>[]
          }
          delete: {
            args: Prisma.ExamAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload>
          }
          update: {
            args: Prisma.ExamAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload>
          }
          deleteMany: {
            args: Prisma.ExamAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExamAnswerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload>[]
          }
          upsert: {
            args: Prisma.ExamAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamAnswerPayload>
          }
          aggregate: {
            args: Prisma.ExamAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExamAnswer>
          }
          groupBy: {
            args: Prisma.ExamAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<ExamAnswerCountAggregateOutputType> | number
          }
        }
      }
      Plan: {
        payload: Prisma.$PlanPayload<ExtArgs>
        fields: Prisma.PlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findFirst: {
            args: Prisma.PlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findMany: {
            args: Prisma.PlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          create: {
            args: Prisma.PlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          createMany: {
            args: Prisma.PlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          delete: {
            args: Prisma.PlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          update: {
            args: Prisma.PlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          deleteMany: {
            args: Prisma.PlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          upsert: {
            args: Prisma.PlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          aggregate: {
            args: Prisma.PlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlan>
          }
          groupBy: {
            args: Prisma.PlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanCountArgs<ExtArgs>
            result: $Utils.Optional<PlanCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      Otp: {
        payload: Prisma.$OtpPayload<ExtArgs>
        fields: Prisma.OtpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          findFirst: {
            args: Prisma.OtpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          findMany: {
            args: Prisma.OtpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>[]
          }
          create: {
            args: Prisma.OtpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          createMany: {
            args: Prisma.OtpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OtpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>[]
          }
          delete: {
            args: Prisma.OtpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          update: {
            args: Prisma.OtpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          deleteMany: {
            args: Prisma.OtpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OtpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OtpUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>[]
          }
          upsert: {
            args: Prisma.OtpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          aggregate: {
            args: Prisma.OtpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOtp>
          }
          groupBy: {
            args: Prisma.OtpGroupByArgs<ExtArgs>
            result: $Utils.Optional<OtpGroupByOutputType>[]
          }
          count: {
            args: Prisma.OtpCountArgs<ExtArgs>
            result: $Utils.Optional<OtpCountAggregateOutputType> | number
          }
        }
      }
      ReferralCode: {
        payload: Prisma.$ReferralCodePayload<ExtArgs>
        fields: Prisma.ReferralCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          findFirst: {
            args: Prisma.ReferralCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          findMany: {
            args: Prisma.ReferralCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>[]
          }
          create: {
            args: Prisma.ReferralCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          createMany: {
            args: Prisma.ReferralCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>[]
          }
          delete: {
            args: Prisma.ReferralCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          update: {
            args: Prisma.ReferralCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          deleteMany: {
            args: Prisma.ReferralCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReferralCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>[]
          }
          upsert: {
            args: Prisma.ReferralCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralCodePayload>
          }
          aggregate: {
            args: Prisma.ReferralCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferralCode>
          }
          groupBy: {
            args: Prisma.ReferralCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferralCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralCodeCountArgs<ExtArgs>
            result: $Utils.Optional<ReferralCodeCountAggregateOutputType> | number
          }
        }
      }
      Referral: {
        payload: Prisma.$ReferralPayload<ExtArgs>
        fields: Prisma.ReferralFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          findFirst: {
            args: Prisma.ReferralFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          findMany: {
            args: Prisma.ReferralFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          create: {
            args: Prisma.ReferralCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          createMany: {
            args: Prisma.ReferralCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          delete: {
            args: Prisma.ReferralDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          update: {
            args: Prisma.ReferralUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          deleteMany: {
            args: Prisma.ReferralDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReferralUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          upsert: {
            args: Prisma.ReferralUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          aggregate: {
            args: Prisma.ReferralAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferral>
          }
          groupBy: {
            args: Prisma.ReferralGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferralGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralCountArgs<ExtArgs>
            result: $Utils.Optional<ReferralCountAggregateOutputType> | number
          }
        }
      }
      ReferralReward: {
        payload: Prisma.$ReferralRewardPayload<ExtArgs>
        fields: Prisma.ReferralRewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralRewardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralRewardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload>
          }
          findFirst: {
            args: Prisma.ReferralRewardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralRewardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload>
          }
          findMany: {
            args: Prisma.ReferralRewardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload>[]
          }
          create: {
            args: Prisma.ReferralRewardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload>
          }
          createMany: {
            args: Prisma.ReferralRewardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralRewardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload>[]
          }
          delete: {
            args: Prisma.ReferralRewardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload>
          }
          update: {
            args: Prisma.ReferralRewardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload>
          }
          deleteMany: {
            args: Prisma.ReferralRewardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralRewardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReferralRewardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload>[]
          }
          upsert: {
            args: Prisma.ReferralRewardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralRewardPayload>
          }
          aggregate: {
            args: Prisma.ReferralRewardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferralReward>
          }
          groupBy: {
            args: Prisma.ReferralRewardGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferralRewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralRewardCountArgs<ExtArgs>
            result: $Utils.Optional<ReferralRewardCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    stream?: StreamOmit
    subject?: SubjectOmit
    topic?: TopicOmit
    subtopic?: SubtopicOmit
    question?: QuestionOmit
    questionOption?: QuestionOptionOmit
    tag?: TagOmit
    questionTag?: QuestionTagOmit
    questionReport?: QuestionReportOmit
    questionReportOption?: QuestionReportOptionOmit
    questionAlternativeExplanation?: QuestionAlternativeExplanationOmit
    examPaper?: ExamPaperOmit
    examSubmission?: ExamSubmissionOmit
    examAnswer?: ExamAnswerOmit
    plan?: PlanOmit
    subscription?: SubscriptionOmit
    otp?: OtpOmit
    referralCode?: ReferralCodeOmit
    referral?: ReferralOmit
    referralReward?: ReferralRewardOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    subscriptions: number
    examSubmissions: number
    otps: number
    referralsMade: number
    questionReports: number
    reviewedReports: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | UserCountOutputTypeCountSubscriptionsArgs
    examSubmissions?: boolean | UserCountOutputTypeCountExamSubmissionsArgs
    otps?: boolean | UserCountOutputTypeCountOtpsArgs
    referralsMade?: boolean | UserCountOutputTypeCountReferralsMadeArgs
    questionReports?: boolean | UserCountOutputTypeCountQuestionReportsArgs
    reviewedReports?: boolean | UserCountOutputTypeCountReviewedReportsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExamSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamSubmissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOtpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferralsMadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionReportWhereInput
  }


  /**
   * Count Type StreamCountOutputType
   */

  export type StreamCountOutputType = {
    subjects: number
    users: number
  }

  export type StreamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | StreamCountOutputTypeCountSubjectsArgs
    users?: boolean | StreamCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * StreamCountOutputType without action
   */
  export type StreamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamCountOutputType
     */
    select?: StreamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StreamCountOutputType without action
   */
  export type StreamCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }

  /**
   * StreamCountOutputType without action
   */
  export type StreamCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    topics: number
    questions: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topics?: boolean | SubjectCountOutputTypeCountTopicsArgs
    questions?: boolean | SubjectCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountTopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Count Type TopicCountOutputType
   */

  export type TopicCountOutputType = {
    subtopics: number
    questions: number
  }

  export type TopicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subtopics?: boolean | TopicCountOutputTypeCountSubtopicsArgs
    questions?: boolean | TopicCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicCountOutputType
     */
    select?: TopicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountSubtopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubtopicWhereInput
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Count Type SubtopicCountOutputType
   */

  export type SubtopicCountOutputType = {
    questions: number
  }

  export type SubtopicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | SubtopicCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * SubtopicCountOutputType without action
   */
  export type SubtopicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubtopicCountOutputType
     */
    select?: SubtopicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubtopicCountOutputType without action
   */
  export type SubtopicCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    tags: number
    options: number
    answers: number
    reports: number
    alternativeExplanations: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | QuestionCountOutputTypeCountTagsArgs
    options?: boolean | QuestionCountOutputTypeCountOptionsArgs
    answers?: boolean | QuestionCountOutputTypeCountAnswersArgs
    reports?: boolean | QuestionCountOutputTypeCountReportsArgs
    alternativeExplanations?: boolean | QuestionCountOutputTypeCountAlternativeExplanationsArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionTagWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionOptionWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamAnswerWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionReportWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountAlternativeExplanationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAlternativeExplanationWhereInput
  }


  /**
   * Count Type QuestionOptionCountOutputType
   */

  export type QuestionOptionCountOutputType = {
    selectedByAnswers: number
  }

  export type QuestionOptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selectedByAnswers?: boolean | QuestionOptionCountOutputTypeCountSelectedByAnswersArgs
  }

  // Custom InputTypes
  /**
   * QuestionOptionCountOutputType without action
   */
  export type QuestionOptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptionCountOutputType
     */
    select?: QuestionOptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionOptionCountOutputType without action
   */
  export type QuestionOptionCountOutputTypeCountSelectedByAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamAnswerWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    questions: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | TagCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionTagWhereInput
  }


  /**
   * Count Type QuestionReportCountOutputType
   */

  export type QuestionReportCountOutputType = {
    suggestedOptions: number
  }

  export type QuestionReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    suggestedOptions?: boolean | QuestionReportCountOutputTypeCountSuggestedOptionsArgs
  }

  // Custom InputTypes
  /**
   * QuestionReportCountOutputType without action
   */
  export type QuestionReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportCountOutputType
     */
    select?: QuestionReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionReportCountOutputType without action
   */
  export type QuestionReportCountOutputTypeCountSuggestedOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionReportOptionWhereInput
  }


  /**
   * Count Type ExamPaperCountOutputType
   */

  export type ExamPaperCountOutputType = {
    submissions: number
  }

  export type ExamPaperCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | ExamPaperCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * ExamPaperCountOutputType without action
   */
  export type ExamPaperCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaperCountOutputType
     */
    select?: ExamPaperCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExamPaperCountOutputType without action
   */
  export type ExamPaperCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamSubmissionWhereInput
  }


  /**
   * Count Type ExamSubmissionCountOutputType
   */

  export type ExamSubmissionCountOutputType = {
    answers: number
  }

  export type ExamSubmissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | ExamSubmissionCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * ExamSubmissionCountOutputType without action
   */
  export type ExamSubmissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmissionCountOutputType
     */
    select?: ExamSubmissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExamSubmissionCountOutputType without action
   */
  export type ExamSubmissionCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamAnswerWhereInput
  }


  /**
   * Count Type PlanCountOutputType
   */

  export type PlanCountOutputType = {
    subscriptions: number
  }

  export type PlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | PlanCountOutputTypeCountSubscriptionsArgs
  }

  // Custom InputTypes
  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCountOutputType
     */
    select?: PlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }


  /**
   * Count Type ReferralCodeCountOutputType
   */

  export type ReferralCodeCountOutputType = {
    referrals: number
  }

  export type ReferralCodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrals?: boolean | ReferralCodeCountOutputTypeCountReferralsArgs
  }

  // Custom InputTypes
  /**
   * ReferralCodeCountOutputType without action
   */
  export type ReferralCodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCodeCountOutputType
     */
    select?: ReferralCodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReferralCodeCountOutputType without action
   */
  export type ReferralCodeCountOutputTypeCountReferralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
  }


  /**
   * Count Type ReferralCountOutputType
   */

  export type ReferralCountOutputType = {
    rewards: number
  }

  export type ReferralCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rewards?: boolean | ReferralCountOutputTypeCountRewardsArgs
  }

  // Custom InputTypes
  /**
   * ReferralCountOutputType without action
   */
  export type ReferralCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCountOutputType
     */
    select?: ReferralCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReferralCountOutputType without action
   */
  export type ReferralCountOutputTypeCountRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralRewardWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    emailVerified: boolean | null
    phoneVerified: boolean | null
    hashedPassword: string | null
    fullName: string | null
    role: $Enums.UserRole | null
    streamId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    trialStartedAt: Date | null
    trialEndsAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    emailVerified: boolean | null
    phoneVerified: boolean | null
    hashedPassword: string | null
    fullName: string | null
    role: $Enums.UserRole | null
    streamId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    trialStartedAt: Date | null
    trialEndsAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    phone: number
    emailVerified: number
    phoneVerified: number
    hashedPassword: number
    fullName: number
    role: number
    streamId: number
    createdAt: number
    updatedAt: number
    trialStartedAt: number
    trialEndsAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    emailVerified?: true
    phoneVerified?: true
    hashedPassword?: true
    fullName?: true
    role?: true
    streamId?: true
    createdAt?: true
    updatedAt?: true
    trialStartedAt?: true
    trialEndsAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    emailVerified?: true
    phoneVerified?: true
    hashedPassword?: true
    fullName?: true
    role?: true
    streamId?: true
    createdAt?: true
    updatedAt?: true
    trialStartedAt?: true
    trialEndsAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    emailVerified?: true
    phoneVerified?: true
    hashedPassword?: true
    fullName?: true
    role?: true
    streamId?: true
    createdAt?: true
    updatedAt?: true
    trialStartedAt?: true
    trialEndsAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    phone: string | null
    emailVerified: boolean
    phoneVerified: boolean
    hashedPassword: string
    fullName: string
    role: $Enums.UserRole
    streamId: string | null
    createdAt: Date
    updatedAt: Date
    trialStartedAt: Date | null
    trialEndsAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword?: boolean
    fullName?: boolean
    role?: boolean
    streamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    trialStartedAt?: boolean
    trialEndsAt?: boolean
    stream?: boolean | User$streamArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    examSubmissions?: boolean | User$examSubmissionsArgs<ExtArgs>
    otps?: boolean | User$otpsArgs<ExtArgs>
    referralCode?: boolean | User$referralCodeArgs<ExtArgs>
    referralsMade?: boolean | User$referralsMadeArgs<ExtArgs>
    referralReceived?: boolean | User$referralReceivedArgs<ExtArgs>
    questionReports?: boolean | User$questionReportsArgs<ExtArgs>
    reviewedReports?: boolean | User$reviewedReportsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword?: boolean
    fullName?: boolean
    role?: boolean
    streamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    trialStartedAt?: boolean
    trialEndsAt?: boolean
    stream?: boolean | User$streamArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword?: boolean
    fullName?: boolean
    role?: boolean
    streamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    trialStartedAt?: boolean
    trialEndsAt?: boolean
    stream?: boolean | User$streamArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    phone?: boolean
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword?: boolean
    fullName?: boolean
    role?: boolean
    streamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    trialStartedAt?: boolean
    trialEndsAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "phone" | "emailVerified" | "phoneVerified" | "hashedPassword" | "fullName" | "role" | "streamId" | "createdAt" | "updatedAt" | "trialStartedAt" | "trialEndsAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stream?: boolean | User$streamArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    examSubmissions?: boolean | User$examSubmissionsArgs<ExtArgs>
    otps?: boolean | User$otpsArgs<ExtArgs>
    referralCode?: boolean | User$referralCodeArgs<ExtArgs>
    referralsMade?: boolean | User$referralsMadeArgs<ExtArgs>
    referralReceived?: boolean | User$referralReceivedArgs<ExtArgs>
    questionReports?: boolean | User$questionReportsArgs<ExtArgs>
    reviewedReports?: boolean | User$reviewedReportsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stream?: boolean | User$streamArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stream?: boolean | User$streamArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      stream: Prisma.$StreamPayload<ExtArgs> | null
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      examSubmissions: Prisma.$ExamSubmissionPayload<ExtArgs>[]
      otps: Prisma.$OtpPayload<ExtArgs>[]
      referralCode: Prisma.$ReferralCodePayload<ExtArgs> | null
      referralsMade: Prisma.$ReferralPayload<ExtArgs>[]
      referralReceived: Prisma.$ReferralPayload<ExtArgs> | null
      questionReports: Prisma.$QuestionReportPayload<ExtArgs>[]
      reviewedReports: Prisma.$QuestionReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      phone: string | null
      emailVerified: boolean
      phoneVerified: boolean
      hashedPassword: string
      fullName: string
      role: $Enums.UserRole
      streamId: string | null
      createdAt: Date
      updatedAt: Date
      trialStartedAt: Date | null
      trialEndsAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stream<T extends User$streamArgs<ExtArgs> = {}>(args?: Subset<T, User$streamArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subscriptions<T extends User$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    examSubmissions<T extends User$examSubmissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$examSubmissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    otps<T extends User$otpsArgs<ExtArgs> = {}>(args?: Subset<T, User$otpsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    referralCode<T extends User$referralCodeArgs<ExtArgs> = {}>(args?: Subset<T, User$referralCodeArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    referralsMade<T extends User$referralsMadeArgs<ExtArgs> = {}>(args?: Subset<T, User$referralsMadeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    referralReceived<T extends User$referralReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$referralReceivedArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    questionReports<T extends User$questionReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$questionReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviewedReports<T extends User$reviewedReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewedReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly phoneVerified: FieldRef<"User", 'Boolean'>
    readonly hashedPassword: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly streamId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly trialStartedAt: FieldRef<"User", 'DateTime'>
    readonly trialEndsAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.stream
   */
  export type User$streamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    where?: StreamWhereInput
  }

  /**
   * User.subscriptions
   */
  export type User$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * User.examSubmissions
   */
  export type User$examSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    where?: ExamSubmissionWhereInput
    orderBy?: ExamSubmissionOrderByWithRelationInput | ExamSubmissionOrderByWithRelationInput[]
    cursor?: ExamSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamSubmissionScalarFieldEnum | ExamSubmissionScalarFieldEnum[]
  }

  /**
   * User.otps
   */
  export type User$otpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    where?: OtpWhereInput
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    cursor?: OtpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * User.referralCode
   */
  export type User$referralCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    where?: ReferralCodeWhereInput
  }

  /**
   * User.referralsMade
   */
  export type User$referralsMadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    cursor?: ReferralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * User.referralReceived
   */
  export type User$referralReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
  }

  /**
   * User.questionReports
   */
  export type User$questionReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    where?: QuestionReportWhereInput
    orderBy?: QuestionReportOrderByWithRelationInput | QuestionReportOrderByWithRelationInput[]
    cursor?: QuestionReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionReportScalarFieldEnum | QuestionReportScalarFieldEnum[]
  }

  /**
   * User.reviewedReports
   */
  export type User$reviewedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    where?: QuestionReportWhereInput
    orderBy?: QuestionReportOrderByWithRelationInput | QuestionReportOrderByWithRelationInput[]
    cursor?: QuestionReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionReportScalarFieldEnum | QuestionReportScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Stream
   */

  export type AggregateStream = {
    _count: StreamCountAggregateOutputType | null
    _min: StreamMinAggregateOutputType | null
    _max: StreamMaxAggregateOutputType | null
  }

  export type StreamMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    code: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StreamMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    code: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StreamCountAggregateOutputType = {
    id: number
    name: number
    description: number
    code: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StreamMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    code?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StreamMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    code?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StreamCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    code?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StreamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stream to aggregate.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: StreamOrderByWithRelationInput | StreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Streams
    **/
    _count?: true | StreamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StreamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StreamMaxAggregateInputType
  }

  export type GetStreamAggregateType<T extends StreamAggregateArgs> = {
        [P in keyof T & keyof AggregateStream]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStream[P]>
      : GetScalarType<T[P], AggregateStream[P]>
  }




  export type StreamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StreamWhereInput
    orderBy?: StreamOrderByWithAggregationInput | StreamOrderByWithAggregationInput[]
    by: StreamScalarFieldEnum[] | StreamScalarFieldEnum
    having?: StreamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StreamCountAggregateInputType | true
    _min?: StreamMinAggregateInputType
    _max?: StreamMaxAggregateInputType
  }

  export type StreamGroupByOutputType = {
    id: string
    name: string
    description: string | null
    code: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: StreamCountAggregateOutputType | null
    _min: StreamMinAggregateOutputType | null
    _max: StreamMaxAggregateOutputType | null
  }

  type GetStreamGroupByPayload<T extends StreamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StreamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StreamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StreamGroupByOutputType[P]>
            : GetScalarType<T[P], StreamGroupByOutputType[P]>
        }
      >
    >


  export type StreamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subjects?: boolean | Stream$subjectsArgs<ExtArgs>
    users?: boolean | Stream$usersArgs<ExtArgs>
    _count?: boolean | StreamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stream"]>

  export type StreamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["stream"]>

  export type StreamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["stream"]>

  export type StreamSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StreamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "code" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["stream"]>
  export type StreamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | Stream$subjectsArgs<ExtArgs>
    users?: boolean | Stream$usersArgs<ExtArgs>
    _count?: boolean | StreamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StreamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StreamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StreamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stream"
    objects: {
      subjects: Prisma.$SubjectPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      code: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stream"]>
    composites: {}
  }

  type StreamGetPayload<S extends boolean | null | undefined | StreamDefaultArgs> = $Result.GetResult<Prisma.$StreamPayload, S>

  type StreamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StreamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StreamCountAggregateInputType | true
    }

  export interface StreamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stream'], meta: { name: 'Stream' } }
    /**
     * Find zero or one Stream that matches the filter.
     * @param {StreamFindUniqueArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StreamFindUniqueArgs>(args: SelectSubset<T, StreamFindUniqueArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stream that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StreamFindUniqueOrThrowArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StreamFindUniqueOrThrowArgs>(args: SelectSubset<T, StreamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stream that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindFirstArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StreamFindFirstArgs>(args?: SelectSubset<T, StreamFindFirstArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stream that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindFirstOrThrowArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StreamFindFirstOrThrowArgs>(args?: SelectSubset<T, StreamFindFirstOrThrowArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Streams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Streams
     * const streams = await prisma.stream.findMany()
     * 
     * // Get first 10 Streams
     * const streams = await prisma.stream.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const streamWithIdOnly = await prisma.stream.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StreamFindManyArgs>(args?: SelectSubset<T, StreamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stream.
     * @param {StreamCreateArgs} args - Arguments to create a Stream.
     * @example
     * // Create one Stream
     * const Stream = await prisma.stream.create({
     *   data: {
     *     // ... data to create a Stream
     *   }
     * })
     * 
     */
    create<T extends StreamCreateArgs>(args: SelectSubset<T, StreamCreateArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Streams.
     * @param {StreamCreateManyArgs} args - Arguments to create many Streams.
     * @example
     * // Create many Streams
     * const stream = await prisma.stream.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StreamCreateManyArgs>(args?: SelectSubset<T, StreamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Streams and returns the data saved in the database.
     * @param {StreamCreateManyAndReturnArgs} args - Arguments to create many Streams.
     * @example
     * // Create many Streams
     * const stream = await prisma.stream.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Streams and only return the `id`
     * const streamWithIdOnly = await prisma.stream.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StreamCreateManyAndReturnArgs>(args?: SelectSubset<T, StreamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Stream.
     * @param {StreamDeleteArgs} args - Arguments to delete one Stream.
     * @example
     * // Delete one Stream
     * const Stream = await prisma.stream.delete({
     *   where: {
     *     // ... filter to delete one Stream
     *   }
     * })
     * 
     */
    delete<T extends StreamDeleteArgs>(args: SelectSubset<T, StreamDeleteArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stream.
     * @param {StreamUpdateArgs} args - Arguments to update one Stream.
     * @example
     * // Update one Stream
     * const stream = await prisma.stream.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StreamUpdateArgs>(args: SelectSubset<T, StreamUpdateArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Streams.
     * @param {StreamDeleteManyArgs} args - Arguments to filter Streams to delete.
     * @example
     * // Delete a few Streams
     * const { count } = await prisma.stream.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StreamDeleteManyArgs>(args?: SelectSubset<T, StreamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Streams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Streams
     * const stream = await prisma.stream.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StreamUpdateManyArgs>(args: SelectSubset<T, StreamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Streams and returns the data updated in the database.
     * @param {StreamUpdateManyAndReturnArgs} args - Arguments to update many Streams.
     * @example
     * // Update many Streams
     * const stream = await prisma.stream.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Streams and only return the `id`
     * const streamWithIdOnly = await prisma.stream.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StreamUpdateManyAndReturnArgs>(args: SelectSubset<T, StreamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Stream.
     * @param {StreamUpsertArgs} args - Arguments to update or create a Stream.
     * @example
     * // Update or create a Stream
     * const stream = await prisma.stream.upsert({
     *   create: {
     *     // ... data to create a Stream
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stream we want to update
     *   }
     * })
     */
    upsert<T extends StreamUpsertArgs>(args: SelectSubset<T, StreamUpsertArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Streams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamCountArgs} args - Arguments to filter Streams to count.
     * @example
     * // Count the number of Streams
     * const count = await prisma.stream.count({
     *   where: {
     *     // ... the filter for the Streams we want to count
     *   }
     * })
    **/
    count<T extends StreamCountArgs>(
      args?: Subset<T, StreamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StreamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StreamAggregateArgs>(args: Subset<T, StreamAggregateArgs>): Prisma.PrismaPromise<GetStreamAggregateType<T>>

    /**
     * Group by Stream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StreamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StreamGroupByArgs['orderBy'] }
        : { orderBy?: StreamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StreamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStreamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stream model
   */
  readonly fields: StreamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stream.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StreamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subjects<T extends Stream$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Stream$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Stream$usersArgs<ExtArgs> = {}>(args?: Subset<T, Stream$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stream model
   */
  interface StreamFieldRefs {
    readonly id: FieldRef<"Stream", 'String'>
    readonly name: FieldRef<"Stream", 'String'>
    readonly description: FieldRef<"Stream", 'String'>
    readonly code: FieldRef<"Stream", 'String'>
    readonly isActive: FieldRef<"Stream", 'Boolean'>
    readonly createdAt: FieldRef<"Stream", 'DateTime'>
    readonly updatedAt: FieldRef<"Stream", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Stream findUnique
   */
  export type StreamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Stream to fetch.
     */
    where: StreamWhereUniqueInput
  }

  /**
   * Stream findUniqueOrThrow
   */
  export type StreamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Stream to fetch.
     */
    where: StreamWhereUniqueInput
  }

  /**
   * Stream findFirst
   */
  export type StreamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Stream to fetch.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: StreamOrderByWithRelationInput | StreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Streams.
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Streams.
     */
    distinct?: StreamScalarFieldEnum | StreamScalarFieldEnum[]
  }

  /**
   * Stream findFirstOrThrow
   */
  export type StreamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Stream to fetch.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: StreamOrderByWithRelationInput | StreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Streams.
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Streams.
     */
    distinct?: StreamScalarFieldEnum | StreamScalarFieldEnum[]
  }

  /**
   * Stream findMany
   */
  export type StreamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Streams to fetch.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: StreamOrderByWithRelationInput | StreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Streams.
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    distinct?: StreamScalarFieldEnum | StreamScalarFieldEnum[]
  }

  /**
   * Stream create
   */
  export type StreamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * The data needed to create a Stream.
     */
    data: XOR<StreamCreateInput, StreamUncheckedCreateInput>
  }

  /**
   * Stream createMany
   */
  export type StreamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Streams.
     */
    data: StreamCreateManyInput | StreamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stream createManyAndReturn
   */
  export type StreamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * The data used to create many Streams.
     */
    data: StreamCreateManyInput | StreamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stream update
   */
  export type StreamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * The data needed to update a Stream.
     */
    data: XOR<StreamUpdateInput, StreamUncheckedUpdateInput>
    /**
     * Choose, which Stream to update.
     */
    where: StreamWhereUniqueInput
  }

  /**
   * Stream updateMany
   */
  export type StreamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Streams.
     */
    data: XOR<StreamUpdateManyMutationInput, StreamUncheckedUpdateManyInput>
    /**
     * Filter which Streams to update
     */
    where?: StreamWhereInput
    /**
     * Limit how many Streams to update.
     */
    limit?: number
  }

  /**
   * Stream updateManyAndReturn
   */
  export type StreamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * The data used to update Streams.
     */
    data: XOR<StreamUpdateManyMutationInput, StreamUncheckedUpdateManyInput>
    /**
     * Filter which Streams to update
     */
    where?: StreamWhereInput
    /**
     * Limit how many Streams to update.
     */
    limit?: number
  }

  /**
   * Stream upsert
   */
  export type StreamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * The filter to search for the Stream to update in case it exists.
     */
    where: StreamWhereUniqueInput
    /**
     * In case the Stream found by the `where` argument doesn't exist, create a new Stream with this data.
     */
    create: XOR<StreamCreateInput, StreamUncheckedCreateInput>
    /**
     * In case the Stream was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StreamUpdateInput, StreamUncheckedUpdateInput>
  }

  /**
   * Stream delete
   */
  export type StreamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter which Stream to delete.
     */
    where: StreamWhereUniqueInput
  }

  /**
   * Stream deleteMany
   */
  export type StreamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Streams to delete
     */
    where?: StreamWhereInput
    /**
     * Limit how many Streams to delete.
     */
    limit?: number
  }

  /**
   * Stream.subjects
   */
  export type Stream$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Stream.users
   */
  export type Stream$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Stream without action
   */
  export type StreamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stream
     */
    omit?: StreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    streamId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    streamId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    streamId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    streamId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    streamId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    streamId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    streamId: string
    createdAt: Date
    updatedAt: Date
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    streamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stream?: boolean | StreamDefaultArgs<ExtArgs>
    topics?: boolean | Subject$topicsArgs<ExtArgs>
    questions?: boolean | Subject$questionsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    streamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stream?: boolean | StreamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    streamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stream?: boolean | StreamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    streamId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "streamId" | "createdAt" | "updatedAt", ExtArgs["result"]["subject"]>
  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stream?: boolean | StreamDefaultArgs<ExtArgs>
    topics?: boolean | Subject$topicsArgs<ExtArgs>
    questions?: boolean | Subject$questionsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stream?: boolean | StreamDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stream?: boolean | StreamDefaultArgs<ExtArgs>
  }

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      stream: Prisma.$StreamPayload<ExtArgs>
      topics: Prisma.$TopicPayload<ExtArgs>[]
      questions: Prisma.$QuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      streamId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subjects and returns the data saved in the database.
     * @param {SubjectCreateManyAndReturnArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects and returns the data updated in the database.
     * @param {SubjectUpdateManyAndReturnArgs} args - Arguments to update many Subjects.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, SubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stream<T extends StreamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StreamDefaultArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    topics<T extends Subject$topicsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$topicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questions<T extends Subject$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'String'>
    readonly name: FieldRef<"Subject", 'String'>
    readonly description: FieldRef<"Subject", 'String'>
    readonly streamId: FieldRef<"Subject", 'String'>
    readonly createdAt: FieldRef<"Subject", 'DateTime'>
    readonly updatedAt: FieldRef<"Subject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject createManyAndReturn
   */
  export type SubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject updateManyAndReturn
   */
  export type SubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to delete.
     */
    limit?: number
  }

  /**
   * Subject.topics
   */
  export type Subject$topicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    where?: TopicWhereInput
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    cursor?: TopicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Subject.questions
   */
  export type Subject$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model Topic
   */

  export type AggregateTopic = {
    _count: TopicCountAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  export type TopicMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    subjectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TopicMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    subjectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TopicCountAggregateOutputType = {
    id: number
    name: number
    description: number
    subjectId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TopicMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    subjectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TopicMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    subjectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TopicCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    subjectId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TopicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Topic to aggregate.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Topics
    **/
    _count?: true | TopicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopicMaxAggregateInputType
  }

  export type GetTopicAggregateType<T extends TopicAggregateArgs> = {
        [P in keyof T & keyof AggregateTopic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopic[P]>
      : GetScalarType<T[P], AggregateTopic[P]>
  }




  export type TopicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicWhereInput
    orderBy?: TopicOrderByWithAggregationInput | TopicOrderByWithAggregationInput[]
    by: TopicScalarFieldEnum[] | TopicScalarFieldEnum
    having?: TopicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopicCountAggregateInputType | true
    _min?: TopicMinAggregateInputType
    _max?: TopicMaxAggregateInputType
  }

  export type TopicGroupByOutputType = {
    id: string
    name: string
    description: string | null
    subjectId: string
    createdAt: Date
    updatedAt: Date
    _count: TopicCountAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  type GetTopicGroupByPayload<T extends TopicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TopicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopicGroupByOutputType[P]>
            : GetScalarType<T[P], TopicGroupByOutputType[P]>
        }
      >
    >


  export type TopicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    subjectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    subtopics?: boolean | Topic$subtopicsArgs<ExtArgs>
    questions?: boolean | Topic$questionsArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topic"]>

  export type TopicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    subjectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topic"]>

  export type TopicSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    subjectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topic"]>

  export type TopicSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    subjectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TopicOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "subjectId" | "createdAt" | "updatedAt", ExtArgs["result"]["topic"]>
  export type TopicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    subtopics?: boolean | Topic$subtopicsArgs<ExtArgs>
    questions?: boolean | Topic$questionsArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TopicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type TopicIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $TopicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Topic"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
      subtopics: Prisma.$SubtopicPayload<ExtArgs>[]
      questions: Prisma.$QuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      subjectId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["topic"]>
    composites: {}
  }

  type TopicGetPayload<S extends boolean | null | undefined | TopicDefaultArgs> = $Result.GetResult<Prisma.$TopicPayload, S>

  type TopicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TopicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TopicCountAggregateInputType | true
    }

  export interface TopicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Topic'], meta: { name: 'Topic' } }
    /**
     * Find zero or one Topic that matches the filter.
     * @param {TopicFindUniqueArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TopicFindUniqueArgs>(args: SelectSubset<T, TopicFindUniqueArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Topic that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TopicFindUniqueOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TopicFindUniqueOrThrowArgs>(args: SelectSubset<T, TopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Topic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicFindFirstArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TopicFindFirstArgs>(args?: SelectSubset<T, TopicFindFirstArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Topic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicFindFirstOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TopicFindFirstOrThrowArgs>(args?: SelectSubset<T, TopicFindFirstOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Topics
     * const topics = await prisma.topic.findMany()
     * 
     * // Get first 10 Topics
     * const topics = await prisma.topic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topicWithIdOnly = await prisma.topic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TopicFindManyArgs>(args?: SelectSubset<T, TopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Topic.
     * @param {TopicCreateArgs} args - Arguments to create a Topic.
     * @example
     * // Create one Topic
     * const Topic = await prisma.topic.create({
     *   data: {
     *     // ... data to create a Topic
     *   }
     * })
     * 
     */
    create<T extends TopicCreateArgs>(args: SelectSubset<T, TopicCreateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Topics.
     * @param {TopicCreateManyArgs} args - Arguments to create many Topics.
     * @example
     * // Create many Topics
     * const topic = await prisma.topic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TopicCreateManyArgs>(args?: SelectSubset<T, TopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Topics and returns the data saved in the database.
     * @param {TopicCreateManyAndReturnArgs} args - Arguments to create many Topics.
     * @example
     * // Create many Topics
     * const topic = await prisma.topic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Topics and only return the `id`
     * const topicWithIdOnly = await prisma.topic.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TopicCreateManyAndReturnArgs>(args?: SelectSubset<T, TopicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Topic.
     * @param {TopicDeleteArgs} args - Arguments to delete one Topic.
     * @example
     * // Delete one Topic
     * const Topic = await prisma.topic.delete({
     *   where: {
     *     // ... filter to delete one Topic
     *   }
     * })
     * 
     */
    delete<T extends TopicDeleteArgs>(args: SelectSubset<T, TopicDeleteArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Topic.
     * @param {TopicUpdateArgs} args - Arguments to update one Topic.
     * @example
     * // Update one Topic
     * const topic = await prisma.topic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TopicUpdateArgs>(args: SelectSubset<T, TopicUpdateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Topics.
     * @param {TopicDeleteManyArgs} args - Arguments to filter Topics to delete.
     * @example
     * // Delete a few Topics
     * const { count } = await prisma.topic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TopicDeleteManyArgs>(args?: SelectSubset<T, TopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Topics
     * const topic = await prisma.topic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TopicUpdateManyArgs>(args: SelectSubset<T, TopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Topics and returns the data updated in the database.
     * @param {TopicUpdateManyAndReturnArgs} args - Arguments to update many Topics.
     * @example
     * // Update many Topics
     * const topic = await prisma.topic.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Topics and only return the `id`
     * const topicWithIdOnly = await prisma.topic.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TopicUpdateManyAndReturnArgs>(args: SelectSubset<T, TopicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Topic.
     * @param {TopicUpsertArgs} args - Arguments to update or create a Topic.
     * @example
     * // Update or create a Topic
     * const topic = await prisma.topic.upsert({
     *   create: {
     *     // ... data to create a Topic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Topic we want to update
     *   }
     * })
     */
    upsert<T extends TopicUpsertArgs>(args: SelectSubset<T, TopicUpsertArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicCountArgs} args - Arguments to filter Topics to count.
     * @example
     * // Count the number of Topics
     * const count = await prisma.topic.count({
     *   where: {
     *     // ... the filter for the Topics we want to count
     *   }
     * })
    **/
    count<T extends TopicCountArgs>(
      args?: Subset<T, TopicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopicAggregateArgs>(args: Subset<T, TopicAggregateArgs>): Prisma.PrismaPromise<GetTopicAggregateType<T>>

    /**
     * Group by Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopicGroupByArgs['orderBy'] }
        : { orderBy?: TopicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Topic model
   */
  readonly fields: TopicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Topic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TopicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subtopics<T extends Topic$subtopicsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$subtopicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questions<T extends Topic$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Topic model
   */
  interface TopicFieldRefs {
    readonly id: FieldRef<"Topic", 'String'>
    readonly name: FieldRef<"Topic", 'String'>
    readonly description: FieldRef<"Topic", 'String'>
    readonly subjectId: FieldRef<"Topic", 'String'>
    readonly createdAt: FieldRef<"Topic", 'DateTime'>
    readonly updatedAt: FieldRef<"Topic", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Topic findUnique
   */
  export type TopicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic findUniqueOrThrow
   */
  export type TopicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic findFirst
   */
  export type TopicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Topics.
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Topics.
     */
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Topic findFirstOrThrow
   */
  export type TopicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Topics.
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Topics.
     */
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Topic findMany
   */
  export type TopicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topics to fetch.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Topics.
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Topic create
   */
  export type TopicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * The data needed to create a Topic.
     */
    data: XOR<TopicCreateInput, TopicUncheckedCreateInput>
  }

  /**
   * Topic createMany
   */
  export type TopicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Topics.
     */
    data: TopicCreateManyInput | TopicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Topic createManyAndReturn
   */
  export type TopicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * The data used to create many Topics.
     */
    data: TopicCreateManyInput | TopicCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Topic update
   */
  export type TopicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * The data needed to update a Topic.
     */
    data: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
    /**
     * Choose, which Topic to update.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic updateMany
   */
  export type TopicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Topics.
     */
    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyInput>
    /**
     * Filter which Topics to update
     */
    where?: TopicWhereInput
    /**
     * Limit how many Topics to update.
     */
    limit?: number
  }

  /**
   * Topic updateManyAndReturn
   */
  export type TopicUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * The data used to update Topics.
     */
    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyInput>
    /**
     * Filter which Topics to update
     */
    where?: TopicWhereInput
    /**
     * Limit how many Topics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Topic upsert
   */
  export type TopicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * The filter to search for the Topic to update in case it exists.
     */
    where: TopicWhereUniqueInput
    /**
     * In case the Topic found by the `where` argument doesn't exist, create a new Topic with this data.
     */
    create: XOR<TopicCreateInput, TopicUncheckedCreateInput>
    /**
     * In case the Topic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
  }

  /**
   * Topic delete
   */
  export type TopicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter which Topic to delete.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic deleteMany
   */
  export type TopicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Topics to delete
     */
    where?: TopicWhereInput
    /**
     * Limit how many Topics to delete.
     */
    limit?: number
  }

  /**
   * Topic.subtopics
   */
  export type Topic$subtopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    where?: SubtopicWhereInput
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    cursor?: SubtopicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubtopicScalarFieldEnum | SubtopicScalarFieldEnum[]
  }

  /**
   * Topic.questions
   */
  export type Topic$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Topic without action
   */
  export type TopicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
  }


  /**
   * Model Subtopic
   */

  export type AggregateSubtopic = {
    _count: SubtopicCountAggregateOutputType | null
    _min: SubtopicMinAggregateOutputType | null
    _max: SubtopicMaxAggregateOutputType | null
  }

  export type SubtopicMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    topicId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubtopicMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    topicId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubtopicCountAggregateOutputType = {
    id: number
    name: number
    description: number
    topicId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubtopicMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    topicId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubtopicMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    topicId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubtopicCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    topicId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubtopicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subtopic to aggregate.
     */
    where?: SubtopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtopics to fetch.
     */
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubtopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtopics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subtopics
    **/
    _count?: true | SubtopicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubtopicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubtopicMaxAggregateInputType
  }

  export type GetSubtopicAggregateType<T extends SubtopicAggregateArgs> = {
        [P in keyof T & keyof AggregateSubtopic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubtopic[P]>
      : GetScalarType<T[P], AggregateSubtopic[P]>
  }




  export type SubtopicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubtopicWhereInput
    orderBy?: SubtopicOrderByWithAggregationInput | SubtopicOrderByWithAggregationInput[]
    by: SubtopicScalarFieldEnum[] | SubtopicScalarFieldEnum
    having?: SubtopicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubtopicCountAggregateInputType | true
    _min?: SubtopicMinAggregateInputType
    _max?: SubtopicMaxAggregateInputType
  }

  export type SubtopicGroupByOutputType = {
    id: string
    name: string
    description: string | null
    topicId: string
    createdAt: Date
    updatedAt: Date
    _count: SubtopicCountAggregateOutputType | null
    _min: SubtopicMinAggregateOutputType | null
    _max: SubtopicMaxAggregateOutputType | null
  }

  type GetSubtopicGroupByPayload<T extends SubtopicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubtopicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubtopicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubtopicGroupByOutputType[P]>
            : GetScalarType<T[P], SubtopicGroupByOutputType[P]>
        }
      >
    >


  export type SubtopicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    topicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    questions?: boolean | Subtopic$questionsArgs<ExtArgs>
    _count?: boolean | SubtopicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subtopic"]>

  export type SubtopicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    topicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subtopic"]>

  export type SubtopicSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    topicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subtopic"]>

  export type SubtopicSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    topicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubtopicOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "topicId" | "createdAt" | "updatedAt", ExtArgs["result"]["subtopic"]>
  export type SubtopicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    questions?: boolean | Subtopic$questionsArgs<ExtArgs>
    _count?: boolean | SubtopicCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubtopicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }
  export type SubtopicIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }

  export type $SubtopicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subtopic"
    objects: {
      topic: Prisma.$TopicPayload<ExtArgs>
      questions: Prisma.$QuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      topicId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subtopic"]>
    composites: {}
  }

  type SubtopicGetPayload<S extends boolean | null | undefined | SubtopicDefaultArgs> = $Result.GetResult<Prisma.$SubtopicPayload, S>

  type SubtopicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubtopicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubtopicCountAggregateInputType | true
    }

  export interface SubtopicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subtopic'], meta: { name: 'Subtopic' } }
    /**
     * Find zero or one Subtopic that matches the filter.
     * @param {SubtopicFindUniqueArgs} args - Arguments to find a Subtopic
     * @example
     * // Get one Subtopic
     * const subtopic = await prisma.subtopic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubtopicFindUniqueArgs>(args: SelectSubset<T, SubtopicFindUniqueArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subtopic that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubtopicFindUniqueOrThrowArgs} args - Arguments to find a Subtopic
     * @example
     * // Get one Subtopic
     * const subtopic = await prisma.subtopic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubtopicFindUniqueOrThrowArgs>(args: SelectSubset<T, SubtopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subtopic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicFindFirstArgs} args - Arguments to find a Subtopic
     * @example
     * // Get one Subtopic
     * const subtopic = await prisma.subtopic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubtopicFindFirstArgs>(args?: SelectSubset<T, SubtopicFindFirstArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subtopic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicFindFirstOrThrowArgs} args - Arguments to find a Subtopic
     * @example
     * // Get one Subtopic
     * const subtopic = await prisma.subtopic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubtopicFindFirstOrThrowArgs>(args?: SelectSubset<T, SubtopicFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subtopics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subtopics
     * const subtopics = await prisma.subtopic.findMany()
     * 
     * // Get first 10 Subtopics
     * const subtopics = await prisma.subtopic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subtopicWithIdOnly = await prisma.subtopic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubtopicFindManyArgs>(args?: SelectSubset<T, SubtopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subtopic.
     * @param {SubtopicCreateArgs} args - Arguments to create a Subtopic.
     * @example
     * // Create one Subtopic
     * const Subtopic = await prisma.subtopic.create({
     *   data: {
     *     // ... data to create a Subtopic
     *   }
     * })
     * 
     */
    create<T extends SubtopicCreateArgs>(args: SelectSubset<T, SubtopicCreateArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subtopics.
     * @param {SubtopicCreateManyArgs} args - Arguments to create many Subtopics.
     * @example
     * // Create many Subtopics
     * const subtopic = await prisma.subtopic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubtopicCreateManyArgs>(args?: SelectSubset<T, SubtopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subtopics and returns the data saved in the database.
     * @param {SubtopicCreateManyAndReturnArgs} args - Arguments to create many Subtopics.
     * @example
     * // Create many Subtopics
     * const subtopic = await prisma.subtopic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subtopics and only return the `id`
     * const subtopicWithIdOnly = await prisma.subtopic.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubtopicCreateManyAndReturnArgs>(args?: SelectSubset<T, SubtopicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subtopic.
     * @param {SubtopicDeleteArgs} args - Arguments to delete one Subtopic.
     * @example
     * // Delete one Subtopic
     * const Subtopic = await prisma.subtopic.delete({
     *   where: {
     *     // ... filter to delete one Subtopic
     *   }
     * })
     * 
     */
    delete<T extends SubtopicDeleteArgs>(args: SelectSubset<T, SubtopicDeleteArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subtopic.
     * @param {SubtopicUpdateArgs} args - Arguments to update one Subtopic.
     * @example
     * // Update one Subtopic
     * const subtopic = await prisma.subtopic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubtopicUpdateArgs>(args: SelectSubset<T, SubtopicUpdateArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subtopics.
     * @param {SubtopicDeleteManyArgs} args - Arguments to filter Subtopics to delete.
     * @example
     * // Delete a few Subtopics
     * const { count } = await prisma.subtopic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubtopicDeleteManyArgs>(args?: SelectSubset<T, SubtopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subtopics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subtopics
     * const subtopic = await prisma.subtopic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubtopicUpdateManyArgs>(args: SelectSubset<T, SubtopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subtopics and returns the data updated in the database.
     * @param {SubtopicUpdateManyAndReturnArgs} args - Arguments to update many Subtopics.
     * @example
     * // Update many Subtopics
     * const subtopic = await prisma.subtopic.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subtopics and only return the `id`
     * const subtopicWithIdOnly = await prisma.subtopic.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubtopicUpdateManyAndReturnArgs>(args: SelectSubset<T, SubtopicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subtopic.
     * @param {SubtopicUpsertArgs} args - Arguments to update or create a Subtopic.
     * @example
     * // Update or create a Subtopic
     * const subtopic = await prisma.subtopic.upsert({
     *   create: {
     *     // ... data to create a Subtopic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subtopic we want to update
     *   }
     * })
     */
    upsert<T extends SubtopicUpsertArgs>(args: SelectSubset<T, SubtopicUpsertArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subtopics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicCountArgs} args - Arguments to filter Subtopics to count.
     * @example
     * // Count the number of Subtopics
     * const count = await prisma.subtopic.count({
     *   where: {
     *     // ... the filter for the Subtopics we want to count
     *   }
     * })
    **/
    count<T extends SubtopicCountArgs>(
      args?: Subset<T, SubtopicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubtopicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subtopic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubtopicAggregateArgs>(args: Subset<T, SubtopicAggregateArgs>): Prisma.PrismaPromise<GetSubtopicAggregateType<T>>

    /**
     * Group by Subtopic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubtopicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubtopicGroupByArgs['orderBy'] }
        : { orderBy?: SubtopicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubtopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubtopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subtopic model
   */
  readonly fields: SubtopicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subtopic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubtopicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    topic<T extends TopicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TopicDefaultArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questions<T extends Subtopic$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Subtopic$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subtopic model
   */
  interface SubtopicFieldRefs {
    readonly id: FieldRef<"Subtopic", 'String'>
    readonly name: FieldRef<"Subtopic", 'String'>
    readonly description: FieldRef<"Subtopic", 'String'>
    readonly topicId: FieldRef<"Subtopic", 'String'>
    readonly createdAt: FieldRef<"Subtopic", 'DateTime'>
    readonly updatedAt: FieldRef<"Subtopic", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subtopic findUnique
   */
  export type SubtopicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopic to fetch.
     */
    where: SubtopicWhereUniqueInput
  }

  /**
   * Subtopic findUniqueOrThrow
   */
  export type SubtopicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopic to fetch.
     */
    where: SubtopicWhereUniqueInput
  }

  /**
   * Subtopic findFirst
   */
  export type SubtopicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopic to fetch.
     */
    where?: SubtopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtopics to fetch.
     */
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subtopics.
     */
    cursor?: SubtopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtopics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subtopics.
     */
    distinct?: SubtopicScalarFieldEnum | SubtopicScalarFieldEnum[]
  }

  /**
   * Subtopic findFirstOrThrow
   */
  export type SubtopicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopic to fetch.
     */
    where?: SubtopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtopics to fetch.
     */
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subtopics.
     */
    cursor?: SubtopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtopics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subtopics.
     */
    distinct?: SubtopicScalarFieldEnum | SubtopicScalarFieldEnum[]
  }

  /**
   * Subtopic findMany
   */
  export type SubtopicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopics to fetch.
     */
    where?: SubtopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtopics to fetch.
     */
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subtopics.
     */
    cursor?: SubtopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtopics.
     */
    skip?: number
    distinct?: SubtopicScalarFieldEnum | SubtopicScalarFieldEnum[]
  }

  /**
   * Subtopic create
   */
  export type SubtopicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * The data needed to create a Subtopic.
     */
    data: XOR<SubtopicCreateInput, SubtopicUncheckedCreateInput>
  }

  /**
   * Subtopic createMany
   */
  export type SubtopicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subtopics.
     */
    data: SubtopicCreateManyInput | SubtopicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subtopic createManyAndReturn
   */
  export type SubtopicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * The data used to create many Subtopics.
     */
    data: SubtopicCreateManyInput | SubtopicCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subtopic update
   */
  export type SubtopicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * The data needed to update a Subtopic.
     */
    data: XOR<SubtopicUpdateInput, SubtopicUncheckedUpdateInput>
    /**
     * Choose, which Subtopic to update.
     */
    where: SubtopicWhereUniqueInput
  }

  /**
   * Subtopic updateMany
   */
  export type SubtopicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subtopics.
     */
    data: XOR<SubtopicUpdateManyMutationInput, SubtopicUncheckedUpdateManyInput>
    /**
     * Filter which Subtopics to update
     */
    where?: SubtopicWhereInput
    /**
     * Limit how many Subtopics to update.
     */
    limit?: number
  }

  /**
   * Subtopic updateManyAndReturn
   */
  export type SubtopicUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * The data used to update Subtopics.
     */
    data: XOR<SubtopicUpdateManyMutationInput, SubtopicUncheckedUpdateManyInput>
    /**
     * Filter which Subtopics to update
     */
    where?: SubtopicWhereInput
    /**
     * Limit how many Subtopics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subtopic upsert
   */
  export type SubtopicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * The filter to search for the Subtopic to update in case it exists.
     */
    where: SubtopicWhereUniqueInput
    /**
     * In case the Subtopic found by the `where` argument doesn't exist, create a new Subtopic with this data.
     */
    create: XOR<SubtopicCreateInput, SubtopicUncheckedCreateInput>
    /**
     * In case the Subtopic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubtopicUpdateInput, SubtopicUncheckedUpdateInput>
  }

  /**
   * Subtopic delete
   */
  export type SubtopicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter which Subtopic to delete.
     */
    where: SubtopicWhereUniqueInput
  }

  /**
   * Subtopic deleteMany
   */
  export type SubtopicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subtopics to delete
     */
    where?: SubtopicWhereInput
    /**
     * Limit how many Subtopics to delete.
     */
    limit?: number
  }

  /**
   * Subtopic.questions
   */
  export type Subtopic$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Subtopic without action
   */
  export type SubtopicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    yearAppeared: number | null
  }

  export type QuestionSumAggregateOutputType = {
    yearAppeared: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    stem: string | null
    explanation: string | null
    difficulty: $Enums.Difficulty | null
    yearAppeared: number | null
    isPreviousYear: boolean | null
    isAIGenerated: boolean | null
    aiPrompt: string | null
    subjectId: string | null
    topicId: string | null
    subtopicId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    stem: string | null
    explanation: string | null
    difficulty: $Enums.Difficulty | null
    yearAppeared: number | null
    isPreviousYear: boolean | null
    isAIGenerated: boolean | null
    aiPrompt: string | null
    subjectId: string | null
    topicId: string | null
    subtopicId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    stem: number
    explanation: number
    difficulty: number
    yearAppeared: number
    isPreviousYear: number
    isAIGenerated: number
    aiPrompt: number
    subjectId: number
    topicId: number
    subtopicId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    yearAppeared?: true
  }

  export type QuestionSumAggregateInputType = {
    yearAppeared?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    stem?: true
    explanation?: true
    difficulty?: true
    yearAppeared?: true
    isPreviousYear?: true
    isAIGenerated?: true
    aiPrompt?: true
    subjectId?: true
    topicId?: true
    subtopicId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    stem?: true
    explanation?: true
    difficulty?: true
    yearAppeared?: true
    isPreviousYear?: true
    isAIGenerated?: true
    aiPrompt?: true
    subjectId?: true
    topicId?: true
    subtopicId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    stem?: true
    explanation?: true
    difficulty?: true
    yearAppeared?: true
    isPreviousYear?: true
    isAIGenerated?: true
    aiPrompt?: true
    subjectId?: true
    topicId?: true
    subtopicId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    stem: string
    explanation: string | null
    difficulty: $Enums.Difficulty
    yearAppeared: number | null
    isPreviousYear: boolean
    isAIGenerated: boolean
    aiPrompt: string | null
    subjectId: string | null
    topicId: string | null
    subtopicId: string | null
    createdAt: Date
    updatedAt: Date
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stem?: boolean
    explanation?: boolean
    difficulty?: boolean
    yearAppeared?: boolean
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: boolean
    subjectId?: boolean
    topicId?: boolean
    subtopicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | Question$subjectArgs<ExtArgs>
    topic?: boolean | Question$topicArgs<ExtArgs>
    subtopic?: boolean | Question$subtopicArgs<ExtArgs>
    tags?: boolean | Question$tagsArgs<ExtArgs>
    options?: boolean | Question$optionsArgs<ExtArgs>
    answers?: boolean | Question$answersArgs<ExtArgs>
    reports?: boolean | Question$reportsArgs<ExtArgs>
    alternativeExplanations?: boolean | Question$alternativeExplanationsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stem?: boolean
    explanation?: boolean
    difficulty?: boolean
    yearAppeared?: boolean
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: boolean
    subjectId?: boolean
    topicId?: boolean
    subtopicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | Question$subjectArgs<ExtArgs>
    topic?: boolean | Question$topicArgs<ExtArgs>
    subtopic?: boolean | Question$subtopicArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stem?: boolean
    explanation?: boolean
    difficulty?: boolean
    yearAppeared?: boolean
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: boolean
    subjectId?: boolean
    topicId?: boolean
    subtopicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | Question$subjectArgs<ExtArgs>
    topic?: boolean | Question$topicArgs<ExtArgs>
    subtopic?: boolean | Question$subtopicArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    stem?: boolean
    explanation?: boolean
    difficulty?: boolean
    yearAppeared?: boolean
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: boolean
    subjectId?: boolean
    topicId?: boolean
    subtopicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stem" | "explanation" | "difficulty" | "yearAppeared" | "isPreviousYear" | "isAIGenerated" | "aiPrompt" | "subjectId" | "topicId" | "subtopicId" | "createdAt" | "updatedAt", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | Question$subjectArgs<ExtArgs>
    topic?: boolean | Question$topicArgs<ExtArgs>
    subtopic?: boolean | Question$subtopicArgs<ExtArgs>
    tags?: boolean | Question$tagsArgs<ExtArgs>
    options?: boolean | Question$optionsArgs<ExtArgs>
    answers?: boolean | Question$answersArgs<ExtArgs>
    reports?: boolean | Question$reportsArgs<ExtArgs>
    alternativeExplanations?: boolean | Question$alternativeExplanationsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | Question$subjectArgs<ExtArgs>
    topic?: boolean | Question$topicArgs<ExtArgs>
    subtopic?: boolean | Question$subtopicArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | Question$subjectArgs<ExtArgs>
    topic?: boolean | Question$topicArgs<ExtArgs>
    subtopic?: boolean | Question$subtopicArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs> | null
      topic: Prisma.$TopicPayload<ExtArgs> | null
      subtopic: Prisma.$SubtopicPayload<ExtArgs> | null
      tags: Prisma.$QuestionTagPayload<ExtArgs>[]
      options: Prisma.$QuestionOptionPayload<ExtArgs>[]
      answers: Prisma.$ExamAnswerPayload<ExtArgs>[]
      reports: Prisma.$QuestionReportPayload<ExtArgs>[]
      alternativeExplanations: Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stem: string
      explanation: string | null
      difficulty: $Enums.Difficulty
      yearAppeared: number | null
      isPreviousYear: boolean
      isAIGenerated: boolean
      aiPrompt: string | null
      subjectId: string | null
      topicId: string | null
      subtopicId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends Question$subjectArgs<ExtArgs> = {}>(args?: Subset<T, Question$subjectArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    topic<T extends Question$topicArgs<ExtArgs> = {}>(args?: Subset<T, Question$topicArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subtopic<T extends Question$subtopicArgs<ExtArgs> = {}>(args?: Subset<T, Question$subtopicArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tags<T extends Question$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Question$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    options<T extends Question$optionsArgs<ExtArgs> = {}>(args?: Subset<T, Question$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    answers<T extends Question$answersArgs<ExtArgs> = {}>(args?: Subset<T, Question$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends Question$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Question$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alternativeExplanations<T extends Question$alternativeExplanationsArgs<ExtArgs> = {}>(args?: Subset<T, Question$alternativeExplanationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly stem: FieldRef<"Question", 'String'>
    readonly explanation: FieldRef<"Question", 'String'>
    readonly difficulty: FieldRef<"Question", 'Difficulty'>
    readonly yearAppeared: FieldRef<"Question", 'Int'>
    readonly isPreviousYear: FieldRef<"Question", 'Boolean'>
    readonly isAIGenerated: FieldRef<"Question", 'Boolean'>
    readonly aiPrompt: FieldRef<"Question", 'String'>
    readonly subjectId: FieldRef<"Question", 'String'>
    readonly topicId: FieldRef<"Question", 'String'>
    readonly subtopicId: FieldRef<"Question", 'String'>
    readonly createdAt: FieldRef<"Question", 'DateTime'>
    readonly updatedAt: FieldRef<"Question", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.subject
   */
  export type Question$subjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
  }

  /**
   * Question.topic
   */
  export type Question$topicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Topic
     */
    omit?: TopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    where?: TopicWhereInput
  }

  /**
   * Question.subtopic
   */
  export type Question$subtopicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtopic
     */
    omit?: SubtopicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    where?: SubtopicWhereInput
  }

  /**
   * Question.tags
   */
  export type Question$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    where?: QuestionTagWhereInput
    orderBy?: QuestionTagOrderByWithRelationInput | QuestionTagOrderByWithRelationInput[]
    cursor?: QuestionTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionTagScalarFieldEnum | QuestionTagScalarFieldEnum[]
  }

  /**
   * Question.options
   */
  export type Question$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    where?: QuestionOptionWhereInput
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    cursor?: QuestionOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * Question.answers
   */
  export type Question$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    where?: ExamAnswerWhereInput
    orderBy?: ExamAnswerOrderByWithRelationInput | ExamAnswerOrderByWithRelationInput[]
    cursor?: ExamAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamAnswerScalarFieldEnum | ExamAnswerScalarFieldEnum[]
  }

  /**
   * Question.reports
   */
  export type Question$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    where?: QuestionReportWhereInput
    orderBy?: QuestionReportOrderByWithRelationInput | QuestionReportOrderByWithRelationInput[]
    cursor?: QuestionReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionReportScalarFieldEnum | QuestionReportScalarFieldEnum[]
  }

  /**
   * Question.alternativeExplanations
   */
  export type Question$alternativeExplanationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    where?: QuestionAlternativeExplanationWhereInput
    orderBy?: QuestionAlternativeExplanationOrderByWithRelationInput | QuestionAlternativeExplanationOrderByWithRelationInput[]
    cursor?: QuestionAlternativeExplanationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionAlternativeExplanationScalarFieldEnum | QuestionAlternativeExplanationScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model QuestionOption
   */

  export type AggregateQuestionOption = {
    _count: QuestionOptionCountAggregateOutputType | null
    _avg: QuestionOptionAvgAggregateOutputType | null
    _sum: QuestionOptionSumAggregateOutputType | null
    _min: QuestionOptionMinAggregateOutputType | null
    _max: QuestionOptionMaxAggregateOutputType | null
  }

  export type QuestionOptionAvgAggregateOutputType = {
    order: number | null
  }

  export type QuestionOptionSumAggregateOutputType = {
    order: number | null
  }

  export type QuestionOptionMinAggregateOutputType = {
    id: string | null
    questionId: string | null
    text: string | null
    isCorrect: boolean | null
    order: number | null
  }

  export type QuestionOptionMaxAggregateOutputType = {
    id: string | null
    questionId: string | null
    text: string | null
    isCorrect: boolean | null
    order: number | null
  }

  export type QuestionOptionCountAggregateOutputType = {
    id: number
    questionId: number
    text: number
    isCorrect: number
    order: number
    _all: number
  }


  export type QuestionOptionAvgAggregateInputType = {
    order?: true
  }

  export type QuestionOptionSumAggregateInputType = {
    order?: true
  }

  export type QuestionOptionMinAggregateInputType = {
    id?: true
    questionId?: true
    text?: true
    isCorrect?: true
    order?: true
  }

  export type QuestionOptionMaxAggregateInputType = {
    id?: true
    questionId?: true
    text?: true
    isCorrect?: true
    order?: true
  }

  export type QuestionOptionCountAggregateInputType = {
    id?: true
    questionId?: true
    text?: true
    isCorrect?: true
    order?: true
    _all?: true
  }

  export type QuestionOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionOption to aggregate.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionOptions
    **/
    _count?: true | QuestionOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionOptionMaxAggregateInputType
  }

  export type GetQuestionOptionAggregateType<T extends QuestionOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionOption[P]>
      : GetScalarType<T[P], AggregateQuestionOption[P]>
  }




  export type QuestionOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionOptionWhereInput
    orderBy?: QuestionOptionOrderByWithAggregationInput | QuestionOptionOrderByWithAggregationInput[]
    by: QuestionOptionScalarFieldEnum[] | QuestionOptionScalarFieldEnum
    having?: QuestionOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionOptionCountAggregateInputType | true
    _avg?: QuestionOptionAvgAggregateInputType
    _sum?: QuestionOptionSumAggregateInputType
    _min?: QuestionOptionMinAggregateInputType
    _max?: QuestionOptionMaxAggregateInputType
  }

  export type QuestionOptionGroupByOutputType = {
    id: string
    questionId: string
    text: string
    isCorrect: boolean
    order: number
    _count: QuestionOptionCountAggregateOutputType | null
    _avg: QuestionOptionAvgAggregateOutputType | null
    _sum: QuestionOptionSumAggregateOutputType | null
    _min: QuestionOptionMinAggregateOutputType | null
    _max: QuestionOptionMaxAggregateOutputType | null
  }

  type GetQuestionOptionGroupByPayload<T extends QuestionOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionOptionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionOptionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    text?: boolean
    isCorrect?: boolean
    order?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedByAnswers?: boolean | QuestionOption$selectedByAnswersArgs<ExtArgs>
    _count?: boolean | QuestionOptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOption"]>

  export type QuestionOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    text?: boolean
    isCorrect?: boolean
    order?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOption"]>

  export type QuestionOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    text?: boolean
    isCorrect?: boolean
    order?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOption"]>

  export type QuestionOptionSelectScalar = {
    id?: boolean
    questionId?: boolean
    text?: boolean
    isCorrect?: boolean
    order?: boolean
  }

  export type QuestionOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionId" | "text" | "isCorrect" | "order", ExtArgs["result"]["questionOption"]>
  export type QuestionOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedByAnswers?: boolean | QuestionOption$selectedByAnswersArgs<ExtArgs>
    _count?: boolean | QuestionOptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type QuestionOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $QuestionOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionOption"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      selectedByAnswers: Prisma.$ExamAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      questionId: string
      text: string
      isCorrect: boolean
      order: number
    }, ExtArgs["result"]["questionOption"]>
    composites: {}
  }

  type QuestionOptionGetPayload<S extends boolean | null | undefined | QuestionOptionDefaultArgs> = $Result.GetResult<Prisma.$QuestionOptionPayload, S>

  type QuestionOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionOptionCountAggregateInputType | true
    }

  export interface QuestionOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionOption'], meta: { name: 'QuestionOption' } }
    /**
     * Find zero or one QuestionOption that matches the filter.
     * @param {QuestionOptionFindUniqueArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionOptionFindUniqueArgs>(args: SelectSubset<T, QuestionOptionFindUniqueArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionOptionFindUniqueOrThrowArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionFindFirstArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionOptionFindFirstArgs>(args?: SelectSubset<T, QuestionOptionFindFirstArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionFindFirstOrThrowArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionOptions
     * const questionOptions = await prisma.questionOption.findMany()
     * 
     * // Get first 10 QuestionOptions
     * const questionOptions = await prisma.questionOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionOptionWithIdOnly = await prisma.questionOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionOptionFindManyArgs>(args?: SelectSubset<T, QuestionOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionOption.
     * @param {QuestionOptionCreateArgs} args - Arguments to create a QuestionOption.
     * @example
     * // Create one QuestionOption
     * const QuestionOption = await prisma.questionOption.create({
     *   data: {
     *     // ... data to create a QuestionOption
     *   }
     * })
     * 
     */
    create<T extends QuestionOptionCreateArgs>(args: SelectSubset<T, QuestionOptionCreateArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionOptions.
     * @param {QuestionOptionCreateManyArgs} args - Arguments to create many QuestionOptions.
     * @example
     * // Create many QuestionOptions
     * const questionOption = await prisma.questionOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionOptionCreateManyArgs>(args?: SelectSubset<T, QuestionOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionOptions and returns the data saved in the database.
     * @param {QuestionOptionCreateManyAndReturnArgs} args - Arguments to create many QuestionOptions.
     * @example
     * // Create many QuestionOptions
     * const questionOption = await prisma.questionOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionOptions and only return the `id`
     * const questionOptionWithIdOnly = await prisma.questionOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionOption.
     * @param {QuestionOptionDeleteArgs} args - Arguments to delete one QuestionOption.
     * @example
     * // Delete one QuestionOption
     * const QuestionOption = await prisma.questionOption.delete({
     *   where: {
     *     // ... filter to delete one QuestionOption
     *   }
     * })
     * 
     */
    delete<T extends QuestionOptionDeleteArgs>(args: SelectSubset<T, QuestionOptionDeleteArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionOption.
     * @param {QuestionOptionUpdateArgs} args - Arguments to update one QuestionOption.
     * @example
     * // Update one QuestionOption
     * const questionOption = await prisma.questionOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionOptionUpdateArgs>(args: SelectSubset<T, QuestionOptionUpdateArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionOptions.
     * @param {QuestionOptionDeleteManyArgs} args - Arguments to filter QuestionOptions to delete.
     * @example
     * // Delete a few QuestionOptions
     * const { count } = await prisma.questionOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionOptionDeleteManyArgs>(args?: SelectSubset<T, QuestionOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionOptions
     * const questionOption = await prisma.questionOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionOptionUpdateManyArgs>(args: SelectSubset<T, QuestionOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionOptions and returns the data updated in the database.
     * @param {QuestionOptionUpdateManyAndReturnArgs} args - Arguments to update many QuestionOptions.
     * @example
     * // Update many QuestionOptions
     * const questionOption = await prisma.questionOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionOptions and only return the `id`
     * const questionOptionWithIdOnly = await prisma.questionOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionOption.
     * @param {QuestionOptionUpsertArgs} args - Arguments to update or create a QuestionOption.
     * @example
     * // Update or create a QuestionOption
     * const questionOption = await prisma.questionOption.upsert({
     *   create: {
     *     // ... data to create a QuestionOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionOption we want to update
     *   }
     * })
     */
    upsert<T extends QuestionOptionUpsertArgs>(args: SelectSubset<T, QuestionOptionUpsertArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionCountArgs} args - Arguments to filter QuestionOptions to count.
     * @example
     * // Count the number of QuestionOptions
     * const count = await prisma.questionOption.count({
     *   where: {
     *     // ... the filter for the QuestionOptions we want to count
     *   }
     * })
    **/
    count<T extends QuestionOptionCountArgs>(
      args?: Subset<T, QuestionOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionOptionAggregateArgs>(args: Subset<T, QuestionOptionAggregateArgs>): Prisma.PrismaPromise<GetQuestionOptionAggregateType<T>>

    /**
     * Group by QuestionOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionOptionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionOption model
   */
  readonly fields: QuestionOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    selectedByAnswers<T extends QuestionOption$selectedByAnswersArgs<ExtArgs> = {}>(args?: Subset<T, QuestionOption$selectedByAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionOption model
   */
  interface QuestionOptionFieldRefs {
    readonly id: FieldRef<"QuestionOption", 'String'>
    readonly questionId: FieldRef<"QuestionOption", 'String'>
    readonly text: FieldRef<"QuestionOption", 'String'>
    readonly isCorrect: FieldRef<"QuestionOption", 'Boolean'>
    readonly order: FieldRef<"QuestionOption", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * QuestionOption findUnique
   */
  export type QuestionOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption findUniqueOrThrow
   */
  export type QuestionOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption findFirst
   */
  export type QuestionOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionOptions.
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionOptions.
     */
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * QuestionOption findFirstOrThrow
   */
  export type QuestionOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionOptions.
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionOptions.
     */
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * QuestionOption findMany
   */
  export type QuestionOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOptions to fetch.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionOptions.
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * QuestionOption create
   */
  export type QuestionOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionOption.
     */
    data: XOR<QuestionOptionCreateInput, QuestionOptionUncheckedCreateInput>
  }

  /**
   * QuestionOption createMany
   */
  export type QuestionOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionOptions.
     */
    data: QuestionOptionCreateManyInput | QuestionOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionOption createManyAndReturn
   */
  export type QuestionOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionOptions.
     */
    data: QuestionOptionCreateManyInput | QuestionOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionOption update
   */
  export type QuestionOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionOption.
     */
    data: XOR<QuestionOptionUpdateInput, QuestionOptionUncheckedUpdateInput>
    /**
     * Choose, which QuestionOption to update.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption updateMany
   */
  export type QuestionOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionOptions.
     */
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyInput>
    /**
     * Filter which QuestionOptions to update
     */
    where?: QuestionOptionWhereInput
    /**
     * Limit how many QuestionOptions to update.
     */
    limit?: number
  }

  /**
   * QuestionOption updateManyAndReturn
   */
  export type QuestionOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * The data used to update QuestionOptions.
     */
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyInput>
    /**
     * Filter which QuestionOptions to update
     */
    where?: QuestionOptionWhereInput
    /**
     * Limit how many QuestionOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionOption upsert
   */
  export type QuestionOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionOption to update in case it exists.
     */
    where: QuestionOptionWhereUniqueInput
    /**
     * In case the QuestionOption found by the `where` argument doesn't exist, create a new QuestionOption with this data.
     */
    create: XOR<QuestionOptionCreateInput, QuestionOptionUncheckedCreateInput>
    /**
     * In case the QuestionOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionOptionUpdateInput, QuestionOptionUncheckedUpdateInput>
  }

  /**
   * QuestionOption delete
   */
  export type QuestionOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter which QuestionOption to delete.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption deleteMany
   */
  export type QuestionOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionOptions to delete
     */
    where?: QuestionOptionWhereInput
    /**
     * Limit how many QuestionOptions to delete.
     */
    limit?: number
  }

  /**
   * QuestionOption.selectedByAnswers
   */
  export type QuestionOption$selectedByAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    where?: ExamAnswerWhereInput
    orderBy?: ExamAnswerOrderByWithRelationInput | ExamAnswerOrderByWithRelationInput[]
    cursor?: ExamAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamAnswerScalarFieldEnum | ExamAnswerScalarFieldEnum[]
  }

  /**
   * QuestionOption without action
   */
  export type QuestionOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    questions?: boolean | Tag$questionsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | Tag$questionsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      questions: Prisma.$QuestionTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TagUpdateManyAndReturnArgs>(args: SelectSubset<T, TagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends Tag$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag updateManyAndReturn
   */
  export type TagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag.questions
   */
  export type Tag$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    where?: QuestionTagWhereInput
    orderBy?: QuestionTagOrderByWithRelationInput | QuestionTagOrderByWithRelationInput[]
    cursor?: QuestionTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionTagScalarFieldEnum | QuestionTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model QuestionTag
   */

  export type AggregateQuestionTag = {
    _count: QuestionTagCountAggregateOutputType | null
    _min: QuestionTagMinAggregateOutputType | null
    _max: QuestionTagMaxAggregateOutputType | null
  }

  export type QuestionTagMinAggregateOutputType = {
    questionId: string | null
    tagId: string | null
  }

  export type QuestionTagMaxAggregateOutputType = {
    questionId: string | null
    tagId: string | null
  }

  export type QuestionTagCountAggregateOutputType = {
    questionId: number
    tagId: number
    _all: number
  }


  export type QuestionTagMinAggregateInputType = {
    questionId?: true
    tagId?: true
  }

  export type QuestionTagMaxAggregateInputType = {
    questionId?: true
    tagId?: true
  }

  export type QuestionTagCountAggregateInputType = {
    questionId?: true
    tagId?: true
    _all?: true
  }

  export type QuestionTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionTag to aggregate.
     */
    where?: QuestionTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionTags to fetch.
     */
    orderBy?: QuestionTagOrderByWithRelationInput | QuestionTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionTags
    **/
    _count?: true | QuestionTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionTagMaxAggregateInputType
  }

  export type GetQuestionTagAggregateType<T extends QuestionTagAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionTag[P]>
      : GetScalarType<T[P], AggregateQuestionTag[P]>
  }




  export type QuestionTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionTagWhereInput
    orderBy?: QuestionTagOrderByWithAggregationInput | QuestionTagOrderByWithAggregationInput[]
    by: QuestionTagScalarFieldEnum[] | QuestionTagScalarFieldEnum
    having?: QuestionTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionTagCountAggregateInputType | true
    _min?: QuestionTagMinAggregateInputType
    _max?: QuestionTagMaxAggregateInputType
  }

  export type QuestionTagGroupByOutputType = {
    questionId: string
    tagId: string
    _count: QuestionTagCountAggregateOutputType | null
    _min: QuestionTagMinAggregateOutputType | null
    _max: QuestionTagMaxAggregateOutputType | null
  }

  type GetQuestionTagGroupByPayload<T extends QuestionTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionTagGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionTagGroupByOutputType[P]>
        }
      >
    >


  export type QuestionTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    tagId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionTag"]>

  export type QuestionTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    tagId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionTag"]>

  export type QuestionTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    tagId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionTag"]>

  export type QuestionTagSelectScalar = {
    questionId?: boolean
    tagId?: boolean
  }

  export type QuestionTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"questionId" | "tagId", ExtArgs["result"]["questionTag"]>
  export type QuestionTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type QuestionTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type QuestionTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $QuestionTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionTag"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      questionId: string
      tagId: string
    }, ExtArgs["result"]["questionTag"]>
    composites: {}
  }

  type QuestionTagGetPayload<S extends boolean | null | undefined | QuestionTagDefaultArgs> = $Result.GetResult<Prisma.$QuestionTagPayload, S>

  type QuestionTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionTagCountAggregateInputType | true
    }

  export interface QuestionTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionTag'], meta: { name: 'QuestionTag' } }
    /**
     * Find zero or one QuestionTag that matches the filter.
     * @param {QuestionTagFindUniqueArgs} args - Arguments to find a QuestionTag
     * @example
     * // Get one QuestionTag
     * const questionTag = await prisma.questionTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionTagFindUniqueArgs>(args: SelectSubset<T, QuestionTagFindUniqueArgs<ExtArgs>>): Prisma__QuestionTagClient<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionTagFindUniqueOrThrowArgs} args - Arguments to find a QuestionTag
     * @example
     * // Get one QuestionTag
     * const questionTag = await prisma.questionTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionTagFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionTagClient<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTagFindFirstArgs} args - Arguments to find a QuestionTag
     * @example
     * // Get one QuestionTag
     * const questionTag = await prisma.questionTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionTagFindFirstArgs>(args?: SelectSubset<T, QuestionTagFindFirstArgs<ExtArgs>>): Prisma__QuestionTagClient<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTagFindFirstOrThrowArgs} args - Arguments to find a QuestionTag
     * @example
     * // Get one QuestionTag
     * const questionTag = await prisma.questionTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionTagFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionTagClient<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionTags
     * const questionTags = await prisma.questionTag.findMany()
     * 
     * // Get first 10 QuestionTags
     * const questionTags = await prisma.questionTag.findMany({ take: 10 })
     * 
     * // Only select the `questionId`
     * const questionTagWithQuestionIdOnly = await prisma.questionTag.findMany({ select: { questionId: true } })
     * 
     */
    findMany<T extends QuestionTagFindManyArgs>(args?: SelectSubset<T, QuestionTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionTag.
     * @param {QuestionTagCreateArgs} args - Arguments to create a QuestionTag.
     * @example
     * // Create one QuestionTag
     * const QuestionTag = await prisma.questionTag.create({
     *   data: {
     *     // ... data to create a QuestionTag
     *   }
     * })
     * 
     */
    create<T extends QuestionTagCreateArgs>(args: SelectSubset<T, QuestionTagCreateArgs<ExtArgs>>): Prisma__QuestionTagClient<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionTags.
     * @param {QuestionTagCreateManyArgs} args - Arguments to create many QuestionTags.
     * @example
     * // Create many QuestionTags
     * const questionTag = await prisma.questionTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionTagCreateManyArgs>(args?: SelectSubset<T, QuestionTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionTags and returns the data saved in the database.
     * @param {QuestionTagCreateManyAndReturnArgs} args - Arguments to create many QuestionTags.
     * @example
     * // Create many QuestionTags
     * const questionTag = await prisma.questionTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionTags and only return the `questionId`
     * const questionTagWithQuestionIdOnly = await prisma.questionTag.createManyAndReturn({
     *   select: { questionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionTagCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionTag.
     * @param {QuestionTagDeleteArgs} args - Arguments to delete one QuestionTag.
     * @example
     * // Delete one QuestionTag
     * const QuestionTag = await prisma.questionTag.delete({
     *   where: {
     *     // ... filter to delete one QuestionTag
     *   }
     * })
     * 
     */
    delete<T extends QuestionTagDeleteArgs>(args: SelectSubset<T, QuestionTagDeleteArgs<ExtArgs>>): Prisma__QuestionTagClient<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionTag.
     * @param {QuestionTagUpdateArgs} args - Arguments to update one QuestionTag.
     * @example
     * // Update one QuestionTag
     * const questionTag = await prisma.questionTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionTagUpdateArgs>(args: SelectSubset<T, QuestionTagUpdateArgs<ExtArgs>>): Prisma__QuestionTagClient<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionTags.
     * @param {QuestionTagDeleteManyArgs} args - Arguments to filter QuestionTags to delete.
     * @example
     * // Delete a few QuestionTags
     * const { count } = await prisma.questionTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionTagDeleteManyArgs>(args?: SelectSubset<T, QuestionTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionTags
     * const questionTag = await prisma.questionTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionTagUpdateManyArgs>(args: SelectSubset<T, QuestionTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionTags and returns the data updated in the database.
     * @param {QuestionTagUpdateManyAndReturnArgs} args - Arguments to update many QuestionTags.
     * @example
     * // Update many QuestionTags
     * const questionTag = await prisma.questionTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionTags and only return the `questionId`
     * const questionTagWithQuestionIdOnly = await prisma.questionTag.updateManyAndReturn({
     *   select: { questionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionTagUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionTag.
     * @param {QuestionTagUpsertArgs} args - Arguments to update or create a QuestionTag.
     * @example
     * // Update or create a QuestionTag
     * const questionTag = await prisma.questionTag.upsert({
     *   create: {
     *     // ... data to create a QuestionTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionTag we want to update
     *   }
     * })
     */
    upsert<T extends QuestionTagUpsertArgs>(args: SelectSubset<T, QuestionTagUpsertArgs<ExtArgs>>): Prisma__QuestionTagClient<$Result.GetResult<Prisma.$QuestionTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTagCountArgs} args - Arguments to filter QuestionTags to count.
     * @example
     * // Count the number of QuestionTags
     * const count = await prisma.questionTag.count({
     *   where: {
     *     // ... the filter for the QuestionTags we want to count
     *   }
     * })
    **/
    count<T extends QuestionTagCountArgs>(
      args?: Subset<T, QuestionTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionTagAggregateArgs>(args: Subset<T, QuestionTagAggregateArgs>): Prisma.PrismaPromise<GetQuestionTagAggregateType<T>>

    /**
     * Group by QuestionTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionTagGroupByArgs['orderBy'] }
        : { orderBy?: QuestionTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionTag model
   */
  readonly fields: QuestionTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionTag model
   */
  interface QuestionTagFieldRefs {
    readonly questionId: FieldRef<"QuestionTag", 'String'>
    readonly tagId: FieldRef<"QuestionTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * QuestionTag findUnique
   */
  export type QuestionTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    /**
     * Filter, which QuestionTag to fetch.
     */
    where: QuestionTagWhereUniqueInput
  }

  /**
   * QuestionTag findUniqueOrThrow
   */
  export type QuestionTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    /**
     * Filter, which QuestionTag to fetch.
     */
    where: QuestionTagWhereUniqueInput
  }

  /**
   * QuestionTag findFirst
   */
  export type QuestionTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    /**
     * Filter, which QuestionTag to fetch.
     */
    where?: QuestionTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionTags to fetch.
     */
    orderBy?: QuestionTagOrderByWithRelationInput | QuestionTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionTags.
     */
    cursor?: QuestionTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionTags.
     */
    distinct?: QuestionTagScalarFieldEnum | QuestionTagScalarFieldEnum[]
  }

  /**
   * QuestionTag findFirstOrThrow
   */
  export type QuestionTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    /**
     * Filter, which QuestionTag to fetch.
     */
    where?: QuestionTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionTags to fetch.
     */
    orderBy?: QuestionTagOrderByWithRelationInput | QuestionTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionTags.
     */
    cursor?: QuestionTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionTags.
     */
    distinct?: QuestionTagScalarFieldEnum | QuestionTagScalarFieldEnum[]
  }

  /**
   * QuestionTag findMany
   */
  export type QuestionTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    /**
     * Filter, which QuestionTags to fetch.
     */
    where?: QuestionTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionTags to fetch.
     */
    orderBy?: QuestionTagOrderByWithRelationInput | QuestionTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionTags.
     */
    cursor?: QuestionTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionTags.
     */
    skip?: number
    distinct?: QuestionTagScalarFieldEnum | QuestionTagScalarFieldEnum[]
  }

  /**
   * QuestionTag create
   */
  export type QuestionTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionTag.
     */
    data: XOR<QuestionTagCreateInput, QuestionTagUncheckedCreateInput>
  }

  /**
   * QuestionTag createMany
   */
  export type QuestionTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionTags.
     */
    data: QuestionTagCreateManyInput | QuestionTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionTag createManyAndReturn
   */
  export type QuestionTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionTags.
     */
    data: QuestionTagCreateManyInput | QuestionTagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionTag update
   */
  export type QuestionTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionTag.
     */
    data: XOR<QuestionTagUpdateInput, QuestionTagUncheckedUpdateInput>
    /**
     * Choose, which QuestionTag to update.
     */
    where: QuestionTagWhereUniqueInput
  }

  /**
   * QuestionTag updateMany
   */
  export type QuestionTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionTags.
     */
    data: XOR<QuestionTagUpdateManyMutationInput, QuestionTagUncheckedUpdateManyInput>
    /**
     * Filter which QuestionTags to update
     */
    where?: QuestionTagWhereInput
    /**
     * Limit how many QuestionTags to update.
     */
    limit?: number
  }

  /**
   * QuestionTag updateManyAndReturn
   */
  export type QuestionTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * The data used to update QuestionTags.
     */
    data: XOR<QuestionTagUpdateManyMutationInput, QuestionTagUncheckedUpdateManyInput>
    /**
     * Filter which QuestionTags to update
     */
    where?: QuestionTagWhereInput
    /**
     * Limit how many QuestionTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionTag upsert
   */
  export type QuestionTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionTag to update in case it exists.
     */
    where: QuestionTagWhereUniqueInput
    /**
     * In case the QuestionTag found by the `where` argument doesn't exist, create a new QuestionTag with this data.
     */
    create: XOR<QuestionTagCreateInput, QuestionTagUncheckedCreateInput>
    /**
     * In case the QuestionTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionTagUpdateInput, QuestionTagUncheckedUpdateInput>
  }

  /**
   * QuestionTag delete
   */
  export type QuestionTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
    /**
     * Filter which QuestionTag to delete.
     */
    where: QuestionTagWhereUniqueInput
  }

  /**
   * QuestionTag deleteMany
   */
  export type QuestionTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionTags to delete
     */
    where?: QuestionTagWhereInput
    /**
     * Limit how many QuestionTags to delete.
     */
    limit?: number
  }

  /**
   * QuestionTag without action
   */
  export type QuestionTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTag
     */
    select?: QuestionTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionTag
     */
    omit?: QuestionTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTagInclude<ExtArgs> | null
  }


  /**
   * Model QuestionReport
   */

  export type AggregateQuestionReport = {
    _count: QuestionReportCountAggregateOutputType | null
    _min: QuestionReportMinAggregateOutputType | null
    _max: QuestionReportMaxAggregateOutputType | null
  }

  export type QuestionReportMinAggregateOutputType = {
    id: string | null
    questionId: string | null
    userId: string | null
    reportType: $Enums.QuestionReportType | null
    reason: string | null
    description: string | null
    status: $Enums.ReportStatus | null
    alternativeExplanation: string | null
    suggestedAnswer: string | null
    reviewedById: string | null
    reviewedAt: Date | null
    reviewNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionReportMaxAggregateOutputType = {
    id: string | null
    questionId: string | null
    userId: string | null
    reportType: $Enums.QuestionReportType | null
    reason: string | null
    description: string | null
    status: $Enums.ReportStatus | null
    alternativeExplanation: string | null
    suggestedAnswer: string | null
    reviewedById: string | null
    reviewedAt: Date | null
    reviewNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionReportCountAggregateOutputType = {
    id: number
    questionId: number
    userId: number
    reportType: number
    reason: number
    description: number
    status: number
    alternativeExplanation: number
    suggestedAnswer: number
    reviewedById: number
    reviewedAt: number
    reviewNotes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionReportMinAggregateInputType = {
    id?: true
    questionId?: true
    userId?: true
    reportType?: true
    reason?: true
    description?: true
    status?: true
    alternativeExplanation?: true
    suggestedAnswer?: true
    reviewedById?: true
    reviewedAt?: true
    reviewNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionReportMaxAggregateInputType = {
    id?: true
    questionId?: true
    userId?: true
    reportType?: true
    reason?: true
    description?: true
    status?: true
    alternativeExplanation?: true
    suggestedAnswer?: true
    reviewedById?: true
    reviewedAt?: true
    reviewNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionReportCountAggregateInputType = {
    id?: true
    questionId?: true
    userId?: true
    reportType?: true
    reason?: true
    description?: true
    status?: true
    alternativeExplanation?: true
    suggestedAnswer?: true
    reviewedById?: true
    reviewedAt?: true
    reviewNotes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionReport to aggregate.
     */
    where?: QuestionReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionReports to fetch.
     */
    orderBy?: QuestionReportOrderByWithRelationInput | QuestionReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionReports
    **/
    _count?: true | QuestionReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionReportMaxAggregateInputType
  }

  export type GetQuestionReportAggregateType<T extends QuestionReportAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionReport[P]>
      : GetScalarType<T[P], AggregateQuestionReport[P]>
  }




  export type QuestionReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionReportWhereInput
    orderBy?: QuestionReportOrderByWithAggregationInput | QuestionReportOrderByWithAggregationInput[]
    by: QuestionReportScalarFieldEnum[] | QuestionReportScalarFieldEnum
    having?: QuestionReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionReportCountAggregateInputType | true
    _min?: QuestionReportMinAggregateInputType
    _max?: QuestionReportMaxAggregateInputType
  }

  export type QuestionReportGroupByOutputType = {
    id: string
    questionId: string
    userId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description: string | null
    status: $Enums.ReportStatus
    alternativeExplanation: string | null
    suggestedAnswer: string | null
    reviewedById: string | null
    reviewedAt: Date | null
    reviewNotes: string | null
    createdAt: Date
    updatedAt: Date
    _count: QuestionReportCountAggregateOutputType | null
    _min: QuestionReportMinAggregateOutputType | null
    _max: QuestionReportMaxAggregateOutputType | null
  }

  type GetQuestionReportGroupByPayload<T extends QuestionReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionReportGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionReportGroupByOutputType[P]>
        }
      >
    >


  export type QuestionReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    userId?: boolean
    reportType?: boolean
    reason?: boolean
    description?: boolean
    status?: boolean
    alternativeExplanation?: boolean
    suggestedAnswer?: boolean
    reviewedById?: boolean
    reviewedAt?: boolean
    reviewNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    suggestedOptions?: boolean | QuestionReport$suggestedOptionsArgs<ExtArgs>
    reviewedBy?: boolean | QuestionReport$reviewedByArgs<ExtArgs>
    _count?: boolean | QuestionReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionReport"]>

  export type QuestionReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    userId?: boolean
    reportType?: boolean
    reason?: boolean
    description?: boolean
    status?: boolean
    alternativeExplanation?: boolean
    suggestedAnswer?: boolean
    reviewedById?: boolean
    reviewedAt?: boolean
    reviewNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviewedBy?: boolean | QuestionReport$reviewedByArgs<ExtArgs>
  }, ExtArgs["result"]["questionReport"]>

  export type QuestionReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    userId?: boolean
    reportType?: boolean
    reason?: boolean
    description?: boolean
    status?: boolean
    alternativeExplanation?: boolean
    suggestedAnswer?: boolean
    reviewedById?: boolean
    reviewedAt?: boolean
    reviewNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviewedBy?: boolean | QuestionReport$reviewedByArgs<ExtArgs>
  }, ExtArgs["result"]["questionReport"]>

  export type QuestionReportSelectScalar = {
    id?: boolean
    questionId?: boolean
    userId?: boolean
    reportType?: boolean
    reason?: boolean
    description?: boolean
    status?: boolean
    alternativeExplanation?: boolean
    suggestedAnswer?: boolean
    reviewedById?: boolean
    reviewedAt?: boolean
    reviewNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionId" | "userId" | "reportType" | "reason" | "description" | "status" | "alternativeExplanation" | "suggestedAnswer" | "reviewedById" | "reviewedAt" | "reviewNotes" | "createdAt" | "updatedAt", ExtArgs["result"]["questionReport"]>
  export type QuestionReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    suggestedOptions?: boolean | QuestionReport$suggestedOptionsArgs<ExtArgs>
    reviewedBy?: boolean | QuestionReport$reviewedByArgs<ExtArgs>
    _count?: boolean | QuestionReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviewedBy?: boolean | QuestionReport$reviewedByArgs<ExtArgs>
  }
  export type QuestionReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    reviewedBy?: boolean | QuestionReport$reviewedByArgs<ExtArgs>
  }

  export type $QuestionReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionReport"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      suggestedOptions: Prisma.$QuestionReportOptionPayload<ExtArgs>[]
      reviewedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      questionId: string
      userId: string
      reportType: $Enums.QuestionReportType
      reason: string
      description: string | null
      status: $Enums.ReportStatus
      alternativeExplanation: string | null
      suggestedAnswer: string | null
      reviewedById: string | null
      reviewedAt: Date | null
      reviewNotes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["questionReport"]>
    composites: {}
  }

  type QuestionReportGetPayload<S extends boolean | null | undefined | QuestionReportDefaultArgs> = $Result.GetResult<Prisma.$QuestionReportPayload, S>

  type QuestionReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionReportCountAggregateInputType | true
    }

  export interface QuestionReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionReport'], meta: { name: 'QuestionReport' } }
    /**
     * Find zero or one QuestionReport that matches the filter.
     * @param {QuestionReportFindUniqueArgs} args - Arguments to find a QuestionReport
     * @example
     * // Get one QuestionReport
     * const questionReport = await prisma.questionReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionReportFindUniqueArgs>(args: SelectSubset<T, QuestionReportFindUniqueArgs<ExtArgs>>): Prisma__QuestionReportClient<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionReportFindUniqueOrThrowArgs} args - Arguments to find a QuestionReport
     * @example
     * // Get one QuestionReport
     * const questionReport = await prisma.questionReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionReportFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionReportClient<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportFindFirstArgs} args - Arguments to find a QuestionReport
     * @example
     * // Get one QuestionReport
     * const questionReport = await prisma.questionReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionReportFindFirstArgs>(args?: SelectSubset<T, QuestionReportFindFirstArgs<ExtArgs>>): Prisma__QuestionReportClient<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportFindFirstOrThrowArgs} args - Arguments to find a QuestionReport
     * @example
     * // Get one QuestionReport
     * const questionReport = await prisma.questionReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionReportFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionReportClient<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionReports
     * const questionReports = await prisma.questionReport.findMany()
     * 
     * // Get first 10 QuestionReports
     * const questionReports = await prisma.questionReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionReportWithIdOnly = await prisma.questionReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionReportFindManyArgs>(args?: SelectSubset<T, QuestionReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionReport.
     * @param {QuestionReportCreateArgs} args - Arguments to create a QuestionReport.
     * @example
     * // Create one QuestionReport
     * const QuestionReport = await prisma.questionReport.create({
     *   data: {
     *     // ... data to create a QuestionReport
     *   }
     * })
     * 
     */
    create<T extends QuestionReportCreateArgs>(args: SelectSubset<T, QuestionReportCreateArgs<ExtArgs>>): Prisma__QuestionReportClient<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionReports.
     * @param {QuestionReportCreateManyArgs} args - Arguments to create many QuestionReports.
     * @example
     * // Create many QuestionReports
     * const questionReport = await prisma.questionReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionReportCreateManyArgs>(args?: SelectSubset<T, QuestionReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionReports and returns the data saved in the database.
     * @param {QuestionReportCreateManyAndReturnArgs} args - Arguments to create many QuestionReports.
     * @example
     * // Create many QuestionReports
     * const questionReport = await prisma.questionReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionReports and only return the `id`
     * const questionReportWithIdOnly = await prisma.questionReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionReportCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionReport.
     * @param {QuestionReportDeleteArgs} args - Arguments to delete one QuestionReport.
     * @example
     * // Delete one QuestionReport
     * const QuestionReport = await prisma.questionReport.delete({
     *   where: {
     *     // ... filter to delete one QuestionReport
     *   }
     * })
     * 
     */
    delete<T extends QuestionReportDeleteArgs>(args: SelectSubset<T, QuestionReportDeleteArgs<ExtArgs>>): Prisma__QuestionReportClient<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionReport.
     * @param {QuestionReportUpdateArgs} args - Arguments to update one QuestionReport.
     * @example
     * // Update one QuestionReport
     * const questionReport = await prisma.questionReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionReportUpdateArgs>(args: SelectSubset<T, QuestionReportUpdateArgs<ExtArgs>>): Prisma__QuestionReportClient<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionReports.
     * @param {QuestionReportDeleteManyArgs} args - Arguments to filter QuestionReports to delete.
     * @example
     * // Delete a few QuestionReports
     * const { count } = await prisma.questionReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionReportDeleteManyArgs>(args?: SelectSubset<T, QuestionReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionReports
     * const questionReport = await prisma.questionReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionReportUpdateManyArgs>(args: SelectSubset<T, QuestionReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionReports and returns the data updated in the database.
     * @param {QuestionReportUpdateManyAndReturnArgs} args - Arguments to update many QuestionReports.
     * @example
     * // Update many QuestionReports
     * const questionReport = await prisma.questionReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionReports and only return the `id`
     * const questionReportWithIdOnly = await prisma.questionReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionReportUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionReport.
     * @param {QuestionReportUpsertArgs} args - Arguments to update or create a QuestionReport.
     * @example
     * // Update or create a QuestionReport
     * const questionReport = await prisma.questionReport.upsert({
     *   create: {
     *     // ... data to create a QuestionReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionReport we want to update
     *   }
     * })
     */
    upsert<T extends QuestionReportUpsertArgs>(args: SelectSubset<T, QuestionReportUpsertArgs<ExtArgs>>): Prisma__QuestionReportClient<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportCountArgs} args - Arguments to filter QuestionReports to count.
     * @example
     * // Count the number of QuestionReports
     * const count = await prisma.questionReport.count({
     *   where: {
     *     // ... the filter for the QuestionReports we want to count
     *   }
     * })
    **/
    count<T extends QuestionReportCountArgs>(
      args?: Subset<T, QuestionReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionReportAggregateArgs>(args: Subset<T, QuestionReportAggregateArgs>): Prisma.PrismaPromise<GetQuestionReportAggregateType<T>>

    /**
     * Group by QuestionReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionReportGroupByArgs['orderBy'] }
        : { orderBy?: QuestionReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionReport model
   */
  readonly fields: QuestionReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    suggestedOptions<T extends QuestionReport$suggestedOptionsArgs<ExtArgs> = {}>(args?: Subset<T, QuestionReport$suggestedOptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviewedBy<T extends QuestionReport$reviewedByArgs<ExtArgs> = {}>(args?: Subset<T, QuestionReport$reviewedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionReport model
   */
  interface QuestionReportFieldRefs {
    readonly id: FieldRef<"QuestionReport", 'String'>
    readonly questionId: FieldRef<"QuestionReport", 'String'>
    readonly userId: FieldRef<"QuestionReport", 'String'>
    readonly reportType: FieldRef<"QuestionReport", 'QuestionReportType'>
    readonly reason: FieldRef<"QuestionReport", 'String'>
    readonly description: FieldRef<"QuestionReport", 'String'>
    readonly status: FieldRef<"QuestionReport", 'ReportStatus'>
    readonly alternativeExplanation: FieldRef<"QuestionReport", 'String'>
    readonly suggestedAnswer: FieldRef<"QuestionReport", 'String'>
    readonly reviewedById: FieldRef<"QuestionReport", 'String'>
    readonly reviewedAt: FieldRef<"QuestionReport", 'DateTime'>
    readonly reviewNotes: FieldRef<"QuestionReport", 'String'>
    readonly createdAt: FieldRef<"QuestionReport", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionReport findUnique
   */
  export type QuestionReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReport to fetch.
     */
    where: QuestionReportWhereUniqueInput
  }

  /**
   * QuestionReport findUniqueOrThrow
   */
  export type QuestionReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReport to fetch.
     */
    where: QuestionReportWhereUniqueInput
  }

  /**
   * QuestionReport findFirst
   */
  export type QuestionReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReport to fetch.
     */
    where?: QuestionReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionReports to fetch.
     */
    orderBy?: QuestionReportOrderByWithRelationInput | QuestionReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionReports.
     */
    cursor?: QuestionReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionReports.
     */
    distinct?: QuestionReportScalarFieldEnum | QuestionReportScalarFieldEnum[]
  }

  /**
   * QuestionReport findFirstOrThrow
   */
  export type QuestionReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReport to fetch.
     */
    where?: QuestionReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionReports to fetch.
     */
    orderBy?: QuestionReportOrderByWithRelationInput | QuestionReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionReports.
     */
    cursor?: QuestionReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionReports.
     */
    distinct?: QuestionReportScalarFieldEnum | QuestionReportScalarFieldEnum[]
  }

  /**
   * QuestionReport findMany
   */
  export type QuestionReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReports to fetch.
     */
    where?: QuestionReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionReports to fetch.
     */
    orderBy?: QuestionReportOrderByWithRelationInput | QuestionReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionReports.
     */
    cursor?: QuestionReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionReports.
     */
    skip?: number
    distinct?: QuestionReportScalarFieldEnum | QuestionReportScalarFieldEnum[]
  }

  /**
   * QuestionReport create
   */
  export type QuestionReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionReport.
     */
    data: XOR<QuestionReportCreateInput, QuestionReportUncheckedCreateInput>
  }

  /**
   * QuestionReport createMany
   */
  export type QuestionReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionReports.
     */
    data: QuestionReportCreateManyInput | QuestionReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionReport createManyAndReturn
   */
  export type QuestionReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionReports.
     */
    data: QuestionReportCreateManyInput | QuestionReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionReport update
   */
  export type QuestionReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionReport.
     */
    data: XOR<QuestionReportUpdateInput, QuestionReportUncheckedUpdateInput>
    /**
     * Choose, which QuestionReport to update.
     */
    where: QuestionReportWhereUniqueInput
  }

  /**
   * QuestionReport updateMany
   */
  export type QuestionReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionReports.
     */
    data: XOR<QuestionReportUpdateManyMutationInput, QuestionReportUncheckedUpdateManyInput>
    /**
     * Filter which QuestionReports to update
     */
    where?: QuestionReportWhereInput
    /**
     * Limit how many QuestionReports to update.
     */
    limit?: number
  }

  /**
   * QuestionReport updateManyAndReturn
   */
  export type QuestionReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * The data used to update QuestionReports.
     */
    data: XOR<QuestionReportUpdateManyMutationInput, QuestionReportUncheckedUpdateManyInput>
    /**
     * Filter which QuestionReports to update
     */
    where?: QuestionReportWhereInput
    /**
     * Limit how many QuestionReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionReport upsert
   */
  export type QuestionReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionReport to update in case it exists.
     */
    where: QuestionReportWhereUniqueInput
    /**
     * In case the QuestionReport found by the `where` argument doesn't exist, create a new QuestionReport with this data.
     */
    create: XOR<QuestionReportCreateInput, QuestionReportUncheckedCreateInput>
    /**
     * In case the QuestionReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionReportUpdateInput, QuestionReportUncheckedUpdateInput>
  }

  /**
   * QuestionReport delete
   */
  export type QuestionReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
    /**
     * Filter which QuestionReport to delete.
     */
    where: QuestionReportWhereUniqueInput
  }

  /**
   * QuestionReport deleteMany
   */
  export type QuestionReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionReports to delete
     */
    where?: QuestionReportWhereInput
    /**
     * Limit how many QuestionReports to delete.
     */
    limit?: number
  }

  /**
   * QuestionReport.suggestedOptions
   */
  export type QuestionReport$suggestedOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    where?: QuestionReportOptionWhereInput
    orderBy?: QuestionReportOptionOrderByWithRelationInput | QuestionReportOptionOrderByWithRelationInput[]
    cursor?: QuestionReportOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionReportOptionScalarFieldEnum | QuestionReportOptionScalarFieldEnum[]
  }

  /**
   * QuestionReport.reviewedBy
   */
  export type QuestionReport$reviewedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * QuestionReport without action
   */
  export type QuestionReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReport
     */
    select?: QuestionReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReport
     */
    omit?: QuestionReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportInclude<ExtArgs> | null
  }


  /**
   * Model QuestionReportOption
   */

  export type AggregateQuestionReportOption = {
    _count: QuestionReportOptionCountAggregateOutputType | null
    _avg: QuestionReportOptionAvgAggregateOutputType | null
    _sum: QuestionReportOptionSumAggregateOutputType | null
    _min: QuestionReportOptionMinAggregateOutputType | null
    _max: QuestionReportOptionMaxAggregateOutputType | null
  }

  export type QuestionReportOptionAvgAggregateOutputType = {
    order: number | null
  }

  export type QuestionReportOptionSumAggregateOutputType = {
    order: number | null
  }

  export type QuestionReportOptionMinAggregateOutputType = {
    id: string | null
    reportId: string | null
    text: string | null
    isCorrect: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionReportOptionMaxAggregateOutputType = {
    id: string | null
    reportId: string | null
    text: string | null
    isCorrect: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionReportOptionCountAggregateOutputType = {
    id: number
    reportId: number
    text: number
    isCorrect: number
    order: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionReportOptionAvgAggregateInputType = {
    order?: true
  }

  export type QuestionReportOptionSumAggregateInputType = {
    order?: true
  }

  export type QuestionReportOptionMinAggregateInputType = {
    id?: true
    reportId?: true
    text?: true
    isCorrect?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionReportOptionMaxAggregateInputType = {
    id?: true
    reportId?: true
    text?: true
    isCorrect?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionReportOptionCountAggregateInputType = {
    id?: true
    reportId?: true
    text?: true
    isCorrect?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionReportOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionReportOption to aggregate.
     */
    where?: QuestionReportOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionReportOptions to fetch.
     */
    orderBy?: QuestionReportOptionOrderByWithRelationInput | QuestionReportOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionReportOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionReportOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionReportOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionReportOptions
    **/
    _count?: true | QuestionReportOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionReportOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionReportOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionReportOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionReportOptionMaxAggregateInputType
  }

  export type GetQuestionReportOptionAggregateType<T extends QuestionReportOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionReportOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionReportOption[P]>
      : GetScalarType<T[P], AggregateQuestionReportOption[P]>
  }




  export type QuestionReportOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionReportOptionWhereInput
    orderBy?: QuestionReportOptionOrderByWithAggregationInput | QuestionReportOptionOrderByWithAggregationInput[]
    by: QuestionReportOptionScalarFieldEnum[] | QuestionReportOptionScalarFieldEnum
    having?: QuestionReportOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionReportOptionCountAggregateInputType | true
    _avg?: QuestionReportOptionAvgAggregateInputType
    _sum?: QuestionReportOptionSumAggregateInputType
    _min?: QuestionReportOptionMinAggregateInputType
    _max?: QuestionReportOptionMaxAggregateInputType
  }

  export type QuestionReportOptionGroupByOutputType = {
    id: string
    reportId: string
    text: string
    isCorrect: boolean
    order: number
    createdAt: Date
    updatedAt: Date
    _count: QuestionReportOptionCountAggregateOutputType | null
    _avg: QuestionReportOptionAvgAggregateOutputType | null
    _sum: QuestionReportOptionSumAggregateOutputType | null
    _min: QuestionReportOptionMinAggregateOutputType | null
    _max: QuestionReportOptionMaxAggregateOutputType | null
  }

  type GetQuestionReportOptionGroupByPayload<T extends QuestionReportOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionReportOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionReportOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionReportOptionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionReportOptionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionReportOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    text?: boolean
    isCorrect?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    report?: boolean | QuestionReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionReportOption"]>

  export type QuestionReportOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    text?: boolean
    isCorrect?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    report?: boolean | QuestionReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionReportOption"]>

  export type QuestionReportOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    text?: boolean
    isCorrect?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    report?: boolean | QuestionReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionReportOption"]>

  export type QuestionReportOptionSelectScalar = {
    id?: boolean
    reportId?: boolean
    text?: boolean
    isCorrect?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionReportOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reportId" | "text" | "isCorrect" | "order" | "createdAt" | "updatedAt", ExtArgs["result"]["questionReportOption"]>
  export type QuestionReportOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | QuestionReportDefaultArgs<ExtArgs>
  }
  export type QuestionReportOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | QuestionReportDefaultArgs<ExtArgs>
  }
  export type QuestionReportOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | QuestionReportDefaultArgs<ExtArgs>
  }

  export type $QuestionReportOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionReportOption"
    objects: {
      report: Prisma.$QuestionReportPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reportId: string
      text: string
      isCorrect: boolean
      order: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["questionReportOption"]>
    composites: {}
  }

  type QuestionReportOptionGetPayload<S extends boolean | null | undefined | QuestionReportOptionDefaultArgs> = $Result.GetResult<Prisma.$QuestionReportOptionPayload, S>

  type QuestionReportOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionReportOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionReportOptionCountAggregateInputType | true
    }

  export interface QuestionReportOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionReportOption'], meta: { name: 'QuestionReportOption' } }
    /**
     * Find zero or one QuestionReportOption that matches the filter.
     * @param {QuestionReportOptionFindUniqueArgs} args - Arguments to find a QuestionReportOption
     * @example
     * // Get one QuestionReportOption
     * const questionReportOption = await prisma.questionReportOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionReportOptionFindUniqueArgs>(args: SelectSubset<T, QuestionReportOptionFindUniqueArgs<ExtArgs>>): Prisma__QuestionReportOptionClient<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionReportOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionReportOptionFindUniqueOrThrowArgs} args - Arguments to find a QuestionReportOption
     * @example
     * // Get one QuestionReportOption
     * const questionReportOption = await prisma.questionReportOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionReportOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionReportOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionReportOptionClient<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionReportOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportOptionFindFirstArgs} args - Arguments to find a QuestionReportOption
     * @example
     * // Get one QuestionReportOption
     * const questionReportOption = await prisma.questionReportOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionReportOptionFindFirstArgs>(args?: SelectSubset<T, QuestionReportOptionFindFirstArgs<ExtArgs>>): Prisma__QuestionReportOptionClient<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionReportOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportOptionFindFirstOrThrowArgs} args - Arguments to find a QuestionReportOption
     * @example
     * // Get one QuestionReportOption
     * const questionReportOption = await prisma.questionReportOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionReportOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionReportOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionReportOptionClient<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionReportOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionReportOptions
     * const questionReportOptions = await prisma.questionReportOption.findMany()
     * 
     * // Get first 10 QuestionReportOptions
     * const questionReportOptions = await prisma.questionReportOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionReportOptionWithIdOnly = await prisma.questionReportOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionReportOptionFindManyArgs>(args?: SelectSubset<T, QuestionReportOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionReportOption.
     * @param {QuestionReportOptionCreateArgs} args - Arguments to create a QuestionReportOption.
     * @example
     * // Create one QuestionReportOption
     * const QuestionReportOption = await prisma.questionReportOption.create({
     *   data: {
     *     // ... data to create a QuestionReportOption
     *   }
     * })
     * 
     */
    create<T extends QuestionReportOptionCreateArgs>(args: SelectSubset<T, QuestionReportOptionCreateArgs<ExtArgs>>): Prisma__QuestionReportOptionClient<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionReportOptions.
     * @param {QuestionReportOptionCreateManyArgs} args - Arguments to create many QuestionReportOptions.
     * @example
     * // Create many QuestionReportOptions
     * const questionReportOption = await prisma.questionReportOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionReportOptionCreateManyArgs>(args?: SelectSubset<T, QuestionReportOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionReportOptions and returns the data saved in the database.
     * @param {QuestionReportOptionCreateManyAndReturnArgs} args - Arguments to create many QuestionReportOptions.
     * @example
     * // Create many QuestionReportOptions
     * const questionReportOption = await prisma.questionReportOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionReportOptions and only return the `id`
     * const questionReportOptionWithIdOnly = await prisma.questionReportOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionReportOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionReportOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionReportOption.
     * @param {QuestionReportOptionDeleteArgs} args - Arguments to delete one QuestionReportOption.
     * @example
     * // Delete one QuestionReportOption
     * const QuestionReportOption = await prisma.questionReportOption.delete({
     *   where: {
     *     // ... filter to delete one QuestionReportOption
     *   }
     * })
     * 
     */
    delete<T extends QuestionReportOptionDeleteArgs>(args: SelectSubset<T, QuestionReportOptionDeleteArgs<ExtArgs>>): Prisma__QuestionReportOptionClient<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionReportOption.
     * @param {QuestionReportOptionUpdateArgs} args - Arguments to update one QuestionReportOption.
     * @example
     * // Update one QuestionReportOption
     * const questionReportOption = await prisma.questionReportOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionReportOptionUpdateArgs>(args: SelectSubset<T, QuestionReportOptionUpdateArgs<ExtArgs>>): Prisma__QuestionReportOptionClient<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionReportOptions.
     * @param {QuestionReportOptionDeleteManyArgs} args - Arguments to filter QuestionReportOptions to delete.
     * @example
     * // Delete a few QuestionReportOptions
     * const { count } = await prisma.questionReportOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionReportOptionDeleteManyArgs>(args?: SelectSubset<T, QuestionReportOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionReportOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionReportOptions
     * const questionReportOption = await prisma.questionReportOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionReportOptionUpdateManyArgs>(args: SelectSubset<T, QuestionReportOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionReportOptions and returns the data updated in the database.
     * @param {QuestionReportOptionUpdateManyAndReturnArgs} args - Arguments to update many QuestionReportOptions.
     * @example
     * // Update many QuestionReportOptions
     * const questionReportOption = await prisma.questionReportOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionReportOptions and only return the `id`
     * const questionReportOptionWithIdOnly = await prisma.questionReportOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionReportOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionReportOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionReportOption.
     * @param {QuestionReportOptionUpsertArgs} args - Arguments to update or create a QuestionReportOption.
     * @example
     * // Update or create a QuestionReportOption
     * const questionReportOption = await prisma.questionReportOption.upsert({
     *   create: {
     *     // ... data to create a QuestionReportOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionReportOption we want to update
     *   }
     * })
     */
    upsert<T extends QuestionReportOptionUpsertArgs>(args: SelectSubset<T, QuestionReportOptionUpsertArgs<ExtArgs>>): Prisma__QuestionReportOptionClient<$Result.GetResult<Prisma.$QuestionReportOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionReportOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportOptionCountArgs} args - Arguments to filter QuestionReportOptions to count.
     * @example
     * // Count the number of QuestionReportOptions
     * const count = await prisma.questionReportOption.count({
     *   where: {
     *     // ... the filter for the QuestionReportOptions we want to count
     *   }
     * })
    **/
    count<T extends QuestionReportOptionCountArgs>(
      args?: Subset<T, QuestionReportOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionReportOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionReportOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionReportOptionAggregateArgs>(args: Subset<T, QuestionReportOptionAggregateArgs>): Prisma.PrismaPromise<GetQuestionReportOptionAggregateType<T>>

    /**
     * Group by QuestionReportOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionReportOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionReportOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionReportOptionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionReportOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionReportOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionReportOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionReportOption model
   */
  readonly fields: QuestionReportOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionReportOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionReportOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends QuestionReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionReportDefaultArgs<ExtArgs>>): Prisma__QuestionReportClient<$Result.GetResult<Prisma.$QuestionReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionReportOption model
   */
  interface QuestionReportOptionFieldRefs {
    readonly id: FieldRef<"QuestionReportOption", 'String'>
    readonly reportId: FieldRef<"QuestionReportOption", 'String'>
    readonly text: FieldRef<"QuestionReportOption", 'String'>
    readonly isCorrect: FieldRef<"QuestionReportOption", 'Boolean'>
    readonly order: FieldRef<"QuestionReportOption", 'Int'>
    readonly createdAt: FieldRef<"QuestionReportOption", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionReportOption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionReportOption findUnique
   */
  export type QuestionReportOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReportOption to fetch.
     */
    where: QuestionReportOptionWhereUniqueInput
  }

  /**
   * QuestionReportOption findUniqueOrThrow
   */
  export type QuestionReportOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReportOption to fetch.
     */
    where: QuestionReportOptionWhereUniqueInput
  }

  /**
   * QuestionReportOption findFirst
   */
  export type QuestionReportOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReportOption to fetch.
     */
    where?: QuestionReportOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionReportOptions to fetch.
     */
    orderBy?: QuestionReportOptionOrderByWithRelationInput | QuestionReportOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionReportOptions.
     */
    cursor?: QuestionReportOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionReportOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionReportOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionReportOptions.
     */
    distinct?: QuestionReportOptionScalarFieldEnum | QuestionReportOptionScalarFieldEnum[]
  }

  /**
   * QuestionReportOption findFirstOrThrow
   */
  export type QuestionReportOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReportOption to fetch.
     */
    where?: QuestionReportOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionReportOptions to fetch.
     */
    orderBy?: QuestionReportOptionOrderByWithRelationInput | QuestionReportOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionReportOptions.
     */
    cursor?: QuestionReportOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionReportOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionReportOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionReportOptions.
     */
    distinct?: QuestionReportOptionScalarFieldEnum | QuestionReportOptionScalarFieldEnum[]
  }

  /**
   * QuestionReportOption findMany
   */
  export type QuestionReportOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionReportOptions to fetch.
     */
    where?: QuestionReportOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionReportOptions to fetch.
     */
    orderBy?: QuestionReportOptionOrderByWithRelationInput | QuestionReportOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionReportOptions.
     */
    cursor?: QuestionReportOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionReportOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionReportOptions.
     */
    skip?: number
    distinct?: QuestionReportOptionScalarFieldEnum | QuestionReportOptionScalarFieldEnum[]
  }

  /**
   * QuestionReportOption create
   */
  export type QuestionReportOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionReportOption.
     */
    data: XOR<QuestionReportOptionCreateInput, QuestionReportOptionUncheckedCreateInput>
  }

  /**
   * QuestionReportOption createMany
   */
  export type QuestionReportOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionReportOptions.
     */
    data: QuestionReportOptionCreateManyInput | QuestionReportOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionReportOption createManyAndReturn
   */
  export type QuestionReportOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionReportOptions.
     */
    data: QuestionReportOptionCreateManyInput | QuestionReportOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionReportOption update
   */
  export type QuestionReportOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionReportOption.
     */
    data: XOR<QuestionReportOptionUpdateInput, QuestionReportOptionUncheckedUpdateInput>
    /**
     * Choose, which QuestionReportOption to update.
     */
    where: QuestionReportOptionWhereUniqueInput
  }

  /**
   * QuestionReportOption updateMany
   */
  export type QuestionReportOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionReportOptions.
     */
    data: XOR<QuestionReportOptionUpdateManyMutationInput, QuestionReportOptionUncheckedUpdateManyInput>
    /**
     * Filter which QuestionReportOptions to update
     */
    where?: QuestionReportOptionWhereInput
    /**
     * Limit how many QuestionReportOptions to update.
     */
    limit?: number
  }

  /**
   * QuestionReportOption updateManyAndReturn
   */
  export type QuestionReportOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * The data used to update QuestionReportOptions.
     */
    data: XOR<QuestionReportOptionUpdateManyMutationInput, QuestionReportOptionUncheckedUpdateManyInput>
    /**
     * Filter which QuestionReportOptions to update
     */
    where?: QuestionReportOptionWhereInput
    /**
     * Limit how many QuestionReportOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionReportOption upsert
   */
  export type QuestionReportOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionReportOption to update in case it exists.
     */
    where: QuestionReportOptionWhereUniqueInput
    /**
     * In case the QuestionReportOption found by the `where` argument doesn't exist, create a new QuestionReportOption with this data.
     */
    create: XOR<QuestionReportOptionCreateInput, QuestionReportOptionUncheckedCreateInput>
    /**
     * In case the QuestionReportOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionReportOptionUpdateInput, QuestionReportOptionUncheckedUpdateInput>
  }

  /**
   * QuestionReportOption delete
   */
  export type QuestionReportOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
    /**
     * Filter which QuestionReportOption to delete.
     */
    where: QuestionReportOptionWhereUniqueInput
  }

  /**
   * QuestionReportOption deleteMany
   */
  export type QuestionReportOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionReportOptions to delete
     */
    where?: QuestionReportOptionWhereInput
    /**
     * Limit how many QuestionReportOptions to delete.
     */
    limit?: number
  }

  /**
   * QuestionReportOption without action
   */
  export type QuestionReportOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionReportOption
     */
    select?: QuestionReportOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionReportOption
     */
    omit?: QuestionReportOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionReportOptionInclude<ExtArgs> | null
  }


  /**
   * Model QuestionAlternativeExplanation
   */

  export type AggregateQuestionAlternativeExplanation = {
    _count: QuestionAlternativeExplanationCountAggregateOutputType | null
    _min: QuestionAlternativeExplanationMinAggregateOutputType | null
    _max: QuestionAlternativeExplanationMaxAggregateOutputType | null
  }

  export type QuestionAlternativeExplanationMinAggregateOutputType = {
    id: string | null
    questionId: string | null
    explanation: string | null
    source: string | null
    reportId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionAlternativeExplanationMaxAggregateOutputType = {
    id: string | null
    questionId: string | null
    explanation: string | null
    source: string | null
    reportId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionAlternativeExplanationCountAggregateOutputType = {
    id: number
    questionId: number
    explanation: number
    source: number
    reportId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionAlternativeExplanationMinAggregateInputType = {
    id?: true
    questionId?: true
    explanation?: true
    source?: true
    reportId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionAlternativeExplanationMaxAggregateInputType = {
    id?: true
    questionId?: true
    explanation?: true
    source?: true
    reportId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionAlternativeExplanationCountAggregateInputType = {
    id?: true
    questionId?: true
    explanation?: true
    source?: true
    reportId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAlternativeExplanationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionAlternativeExplanation to aggregate.
     */
    where?: QuestionAlternativeExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAlternativeExplanations to fetch.
     */
    orderBy?: QuestionAlternativeExplanationOrderByWithRelationInput | QuestionAlternativeExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionAlternativeExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAlternativeExplanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAlternativeExplanations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionAlternativeExplanations
    **/
    _count?: true | QuestionAlternativeExplanationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionAlternativeExplanationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionAlternativeExplanationMaxAggregateInputType
  }

  export type GetQuestionAlternativeExplanationAggregateType<T extends QuestionAlternativeExplanationAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionAlternativeExplanation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionAlternativeExplanation[P]>
      : GetScalarType<T[P], AggregateQuestionAlternativeExplanation[P]>
  }




  export type QuestionAlternativeExplanationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionAlternativeExplanationWhereInput
    orderBy?: QuestionAlternativeExplanationOrderByWithAggregationInput | QuestionAlternativeExplanationOrderByWithAggregationInput[]
    by: QuestionAlternativeExplanationScalarFieldEnum[] | QuestionAlternativeExplanationScalarFieldEnum
    having?: QuestionAlternativeExplanationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionAlternativeExplanationCountAggregateInputType | true
    _min?: QuestionAlternativeExplanationMinAggregateInputType
    _max?: QuestionAlternativeExplanationMaxAggregateInputType
  }

  export type QuestionAlternativeExplanationGroupByOutputType = {
    id: string
    questionId: string
    explanation: string
    source: string
    reportId: string | null
    createdAt: Date
    updatedAt: Date
    _count: QuestionAlternativeExplanationCountAggregateOutputType | null
    _min: QuestionAlternativeExplanationMinAggregateOutputType | null
    _max: QuestionAlternativeExplanationMaxAggregateOutputType | null
  }

  type GetQuestionAlternativeExplanationGroupByPayload<T extends QuestionAlternativeExplanationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionAlternativeExplanationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionAlternativeExplanationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionAlternativeExplanationGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionAlternativeExplanationGroupByOutputType[P]>
        }
      >
    >


  export type QuestionAlternativeExplanationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    explanation?: boolean
    source?: boolean
    reportId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionAlternativeExplanation"]>

  export type QuestionAlternativeExplanationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    explanation?: boolean
    source?: boolean
    reportId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionAlternativeExplanation"]>

  export type QuestionAlternativeExplanationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    explanation?: boolean
    source?: boolean
    reportId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionAlternativeExplanation"]>

  export type QuestionAlternativeExplanationSelectScalar = {
    id?: boolean
    questionId?: boolean
    explanation?: boolean
    source?: boolean
    reportId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionAlternativeExplanationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionId" | "explanation" | "source" | "reportId" | "createdAt" | "updatedAt", ExtArgs["result"]["questionAlternativeExplanation"]>
  export type QuestionAlternativeExplanationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type QuestionAlternativeExplanationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type QuestionAlternativeExplanationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $QuestionAlternativeExplanationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionAlternativeExplanation"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      questionId: string
      explanation: string
      source: string
      reportId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["questionAlternativeExplanation"]>
    composites: {}
  }

  type QuestionAlternativeExplanationGetPayload<S extends boolean | null | undefined | QuestionAlternativeExplanationDefaultArgs> = $Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload, S>

  type QuestionAlternativeExplanationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionAlternativeExplanationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionAlternativeExplanationCountAggregateInputType | true
    }

  export interface QuestionAlternativeExplanationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionAlternativeExplanation'], meta: { name: 'QuestionAlternativeExplanation' } }
    /**
     * Find zero or one QuestionAlternativeExplanation that matches the filter.
     * @param {QuestionAlternativeExplanationFindUniqueArgs} args - Arguments to find a QuestionAlternativeExplanation
     * @example
     * // Get one QuestionAlternativeExplanation
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionAlternativeExplanationFindUniqueArgs>(args: SelectSubset<T, QuestionAlternativeExplanationFindUniqueArgs<ExtArgs>>): Prisma__QuestionAlternativeExplanationClient<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionAlternativeExplanation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionAlternativeExplanationFindUniqueOrThrowArgs} args - Arguments to find a QuestionAlternativeExplanation
     * @example
     * // Get one QuestionAlternativeExplanation
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionAlternativeExplanationFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionAlternativeExplanationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionAlternativeExplanationClient<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionAlternativeExplanation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAlternativeExplanationFindFirstArgs} args - Arguments to find a QuestionAlternativeExplanation
     * @example
     * // Get one QuestionAlternativeExplanation
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionAlternativeExplanationFindFirstArgs>(args?: SelectSubset<T, QuestionAlternativeExplanationFindFirstArgs<ExtArgs>>): Prisma__QuestionAlternativeExplanationClient<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionAlternativeExplanation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAlternativeExplanationFindFirstOrThrowArgs} args - Arguments to find a QuestionAlternativeExplanation
     * @example
     * // Get one QuestionAlternativeExplanation
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionAlternativeExplanationFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionAlternativeExplanationFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionAlternativeExplanationClient<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionAlternativeExplanations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAlternativeExplanationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionAlternativeExplanations
     * const questionAlternativeExplanations = await prisma.questionAlternativeExplanation.findMany()
     * 
     * // Get first 10 QuestionAlternativeExplanations
     * const questionAlternativeExplanations = await prisma.questionAlternativeExplanation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionAlternativeExplanationWithIdOnly = await prisma.questionAlternativeExplanation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionAlternativeExplanationFindManyArgs>(args?: SelectSubset<T, QuestionAlternativeExplanationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionAlternativeExplanation.
     * @param {QuestionAlternativeExplanationCreateArgs} args - Arguments to create a QuestionAlternativeExplanation.
     * @example
     * // Create one QuestionAlternativeExplanation
     * const QuestionAlternativeExplanation = await prisma.questionAlternativeExplanation.create({
     *   data: {
     *     // ... data to create a QuestionAlternativeExplanation
     *   }
     * })
     * 
     */
    create<T extends QuestionAlternativeExplanationCreateArgs>(args: SelectSubset<T, QuestionAlternativeExplanationCreateArgs<ExtArgs>>): Prisma__QuestionAlternativeExplanationClient<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionAlternativeExplanations.
     * @param {QuestionAlternativeExplanationCreateManyArgs} args - Arguments to create many QuestionAlternativeExplanations.
     * @example
     * // Create many QuestionAlternativeExplanations
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionAlternativeExplanationCreateManyArgs>(args?: SelectSubset<T, QuestionAlternativeExplanationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionAlternativeExplanations and returns the data saved in the database.
     * @param {QuestionAlternativeExplanationCreateManyAndReturnArgs} args - Arguments to create many QuestionAlternativeExplanations.
     * @example
     * // Create many QuestionAlternativeExplanations
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionAlternativeExplanations and only return the `id`
     * const questionAlternativeExplanationWithIdOnly = await prisma.questionAlternativeExplanation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionAlternativeExplanationCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionAlternativeExplanationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionAlternativeExplanation.
     * @param {QuestionAlternativeExplanationDeleteArgs} args - Arguments to delete one QuestionAlternativeExplanation.
     * @example
     * // Delete one QuestionAlternativeExplanation
     * const QuestionAlternativeExplanation = await prisma.questionAlternativeExplanation.delete({
     *   where: {
     *     // ... filter to delete one QuestionAlternativeExplanation
     *   }
     * })
     * 
     */
    delete<T extends QuestionAlternativeExplanationDeleteArgs>(args: SelectSubset<T, QuestionAlternativeExplanationDeleteArgs<ExtArgs>>): Prisma__QuestionAlternativeExplanationClient<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionAlternativeExplanation.
     * @param {QuestionAlternativeExplanationUpdateArgs} args - Arguments to update one QuestionAlternativeExplanation.
     * @example
     * // Update one QuestionAlternativeExplanation
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionAlternativeExplanationUpdateArgs>(args: SelectSubset<T, QuestionAlternativeExplanationUpdateArgs<ExtArgs>>): Prisma__QuestionAlternativeExplanationClient<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionAlternativeExplanations.
     * @param {QuestionAlternativeExplanationDeleteManyArgs} args - Arguments to filter QuestionAlternativeExplanations to delete.
     * @example
     * // Delete a few QuestionAlternativeExplanations
     * const { count } = await prisma.questionAlternativeExplanation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionAlternativeExplanationDeleteManyArgs>(args?: SelectSubset<T, QuestionAlternativeExplanationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionAlternativeExplanations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAlternativeExplanationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionAlternativeExplanations
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionAlternativeExplanationUpdateManyArgs>(args: SelectSubset<T, QuestionAlternativeExplanationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionAlternativeExplanations and returns the data updated in the database.
     * @param {QuestionAlternativeExplanationUpdateManyAndReturnArgs} args - Arguments to update many QuestionAlternativeExplanations.
     * @example
     * // Update many QuestionAlternativeExplanations
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionAlternativeExplanations and only return the `id`
     * const questionAlternativeExplanationWithIdOnly = await prisma.questionAlternativeExplanation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionAlternativeExplanationUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionAlternativeExplanationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionAlternativeExplanation.
     * @param {QuestionAlternativeExplanationUpsertArgs} args - Arguments to update or create a QuestionAlternativeExplanation.
     * @example
     * // Update or create a QuestionAlternativeExplanation
     * const questionAlternativeExplanation = await prisma.questionAlternativeExplanation.upsert({
     *   create: {
     *     // ... data to create a QuestionAlternativeExplanation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionAlternativeExplanation we want to update
     *   }
     * })
     */
    upsert<T extends QuestionAlternativeExplanationUpsertArgs>(args: SelectSubset<T, QuestionAlternativeExplanationUpsertArgs<ExtArgs>>): Prisma__QuestionAlternativeExplanationClient<$Result.GetResult<Prisma.$QuestionAlternativeExplanationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionAlternativeExplanations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAlternativeExplanationCountArgs} args - Arguments to filter QuestionAlternativeExplanations to count.
     * @example
     * // Count the number of QuestionAlternativeExplanations
     * const count = await prisma.questionAlternativeExplanation.count({
     *   where: {
     *     // ... the filter for the QuestionAlternativeExplanations we want to count
     *   }
     * })
    **/
    count<T extends QuestionAlternativeExplanationCountArgs>(
      args?: Subset<T, QuestionAlternativeExplanationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionAlternativeExplanationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionAlternativeExplanation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAlternativeExplanationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAlternativeExplanationAggregateArgs>(args: Subset<T, QuestionAlternativeExplanationAggregateArgs>): Prisma.PrismaPromise<GetQuestionAlternativeExplanationAggregateType<T>>

    /**
     * Group by QuestionAlternativeExplanation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAlternativeExplanationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionAlternativeExplanationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionAlternativeExplanationGroupByArgs['orderBy'] }
        : { orderBy?: QuestionAlternativeExplanationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionAlternativeExplanationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionAlternativeExplanationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionAlternativeExplanation model
   */
  readonly fields: QuestionAlternativeExplanationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionAlternativeExplanation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionAlternativeExplanationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionAlternativeExplanation model
   */
  interface QuestionAlternativeExplanationFieldRefs {
    readonly id: FieldRef<"QuestionAlternativeExplanation", 'String'>
    readonly questionId: FieldRef<"QuestionAlternativeExplanation", 'String'>
    readonly explanation: FieldRef<"QuestionAlternativeExplanation", 'String'>
    readonly source: FieldRef<"QuestionAlternativeExplanation", 'String'>
    readonly reportId: FieldRef<"QuestionAlternativeExplanation", 'String'>
    readonly createdAt: FieldRef<"QuestionAlternativeExplanation", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionAlternativeExplanation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionAlternativeExplanation findUnique
   */
  export type QuestionAlternativeExplanationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAlternativeExplanation to fetch.
     */
    where: QuestionAlternativeExplanationWhereUniqueInput
  }

  /**
   * QuestionAlternativeExplanation findUniqueOrThrow
   */
  export type QuestionAlternativeExplanationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAlternativeExplanation to fetch.
     */
    where: QuestionAlternativeExplanationWhereUniqueInput
  }

  /**
   * QuestionAlternativeExplanation findFirst
   */
  export type QuestionAlternativeExplanationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAlternativeExplanation to fetch.
     */
    where?: QuestionAlternativeExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAlternativeExplanations to fetch.
     */
    orderBy?: QuestionAlternativeExplanationOrderByWithRelationInput | QuestionAlternativeExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionAlternativeExplanations.
     */
    cursor?: QuestionAlternativeExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAlternativeExplanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAlternativeExplanations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionAlternativeExplanations.
     */
    distinct?: QuestionAlternativeExplanationScalarFieldEnum | QuestionAlternativeExplanationScalarFieldEnum[]
  }

  /**
   * QuestionAlternativeExplanation findFirstOrThrow
   */
  export type QuestionAlternativeExplanationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAlternativeExplanation to fetch.
     */
    where?: QuestionAlternativeExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAlternativeExplanations to fetch.
     */
    orderBy?: QuestionAlternativeExplanationOrderByWithRelationInput | QuestionAlternativeExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionAlternativeExplanations.
     */
    cursor?: QuestionAlternativeExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAlternativeExplanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAlternativeExplanations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionAlternativeExplanations.
     */
    distinct?: QuestionAlternativeExplanationScalarFieldEnum | QuestionAlternativeExplanationScalarFieldEnum[]
  }

  /**
   * QuestionAlternativeExplanation findMany
   */
  export type QuestionAlternativeExplanationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    /**
     * Filter, which QuestionAlternativeExplanations to fetch.
     */
    where?: QuestionAlternativeExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionAlternativeExplanations to fetch.
     */
    orderBy?: QuestionAlternativeExplanationOrderByWithRelationInput | QuestionAlternativeExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionAlternativeExplanations.
     */
    cursor?: QuestionAlternativeExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionAlternativeExplanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionAlternativeExplanations.
     */
    skip?: number
    distinct?: QuestionAlternativeExplanationScalarFieldEnum | QuestionAlternativeExplanationScalarFieldEnum[]
  }

  /**
   * QuestionAlternativeExplanation create
   */
  export type QuestionAlternativeExplanationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionAlternativeExplanation.
     */
    data: XOR<QuestionAlternativeExplanationCreateInput, QuestionAlternativeExplanationUncheckedCreateInput>
  }

  /**
   * QuestionAlternativeExplanation createMany
   */
  export type QuestionAlternativeExplanationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionAlternativeExplanations.
     */
    data: QuestionAlternativeExplanationCreateManyInput | QuestionAlternativeExplanationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionAlternativeExplanation createManyAndReturn
   */
  export type QuestionAlternativeExplanationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionAlternativeExplanations.
     */
    data: QuestionAlternativeExplanationCreateManyInput | QuestionAlternativeExplanationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionAlternativeExplanation update
   */
  export type QuestionAlternativeExplanationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionAlternativeExplanation.
     */
    data: XOR<QuestionAlternativeExplanationUpdateInput, QuestionAlternativeExplanationUncheckedUpdateInput>
    /**
     * Choose, which QuestionAlternativeExplanation to update.
     */
    where: QuestionAlternativeExplanationWhereUniqueInput
  }

  /**
   * QuestionAlternativeExplanation updateMany
   */
  export type QuestionAlternativeExplanationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionAlternativeExplanations.
     */
    data: XOR<QuestionAlternativeExplanationUpdateManyMutationInput, QuestionAlternativeExplanationUncheckedUpdateManyInput>
    /**
     * Filter which QuestionAlternativeExplanations to update
     */
    where?: QuestionAlternativeExplanationWhereInput
    /**
     * Limit how many QuestionAlternativeExplanations to update.
     */
    limit?: number
  }

  /**
   * QuestionAlternativeExplanation updateManyAndReturn
   */
  export type QuestionAlternativeExplanationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * The data used to update QuestionAlternativeExplanations.
     */
    data: XOR<QuestionAlternativeExplanationUpdateManyMutationInput, QuestionAlternativeExplanationUncheckedUpdateManyInput>
    /**
     * Filter which QuestionAlternativeExplanations to update
     */
    where?: QuestionAlternativeExplanationWhereInput
    /**
     * Limit how many QuestionAlternativeExplanations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionAlternativeExplanation upsert
   */
  export type QuestionAlternativeExplanationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionAlternativeExplanation to update in case it exists.
     */
    where: QuestionAlternativeExplanationWhereUniqueInput
    /**
     * In case the QuestionAlternativeExplanation found by the `where` argument doesn't exist, create a new QuestionAlternativeExplanation with this data.
     */
    create: XOR<QuestionAlternativeExplanationCreateInput, QuestionAlternativeExplanationUncheckedCreateInput>
    /**
     * In case the QuestionAlternativeExplanation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionAlternativeExplanationUpdateInput, QuestionAlternativeExplanationUncheckedUpdateInput>
  }

  /**
   * QuestionAlternativeExplanation delete
   */
  export type QuestionAlternativeExplanationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
    /**
     * Filter which QuestionAlternativeExplanation to delete.
     */
    where: QuestionAlternativeExplanationWhereUniqueInput
  }

  /**
   * QuestionAlternativeExplanation deleteMany
   */
  export type QuestionAlternativeExplanationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionAlternativeExplanations to delete
     */
    where?: QuestionAlternativeExplanationWhereInput
    /**
     * Limit how many QuestionAlternativeExplanations to delete.
     */
    limit?: number
  }

  /**
   * QuestionAlternativeExplanation without action
   */
  export type QuestionAlternativeExplanationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionAlternativeExplanation
     */
    select?: QuestionAlternativeExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionAlternativeExplanation
     */
    omit?: QuestionAlternativeExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionAlternativeExplanationInclude<ExtArgs> | null
  }


  /**
   * Model ExamPaper
   */

  export type AggregateExamPaper = {
    _count: ExamPaperCountAggregateOutputType | null
    _avg: ExamPaperAvgAggregateOutputType | null
    _sum: ExamPaperSumAggregateOutputType | null
    _min: ExamPaperMinAggregateOutputType | null
    _max: ExamPaperMaxAggregateOutputType | null
  }

  export type ExamPaperAvgAggregateOutputType = {
    timeLimitMin: number | null
  }

  export type ExamPaperSumAggregateOutputType = {
    timeLimitMin: number | null
  }

  export type ExamPaperMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    timeLimitMin: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExamPaperMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    timeLimitMin: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExamPaperCountAggregateOutputType = {
    id: number
    title: number
    description: number
    subjectIds: number
    topicIds: number
    subtopicIds: number
    questionIds: number
    timeLimitMin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExamPaperAvgAggregateInputType = {
    timeLimitMin?: true
  }

  export type ExamPaperSumAggregateInputType = {
    timeLimitMin?: true
  }

  export type ExamPaperMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    timeLimitMin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExamPaperMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    timeLimitMin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExamPaperCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    subjectIds?: true
    topicIds?: true
    subtopicIds?: true
    questionIds?: true
    timeLimitMin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExamPaperAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamPaper to aggregate.
     */
    where?: ExamPaperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamPapers to fetch.
     */
    orderBy?: ExamPaperOrderByWithRelationInput | ExamPaperOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamPaperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamPapers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamPapers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExamPapers
    **/
    _count?: true | ExamPaperCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamPaperAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamPaperSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamPaperMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamPaperMaxAggregateInputType
  }

  export type GetExamPaperAggregateType<T extends ExamPaperAggregateArgs> = {
        [P in keyof T & keyof AggregateExamPaper]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamPaper[P]>
      : GetScalarType<T[P], AggregateExamPaper[P]>
  }




  export type ExamPaperGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamPaperWhereInput
    orderBy?: ExamPaperOrderByWithAggregationInput | ExamPaperOrderByWithAggregationInput[]
    by: ExamPaperScalarFieldEnum[] | ExamPaperScalarFieldEnum
    having?: ExamPaperScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamPaperCountAggregateInputType | true
    _avg?: ExamPaperAvgAggregateInputType
    _sum?: ExamPaperSumAggregateInputType
    _min?: ExamPaperMinAggregateInputType
    _max?: ExamPaperMaxAggregateInputType
  }

  export type ExamPaperGroupByOutputType = {
    id: string
    title: string
    description: string | null
    subjectIds: string[]
    topicIds: string[]
    subtopicIds: string[]
    questionIds: string[]
    timeLimitMin: number | null
    createdAt: Date
    updatedAt: Date
    _count: ExamPaperCountAggregateOutputType | null
    _avg: ExamPaperAvgAggregateOutputType | null
    _sum: ExamPaperSumAggregateOutputType | null
    _min: ExamPaperMinAggregateOutputType | null
    _max: ExamPaperMaxAggregateOutputType | null
  }

  type GetExamPaperGroupByPayload<T extends ExamPaperGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamPaperGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamPaperGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamPaperGroupByOutputType[P]>
            : GetScalarType<T[P], ExamPaperGroupByOutputType[P]>
        }
      >
    >


  export type ExamPaperSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    subjectIds?: boolean
    topicIds?: boolean
    subtopicIds?: boolean
    questionIds?: boolean
    timeLimitMin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submissions?: boolean | ExamPaper$submissionsArgs<ExtArgs>
    _count?: boolean | ExamPaperCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examPaper"]>

  export type ExamPaperSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    subjectIds?: boolean
    topicIds?: boolean
    subtopicIds?: boolean
    questionIds?: boolean
    timeLimitMin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["examPaper"]>

  export type ExamPaperSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    subjectIds?: boolean
    topicIds?: boolean
    subtopicIds?: boolean
    questionIds?: boolean
    timeLimitMin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["examPaper"]>

  export type ExamPaperSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    subjectIds?: boolean
    topicIds?: boolean
    subtopicIds?: boolean
    questionIds?: boolean
    timeLimitMin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExamPaperOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "subjectIds" | "topicIds" | "subtopicIds" | "questionIds" | "timeLimitMin" | "createdAt" | "updatedAt", ExtArgs["result"]["examPaper"]>
  export type ExamPaperInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | ExamPaper$submissionsArgs<ExtArgs>
    _count?: boolean | ExamPaperCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExamPaperIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ExamPaperIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ExamPaperPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExamPaper"
    objects: {
      submissions: Prisma.$ExamSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      subjectIds: string[]
      topicIds: string[]
      subtopicIds: string[]
      questionIds: string[]
      timeLimitMin: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["examPaper"]>
    composites: {}
  }

  type ExamPaperGetPayload<S extends boolean | null | undefined | ExamPaperDefaultArgs> = $Result.GetResult<Prisma.$ExamPaperPayload, S>

  type ExamPaperCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamPaperFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamPaperCountAggregateInputType | true
    }

  export interface ExamPaperDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamPaper'], meta: { name: 'ExamPaper' } }
    /**
     * Find zero or one ExamPaper that matches the filter.
     * @param {ExamPaperFindUniqueArgs} args - Arguments to find a ExamPaper
     * @example
     * // Get one ExamPaper
     * const examPaper = await prisma.examPaper.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamPaperFindUniqueArgs>(args: SelectSubset<T, ExamPaperFindUniqueArgs<ExtArgs>>): Prisma__ExamPaperClient<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExamPaper that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamPaperFindUniqueOrThrowArgs} args - Arguments to find a ExamPaper
     * @example
     * // Get one ExamPaper
     * const examPaper = await prisma.examPaper.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamPaperFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamPaperFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamPaperClient<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamPaper that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPaperFindFirstArgs} args - Arguments to find a ExamPaper
     * @example
     * // Get one ExamPaper
     * const examPaper = await prisma.examPaper.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamPaperFindFirstArgs>(args?: SelectSubset<T, ExamPaperFindFirstArgs<ExtArgs>>): Prisma__ExamPaperClient<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamPaper that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPaperFindFirstOrThrowArgs} args - Arguments to find a ExamPaper
     * @example
     * // Get one ExamPaper
     * const examPaper = await prisma.examPaper.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamPaperFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamPaperFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamPaperClient<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExamPapers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPaperFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExamPapers
     * const examPapers = await prisma.examPaper.findMany()
     * 
     * // Get first 10 ExamPapers
     * const examPapers = await prisma.examPaper.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examPaperWithIdOnly = await prisma.examPaper.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamPaperFindManyArgs>(args?: SelectSubset<T, ExamPaperFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExamPaper.
     * @param {ExamPaperCreateArgs} args - Arguments to create a ExamPaper.
     * @example
     * // Create one ExamPaper
     * const ExamPaper = await prisma.examPaper.create({
     *   data: {
     *     // ... data to create a ExamPaper
     *   }
     * })
     * 
     */
    create<T extends ExamPaperCreateArgs>(args: SelectSubset<T, ExamPaperCreateArgs<ExtArgs>>): Prisma__ExamPaperClient<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExamPapers.
     * @param {ExamPaperCreateManyArgs} args - Arguments to create many ExamPapers.
     * @example
     * // Create many ExamPapers
     * const examPaper = await prisma.examPaper.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamPaperCreateManyArgs>(args?: SelectSubset<T, ExamPaperCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExamPapers and returns the data saved in the database.
     * @param {ExamPaperCreateManyAndReturnArgs} args - Arguments to create many ExamPapers.
     * @example
     * // Create many ExamPapers
     * const examPaper = await prisma.examPaper.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExamPapers and only return the `id`
     * const examPaperWithIdOnly = await prisma.examPaper.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExamPaperCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamPaperCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExamPaper.
     * @param {ExamPaperDeleteArgs} args - Arguments to delete one ExamPaper.
     * @example
     * // Delete one ExamPaper
     * const ExamPaper = await prisma.examPaper.delete({
     *   where: {
     *     // ... filter to delete one ExamPaper
     *   }
     * })
     * 
     */
    delete<T extends ExamPaperDeleteArgs>(args: SelectSubset<T, ExamPaperDeleteArgs<ExtArgs>>): Prisma__ExamPaperClient<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExamPaper.
     * @param {ExamPaperUpdateArgs} args - Arguments to update one ExamPaper.
     * @example
     * // Update one ExamPaper
     * const examPaper = await prisma.examPaper.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamPaperUpdateArgs>(args: SelectSubset<T, ExamPaperUpdateArgs<ExtArgs>>): Prisma__ExamPaperClient<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExamPapers.
     * @param {ExamPaperDeleteManyArgs} args - Arguments to filter ExamPapers to delete.
     * @example
     * // Delete a few ExamPapers
     * const { count } = await prisma.examPaper.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamPaperDeleteManyArgs>(args?: SelectSubset<T, ExamPaperDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamPapers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPaperUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExamPapers
     * const examPaper = await prisma.examPaper.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamPaperUpdateManyArgs>(args: SelectSubset<T, ExamPaperUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamPapers and returns the data updated in the database.
     * @param {ExamPaperUpdateManyAndReturnArgs} args - Arguments to update many ExamPapers.
     * @example
     * // Update many ExamPapers
     * const examPaper = await prisma.examPaper.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExamPapers and only return the `id`
     * const examPaperWithIdOnly = await prisma.examPaper.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExamPaperUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamPaperUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExamPaper.
     * @param {ExamPaperUpsertArgs} args - Arguments to update or create a ExamPaper.
     * @example
     * // Update or create a ExamPaper
     * const examPaper = await prisma.examPaper.upsert({
     *   create: {
     *     // ... data to create a ExamPaper
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExamPaper we want to update
     *   }
     * })
     */
    upsert<T extends ExamPaperUpsertArgs>(args: SelectSubset<T, ExamPaperUpsertArgs<ExtArgs>>): Prisma__ExamPaperClient<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExamPapers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPaperCountArgs} args - Arguments to filter ExamPapers to count.
     * @example
     * // Count the number of ExamPapers
     * const count = await prisma.examPaper.count({
     *   where: {
     *     // ... the filter for the ExamPapers we want to count
     *   }
     * })
    **/
    count<T extends ExamPaperCountArgs>(
      args?: Subset<T, ExamPaperCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamPaperCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExamPaper.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPaperAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamPaperAggregateArgs>(args: Subset<T, ExamPaperAggregateArgs>): Prisma.PrismaPromise<GetExamPaperAggregateType<T>>

    /**
     * Group by ExamPaper.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPaperGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamPaperGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamPaperGroupByArgs['orderBy'] }
        : { orderBy?: ExamPaperGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamPaperGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamPaperGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExamPaper model
   */
  readonly fields: ExamPaperFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExamPaper.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamPaperClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submissions<T extends ExamPaper$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, ExamPaper$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExamPaper model
   */
  interface ExamPaperFieldRefs {
    readonly id: FieldRef<"ExamPaper", 'String'>
    readonly title: FieldRef<"ExamPaper", 'String'>
    readonly description: FieldRef<"ExamPaper", 'String'>
    readonly subjectIds: FieldRef<"ExamPaper", 'String[]'>
    readonly topicIds: FieldRef<"ExamPaper", 'String[]'>
    readonly subtopicIds: FieldRef<"ExamPaper", 'String[]'>
    readonly questionIds: FieldRef<"ExamPaper", 'String[]'>
    readonly timeLimitMin: FieldRef<"ExamPaper", 'Int'>
    readonly createdAt: FieldRef<"ExamPaper", 'DateTime'>
    readonly updatedAt: FieldRef<"ExamPaper", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExamPaper findUnique
   */
  export type ExamPaperFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
    /**
     * Filter, which ExamPaper to fetch.
     */
    where: ExamPaperWhereUniqueInput
  }

  /**
   * ExamPaper findUniqueOrThrow
   */
  export type ExamPaperFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
    /**
     * Filter, which ExamPaper to fetch.
     */
    where: ExamPaperWhereUniqueInput
  }

  /**
   * ExamPaper findFirst
   */
  export type ExamPaperFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
    /**
     * Filter, which ExamPaper to fetch.
     */
    where?: ExamPaperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamPapers to fetch.
     */
    orderBy?: ExamPaperOrderByWithRelationInput | ExamPaperOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamPapers.
     */
    cursor?: ExamPaperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamPapers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamPapers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamPapers.
     */
    distinct?: ExamPaperScalarFieldEnum | ExamPaperScalarFieldEnum[]
  }

  /**
   * ExamPaper findFirstOrThrow
   */
  export type ExamPaperFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
    /**
     * Filter, which ExamPaper to fetch.
     */
    where?: ExamPaperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamPapers to fetch.
     */
    orderBy?: ExamPaperOrderByWithRelationInput | ExamPaperOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamPapers.
     */
    cursor?: ExamPaperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamPapers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamPapers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamPapers.
     */
    distinct?: ExamPaperScalarFieldEnum | ExamPaperScalarFieldEnum[]
  }

  /**
   * ExamPaper findMany
   */
  export type ExamPaperFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
    /**
     * Filter, which ExamPapers to fetch.
     */
    where?: ExamPaperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamPapers to fetch.
     */
    orderBy?: ExamPaperOrderByWithRelationInput | ExamPaperOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExamPapers.
     */
    cursor?: ExamPaperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamPapers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamPapers.
     */
    skip?: number
    distinct?: ExamPaperScalarFieldEnum | ExamPaperScalarFieldEnum[]
  }

  /**
   * ExamPaper create
   */
  export type ExamPaperCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
    /**
     * The data needed to create a ExamPaper.
     */
    data: XOR<ExamPaperCreateInput, ExamPaperUncheckedCreateInput>
  }

  /**
   * ExamPaper createMany
   */
  export type ExamPaperCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExamPapers.
     */
    data: ExamPaperCreateManyInput | ExamPaperCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExamPaper createManyAndReturn
   */
  export type ExamPaperCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * The data used to create many ExamPapers.
     */
    data: ExamPaperCreateManyInput | ExamPaperCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExamPaper update
   */
  export type ExamPaperUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
    /**
     * The data needed to update a ExamPaper.
     */
    data: XOR<ExamPaperUpdateInput, ExamPaperUncheckedUpdateInput>
    /**
     * Choose, which ExamPaper to update.
     */
    where: ExamPaperWhereUniqueInput
  }

  /**
   * ExamPaper updateMany
   */
  export type ExamPaperUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExamPapers.
     */
    data: XOR<ExamPaperUpdateManyMutationInput, ExamPaperUncheckedUpdateManyInput>
    /**
     * Filter which ExamPapers to update
     */
    where?: ExamPaperWhereInput
    /**
     * Limit how many ExamPapers to update.
     */
    limit?: number
  }

  /**
   * ExamPaper updateManyAndReturn
   */
  export type ExamPaperUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * The data used to update ExamPapers.
     */
    data: XOR<ExamPaperUpdateManyMutationInput, ExamPaperUncheckedUpdateManyInput>
    /**
     * Filter which ExamPapers to update
     */
    where?: ExamPaperWhereInput
    /**
     * Limit how many ExamPapers to update.
     */
    limit?: number
  }

  /**
   * ExamPaper upsert
   */
  export type ExamPaperUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
    /**
     * The filter to search for the ExamPaper to update in case it exists.
     */
    where: ExamPaperWhereUniqueInput
    /**
     * In case the ExamPaper found by the `where` argument doesn't exist, create a new ExamPaper with this data.
     */
    create: XOR<ExamPaperCreateInput, ExamPaperUncheckedCreateInput>
    /**
     * In case the ExamPaper was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamPaperUpdateInput, ExamPaperUncheckedUpdateInput>
  }

  /**
   * ExamPaper delete
   */
  export type ExamPaperDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
    /**
     * Filter which ExamPaper to delete.
     */
    where: ExamPaperWhereUniqueInput
  }

  /**
   * ExamPaper deleteMany
   */
  export type ExamPaperDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamPapers to delete
     */
    where?: ExamPaperWhereInput
    /**
     * Limit how many ExamPapers to delete.
     */
    limit?: number
  }

  /**
   * ExamPaper.submissions
   */
  export type ExamPaper$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    where?: ExamSubmissionWhereInput
    orderBy?: ExamSubmissionOrderByWithRelationInput | ExamSubmissionOrderByWithRelationInput[]
    cursor?: ExamSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamSubmissionScalarFieldEnum | ExamSubmissionScalarFieldEnum[]
  }

  /**
   * ExamPaper without action
   */
  export type ExamPaperDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPaper
     */
    select?: ExamPaperSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPaper
     */
    omit?: ExamPaperOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPaperInclude<ExtArgs> | null
  }


  /**
   * Model ExamSubmission
   */

  export type AggregateExamSubmission = {
    _count: ExamSubmissionCountAggregateOutputType | null
    _avg: ExamSubmissionAvgAggregateOutputType | null
    _sum: ExamSubmissionSumAggregateOutputType | null
    _min: ExamSubmissionMinAggregateOutputType | null
    _max: ExamSubmissionMaxAggregateOutputType | null
  }

  export type ExamSubmissionAvgAggregateOutputType = {
    totalQuestions: number | null
    correctCount: number | null
    scorePercent: number | null
  }

  export type ExamSubmissionSumAggregateOutputType = {
    totalQuestions: number | null
    correctCount: number | null
    scorePercent: number | null
  }

  export type ExamSubmissionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    examPaperId: string | null
    startedAt: Date | null
    submittedAt: Date | null
    totalQuestions: number | null
    correctCount: number | null
    scorePercent: number | null
  }

  export type ExamSubmissionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    examPaperId: string | null
    startedAt: Date | null
    submittedAt: Date | null
    totalQuestions: number | null
    correctCount: number | null
    scorePercent: number | null
  }

  export type ExamSubmissionCountAggregateOutputType = {
    id: number
    userId: number
    examPaperId: number
    startedAt: number
    submittedAt: number
    totalQuestions: number
    correctCount: number
    scorePercent: number
    _all: number
  }


  export type ExamSubmissionAvgAggregateInputType = {
    totalQuestions?: true
    correctCount?: true
    scorePercent?: true
  }

  export type ExamSubmissionSumAggregateInputType = {
    totalQuestions?: true
    correctCount?: true
    scorePercent?: true
  }

  export type ExamSubmissionMinAggregateInputType = {
    id?: true
    userId?: true
    examPaperId?: true
    startedAt?: true
    submittedAt?: true
    totalQuestions?: true
    correctCount?: true
    scorePercent?: true
  }

  export type ExamSubmissionMaxAggregateInputType = {
    id?: true
    userId?: true
    examPaperId?: true
    startedAt?: true
    submittedAt?: true
    totalQuestions?: true
    correctCount?: true
    scorePercent?: true
  }

  export type ExamSubmissionCountAggregateInputType = {
    id?: true
    userId?: true
    examPaperId?: true
    startedAt?: true
    submittedAt?: true
    totalQuestions?: true
    correctCount?: true
    scorePercent?: true
    _all?: true
  }

  export type ExamSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamSubmission to aggregate.
     */
    where?: ExamSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamSubmissions to fetch.
     */
    orderBy?: ExamSubmissionOrderByWithRelationInput | ExamSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExamSubmissions
    **/
    _count?: true | ExamSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamSubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamSubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamSubmissionMaxAggregateInputType
  }

  export type GetExamSubmissionAggregateType<T extends ExamSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateExamSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamSubmission[P]>
      : GetScalarType<T[P], AggregateExamSubmission[P]>
  }




  export type ExamSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamSubmissionWhereInput
    orderBy?: ExamSubmissionOrderByWithAggregationInput | ExamSubmissionOrderByWithAggregationInput[]
    by: ExamSubmissionScalarFieldEnum[] | ExamSubmissionScalarFieldEnum
    having?: ExamSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamSubmissionCountAggregateInputType | true
    _avg?: ExamSubmissionAvgAggregateInputType
    _sum?: ExamSubmissionSumAggregateInputType
    _min?: ExamSubmissionMinAggregateInputType
    _max?: ExamSubmissionMaxAggregateInputType
  }

  export type ExamSubmissionGroupByOutputType = {
    id: string
    userId: string
    examPaperId: string
    startedAt: Date
    submittedAt: Date | null
    totalQuestions: number
    correctCount: number
    scorePercent: number | null
    _count: ExamSubmissionCountAggregateOutputType | null
    _avg: ExamSubmissionAvgAggregateOutputType | null
    _sum: ExamSubmissionSumAggregateOutputType | null
    _min: ExamSubmissionMinAggregateOutputType | null
    _max: ExamSubmissionMaxAggregateOutputType | null
  }

  type GetExamSubmissionGroupByPayload<T extends ExamSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], ExamSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type ExamSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    examPaperId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    totalQuestions?: boolean
    correctCount?: boolean
    scorePercent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    examPaper?: boolean | ExamPaperDefaultArgs<ExtArgs>
    answers?: boolean | ExamSubmission$answersArgs<ExtArgs>
    _count?: boolean | ExamSubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examSubmission"]>

  export type ExamSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    examPaperId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    totalQuestions?: boolean
    correctCount?: boolean
    scorePercent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    examPaper?: boolean | ExamPaperDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examSubmission"]>

  export type ExamSubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    examPaperId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    totalQuestions?: boolean
    correctCount?: boolean
    scorePercent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    examPaper?: boolean | ExamPaperDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examSubmission"]>

  export type ExamSubmissionSelectScalar = {
    id?: boolean
    userId?: boolean
    examPaperId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    totalQuestions?: boolean
    correctCount?: boolean
    scorePercent?: boolean
  }

  export type ExamSubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "examPaperId" | "startedAt" | "submittedAt" | "totalQuestions" | "correctCount" | "scorePercent", ExtArgs["result"]["examSubmission"]>
  export type ExamSubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    examPaper?: boolean | ExamPaperDefaultArgs<ExtArgs>
    answers?: boolean | ExamSubmission$answersArgs<ExtArgs>
    _count?: boolean | ExamSubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExamSubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    examPaper?: boolean | ExamPaperDefaultArgs<ExtArgs>
  }
  export type ExamSubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    examPaper?: boolean | ExamPaperDefaultArgs<ExtArgs>
  }

  export type $ExamSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExamSubmission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      examPaper: Prisma.$ExamPaperPayload<ExtArgs>
      answers: Prisma.$ExamAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      examPaperId: string
      startedAt: Date
      submittedAt: Date | null
      totalQuestions: number
      correctCount: number
      scorePercent: number | null
    }, ExtArgs["result"]["examSubmission"]>
    composites: {}
  }

  type ExamSubmissionGetPayload<S extends boolean | null | undefined | ExamSubmissionDefaultArgs> = $Result.GetResult<Prisma.$ExamSubmissionPayload, S>

  type ExamSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamSubmissionCountAggregateInputType | true
    }

  export interface ExamSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamSubmission'], meta: { name: 'ExamSubmission' } }
    /**
     * Find zero or one ExamSubmission that matches the filter.
     * @param {ExamSubmissionFindUniqueArgs} args - Arguments to find a ExamSubmission
     * @example
     * // Get one ExamSubmission
     * const examSubmission = await prisma.examSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamSubmissionFindUniqueArgs>(args: SelectSubset<T, ExamSubmissionFindUniqueArgs<ExtArgs>>): Prisma__ExamSubmissionClient<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExamSubmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamSubmissionFindUniqueOrThrowArgs} args - Arguments to find a ExamSubmission
     * @example
     * // Get one ExamSubmission
     * const examSubmission = await prisma.examSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamSubmissionClient<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubmissionFindFirstArgs} args - Arguments to find a ExamSubmission
     * @example
     * // Get one ExamSubmission
     * const examSubmission = await prisma.examSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamSubmissionFindFirstArgs>(args?: SelectSubset<T, ExamSubmissionFindFirstArgs<ExtArgs>>): Prisma__ExamSubmissionClient<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubmissionFindFirstOrThrowArgs} args - Arguments to find a ExamSubmission
     * @example
     * // Get one ExamSubmission
     * const examSubmission = await prisma.examSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamSubmissionClient<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExamSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExamSubmissions
     * const examSubmissions = await prisma.examSubmission.findMany()
     * 
     * // Get first 10 ExamSubmissions
     * const examSubmissions = await prisma.examSubmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examSubmissionWithIdOnly = await prisma.examSubmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamSubmissionFindManyArgs>(args?: SelectSubset<T, ExamSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExamSubmission.
     * @param {ExamSubmissionCreateArgs} args - Arguments to create a ExamSubmission.
     * @example
     * // Create one ExamSubmission
     * const ExamSubmission = await prisma.examSubmission.create({
     *   data: {
     *     // ... data to create a ExamSubmission
     *   }
     * })
     * 
     */
    create<T extends ExamSubmissionCreateArgs>(args: SelectSubset<T, ExamSubmissionCreateArgs<ExtArgs>>): Prisma__ExamSubmissionClient<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExamSubmissions.
     * @param {ExamSubmissionCreateManyArgs} args - Arguments to create many ExamSubmissions.
     * @example
     * // Create many ExamSubmissions
     * const examSubmission = await prisma.examSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamSubmissionCreateManyArgs>(args?: SelectSubset<T, ExamSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExamSubmissions and returns the data saved in the database.
     * @param {ExamSubmissionCreateManyAndReturnArgs} args - Arguments to create many ExamSubmissions.
     * @example
     * // Create many ExamSubmissions
     * const examSubmission = await prisma.examSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExamSubmissions and only return the `id`
     * const examSubmissionWithIdOnly = await prisma.examSubmission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExamSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExamSubmission.
     * @param {ExamSubmissionDeleteArgs} args - Arguments to delete one ExamSubmission.
     * @example
     * // Delete one ExamSubmission
     * const ExamSubmission = await prisma.examSubmission.delete({
     *   where: {
     *     // ... filter to delete one ExamSubmission
     *   }
     * })
     * 
     */
    delete<T extends ExamSubmissionDeleteArgs>(args: SelectSubset<T, ExamSubmissionDeleteArgs<ExtArgs>>): Prisma__ExamSubmissionClient<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExamSubmission.
     * @param {ExamSubmissionUpdateArgs} args - Arguments to update one ExamSubmission.
     * @example
     * // Update one ExamSubmission
     * const examSubmission = await prisma.examSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamSubmissionUpdateArgs>(args: SelectSubset<T, ExamSubmissionUpdateArgs<ExtArgs>>): Prisma__ExamSubmissionClient<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExamSubmissions.
     * @param {ExamSubmissionDeleteManyArgs} args - Arguments to filter ExamSubmissions to delete.
     * @example
     * // Delete a few ExamSubmissions
     * const { count } = await prisma.examSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamSubmissionDeleteManyArgs>(args?: SelectSubset<T, ExamSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExamSubmissions
     * const examSubmission = await prisma.examSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamSubmissionUpdateManyArgs>(args: SelectSubset<T, ExamSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamSubmissions and returns the data updated in the database.
     * @param {ExamSubmissionUpdateManyAndReturnArgs} args - Arguments to update many ExamSubmissions.
     * @example
     * // Update many ExamSubmissions
     * const examSubmission = await prisma.examSubmission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExamSubmissions and only return the `id`
     * const examSubmissionWithIdOnly = await prisma.examSubmission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExamSubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExamSubmission.
     * @param {ExamSubmissionUpsertArgs} args - Arguments to update or create a ExamSubmission.
     * @example
     * // Update or create a ExamSubmission
     * const examSubmission = await prisma.examSubmission.upsert({
     *   create: {
     *     // ... data to create a ExamSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExamSubmission we want to update
     *   }
     * })
     */
    upsert<T extends ExamSubmissionUpsertArgs>(args: SelectSubset<T, ExamSubmissionUpsertArgs<ExtArgs>>): Prisma__ExamSubmissionClient<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExamSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubmissionCountArgs} args - Arguments to filter ExamSubmissions to count.
     * @example
     * // Count the number of ExamSubmissions
     * const count = await prisma.examSubmission.count({
     *   where: {
     *     // ... the filter for the ExamSubmissions we want to count
     *   }
     * })
    **/
    count<T extends ExamSubmissionCountArgs>(
      args?: Subset<T, ExamSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExamSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamSubmissionAggregateArgs>(args: Subset<T, ExamSubmissionAggregateArgs>): Prisma.PrismaPromise<GetExamSubmissionAggregateType<T>>

    /**
     * Group by ExamSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: ExamSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExamSubmission model
   */
  readonly fields: ExamSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExamSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    examPaper<T extends ExamPaperDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamPaperDefaultArgs<ExtArgs>>): Prisma__ExamPaperClient<$Result.GetResult<Prisma.$ExamPaperPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    answers<T extends ExamSubmission$answersArgs<ExtArgs> = {}>(args?: Subset<T, ExamSubmission$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExamSubmission model
   */
  interface ExamSubmissionFieldRefs {
    readonly id: FieldRef<"ExamSubmission", 'String'>
    readonly userId: FieldRef<"ExamSubmission", 'String'>
    readonly examPaperId: FieldRef<"ExamSubmission", 'String'>
    readonly startedAt: FieldRef<"ExamSubmission", 'DateTime'>
    readonly submittedAt: FieldRef<"ExamSubmission", 'DateTime'>
    readonly totalQuestions: FieldRef<"ExamSubmission", 'Int'>
    readonly correctCount: FieldRef<"ExamSubmission", 'Int'>
    readonly scorePercent: FieldRef<"ExamSubmission", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * ExamSubmission findUnique
   */
  export type ExamSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubmission to fetch.
     */
    where: ExamSubmissionWhereUniqueInput
  }

  /**
   * ExamSubmission findUniqueOrThrow
   */
  export type ExamSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubmission to fetch.
     */
    where: ExamSubmissionWhereUniqueInput
  }

  /**
   * ExamSubmission findFirst
   */
  export type ExamSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubmission to fetch.
     */
    where?: ExamSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamSubmissions to fetch.
     */
    orderBy?: ExamSubmissionOrderByWithRelationInput | ExamSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamSubmissions.
     */
    cursor?: ExamSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamSubmissions.
     */
    distinct?: ExamSubmissionScalarFieldEnum | ExamSubmissionScalarFieldEnum[]
  }

  /**
   * ExamSubmission findFirstOrThrow
   */
  export type ExamSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubmission to fetch.
     */
    where?: ExamSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamSubmissions to fetch.
     */
    orderBy?: ExamSubmissionOrderByWithRelationInput | ExamSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamSubmissions.
     */
    cursor?: ExamSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamSubmissions.
     */
    distinct?: ExamSubmissionScalarFieldEnum | ExamSubmissionScalarFieldEnum[]
  }

  /**
   * ExamSubmission findMany
   */
  export type ExamSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which ExamSubmissions to fetch.
     */
    where?: ExamSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamSubmissions to fetch.
     */
    orderBy?: ExamSubmissionOrderByWithRelationInput | ExamSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExamSubmissions.
     */
    cursor?: ExamSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamSubmissions.
     */
    skip?: number
    distinct?: ExamSubmissionScalarFieldEnum | ExamSubmissionScalarFieldEnum[]
  }

  /**
   * ExamSubmission create
   */
  export type ExamSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a ExamSubmission.
     */
    data: XOR<ExamSubmissionCreateInput, ExamSubmissionUncheckedCreateInput>
  }

  /**
   * ExamSubmission createMany
   */
  export type ExamSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExamSubmissions.
     */
    data: ExamSubmissionCreateManyInput | ExamSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExamSubmission createManyAndReturn
   */
  export type ExamSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many ExamSubmissions.
     */
    data: ExamSubmissionCreateManyInput | ExamSubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamSubmission update
   */
  export type ExamSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a ExamSubmission.
     */
    data: XOR<ExamSubmissionUpdateInput, ExamSubmissionUncheckedUpdateInput>
    /**
     * Choose, which ExamSubmission to update.
     */
    where: ExamSubmissionWhereUniqueInput
  }

  /**
   * ExamSubmission updateMany
   */
  export type ExamSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExamSubmissions.
     */
    data: XOR<ExamSubmissionUpdateManyMutationInput, ExamSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which ExamSubmissions to update
     */
    where?: ExamSubmissionWhereInput
    /**
     * Limit how many ExamSubmissions to update.
     */
    limit?: number
  }

  /**
   * ExamSubmission updateManyAndReturn
   */
  export type ExamSubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * The data used to update ExamSubmissions.
     */
    data: XOR<ExamSubmissionUpdateManyMutationInput, ExamSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which ExamSubmissions to update
     */
    where?: ExamSubmissionWhereInput
    /**
     * Limit how many ExamSubmissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamSubmission upsert
   */
  export type ExamSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the ExamSubmission to update in case it exists.
     */
    where: ExamSubmissionWhereUniqueInput
    /**
     * In case the ExamSubmission found by the `where` argument doesn't exist, create a new ExamSubmission with this data.
     */
    create: XOR<ExamSubmissionCreateInput, ExamSubmissionUncheckedCreateInput>
    /**
     * In case the ExamSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamSubmissionUpdateInput, ExamSubmissionUncheckedUpdateInput>
  }

  /**
   * ExamSubmission delete
   */
  export type ExamSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
    /**
     * Filter which ExamSubmission to delete.
     */
    where: ExamSubmissionWhereUniqueInput
  }

  /**
   * ExamSubmission deleteMany
   */
  export type ExamSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamSubmissions to delete
     */
    where?: ExamSubmissionWhereInput
    /**
     * Limit how many ExamSubmissions to delete.
     */
    limit?: number
  }

  /**
   * ExamSubmission.answers
   */
  export type ExamSubmission$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    where?: ExamAnswerWhereInput
    orderBy?: ExamAnswerOrderByWithRelationInput | ExamAnswerOrderByWithRelationInput[]
    cursor?: ExamAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamAnswerScalarFieldEnum | ExamAnswerScalarFieldEnum[]
  }

  /**
   * ExamSubmission without action
   */
  export type ExamSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamSubmission
     */
    select?: ExamSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamSubmission
     */
    omit?: ExamSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamSubmissionInclude<ExtArgs> | null
  }


  /**
   * Model ExamAnswer
   */

  export type AggregateExamAnswer = {
    _count: ExamAnswerCountAggregateOutputType | null
    _min: ExamAnswerMinAggregateOutputType | null
    _max: ExamAnswerMaxAggregateOutputType | null
  }

  export type ExamAnswerMinAggregateOutputType = {
    id: string | null
    submissionId: string | null
    questionId: string | null
    selectedOptionId: string | null
    isCorrect: boolean | null
  }

  export type ExamAnswerMaxAggregateOutputType = {
    id: string | null
    submissionId: string | null
    questionId: string | null
    selectedOptionId: string | null
    isCorrect: boolean | null
  }

  export type ExamAnswerCountAggregateOutputType = {
    id: number
    submissionId: number
    questionId: number
    selectedOptionId: number
    isCorrect: number
    _all: number
  }


  export type ExamAnswerMinAggregateInputType = {
    id?: true
    submissionId?: true
    questionId?: true
    selectedOptionId?: true
    isCorrect?: true
  }

  export type ExamAnswerMaxAggregateInputType = {
    id?: true
    submissionId?: true
    questionId?: true
    selectedOptionId?: true
    isCorrect?: true
  }

  export type ExamAnswerCountAggregateInputType = {
    id?: true
    submissionId?: true
    questionId?: true
    selectedOptionId?: true
    isCorrect?: true
    _all?: true
  }

  export type ExamAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamAnswer to aggregate.
     */
    where?: ExamAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamAnswers to fetch.
     */
    orderBy?: ExamAnswerOrderByWithRelationInput | ExamAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExamAnswers
    **/
    _count?: true | ExamAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamAnswerMaxAggregateInputType
  }

  export type GetExamAnswerAggregateType<T extends ExamAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateExamAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamAnswer[P]>
      : GetScalarType<T[P], AggregateExamAnswer[P]>
  }




  export type ExamAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamAnswerWhereInput
    orderBy?: ExamAnswerOrderByWithAggregationInput | ExamAnswerOrderByWithAggregationInput[]
    by: ExamAnswerScalarFieldEnum[] | ExamAnswerScalarFieldEnum
    having?: ExamAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamAnswerCountAggregateInputType | true
    _min?: ExamAnswerMinAggregateInputType
    _max?: ExamAnswerMaxAggregateInputType
  }

  export type ExamAnswerGroupByOutputType = {
    id: string
    submissionId: string
    questionId: string
    selectedOptionId: string | null
    isCorrect: boolean
    _count: ExamAnswerCountAggregateOutputType | null
    _min: ExamAnswerMinAggregateOutputType | null
    _max: ExamAnswerMaxAggregateOutputType | null
  }

  type GetExamAnswerGroupByPayload<T extends ExamAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], ExamAnswerGroupByOutputType[P]>
        }
      >
    >


  export type ExamAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    submissionId?: boolean
    questionId?: boolean
    selectedOptionId?: boolean
    isCorrect?: boolean
    submission?: boolean | ExamSubmissionDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedOption?: boolean | ExamAnswer$selectedOptionArgs<ExtArgs>
  }, ExtArgs["result"]["examAnswer"]>

  export type ExamAnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    submissionId?: boolean
    questionId?: boolean
    selectedOptionId?: boolean
    isCorrect?: boolean
    submission?: boolean | ExamSubmissionDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedOption?: boolean | ExamAnswer$selectedOptionArgs<ExtArgs>
  }, ExtArgs["result"]["examAnswer"]>

  export type ExamAnswerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    submissionId?: boolean
    questionId?: boolean
    selectedOptionId?: boolean
    isCorrect?: boolean
    submission?: boolean | ExamSubmissionDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedOption?: boolean | ExamAnswer$selectedOptionArgs<ExtArgs>
  }, ExtArgs["result"]["examAnswer"]>

  export type ExamAnswerSelectScalar = {
    id?: boolean
    submissionId?: boolean
    questionId?: boolean
    selectedOptionId?: boolean
    isCorrect?: boolean
  }

  export type ExamAnswerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "submissionId" | "questionId" | "selectedOptionId" | "isCorrect", ExtArgs["result"]["examAnswer"]>
  export type ExamAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | ExamSubmissionDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedOption?: boolean | ExamAnswer$selectedOptionArgs<ExtArgs>
  }
  export type ExamAnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | ExamSubmissionDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedOption?: boolean | ExamAnswer$selectedOptionArgs<ExtArgs>
  }
  export type ExamAnswerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | ExamSubmissionDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedOption?: boolean | ExamAnswer$selectedOptionArgs<ExtArgs>
  }

  export type $ExamAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExamAnswer"
    objects: {
      submission: Prisma.$ExamSubmissionPayload<ExtArgs>
      question: Prisma.$QuestionPayload<ExtArgs>
      selectedOption: Prisma.$QuestionOptionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      submissionId: string
      questionId: string
      selectedOptionId: string | null
      isCorrect: boolean
    }, ExtArgs["result"]["examAnswer"]>
    composites: {}
  }

  type ExamAnswerGetPayload<S extends boolean | null | undefined | ExamAnswerDefaultArgs> = $Result.GetResult<Prisma.$ExamAnswerPayload, S>

  type ExamAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamAnswerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamAnswerCountAggregateInputType | true
    }

  export interface ExamAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamAnswer'], meta: { name: 'ExamAnswer' } }
    /**
     * Find zero or one ExamAnswer that matches the filter.
     * @param {ExamAnswerFindUniqueArgs} args - Arguments to find a ExamAnswer
     * @example
     * // Get one ExamAnswer
     * const examAnswer = await prisma.examAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamAnswerFindUniqueArgs>(args: SelectSubset<T, ExamAnswerFindUniqueArgs<ExtArgs>>): Prisma__ExamAnswerClient<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExamAnswer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamAnswerFindUniqueOrThrowArgs} args - Arguments to find a ExamAnswer
     * @example
     * // Get one ExamAnswer
     * const examAnswer = await prisma.examAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamAnswerClient<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAnswerFindFirstArgs} args - Arguments to find a ExamAnswer
     * @example
     * // Get one ExamAnswer
     * const examAnswer = await prisma.examAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamAnswerFindFirstArgs>(args?: SelectSubset<T, ExamAnswerFindFirstArgs<ExtArgs>>): Prisma__ExamAnswerClient<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAnswerFindFirstOrThrowArgs} args - Arguments to find a ExamAnswer
     * @example
     * // Get one ExamAnswer
     * const examAnswer = await prisma.examAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamAnswerClient<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExamAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExamAnswers
     * const examAnswers = await prisma.examAnswer.findMany()
     * 
     * // Get first 10 ExamAnswers
     * const examAnswers = await prisma.examAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examAnswerWithIdOnly = await prisma.examAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamAnswerFindManyArgs>(args?: SelectSubset<T, ExamAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExamAnswer.
     * @param {ExamAnswerCreateArgs} args - Arguments to create a ExamAnswer.
     * @example
     * // Create one ExamAnswer
     * const ExamAnswer = await prisma.examAnswer.create({
     *   data: {
     *     // ... data to create a ExamAnswer
     *   }
     * })
     * 
     */
    create<T extends ExamAnswerCreateArgs>(args: SelectSubset<T, ExamAnswerCreateArgs<ExtArgs>>): Prisma__ExamAnswerClient<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExamAnswers.
     * @param {ExamAnswerCreateManyArgs} args - Arguments to create many ExamAnswers.
     * @example
     * // Create many ExamAnswers
     * const examAnswer = await prisma.examAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamAnswerCreateManyArgs>(args?: SelectSubset<T, ExamAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExamAnswers and returns the data saved in the database.
     * @param {ExamAnswerCreateManyAndReturnArgs} args - Arguments to create many ExamAnswers.
     * @example
     * // Create many ExamAnswers
     * const examAnswer = await prisma.examAnswer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExamAnswers and only return the `id`
     * const examAnswerWithIdOnly = await prisma.examAnswer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExamAnswerCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamAnswerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExamAnswer.
     * @param {ExamAnswerDeleteArgs} args - Arguments to delete one ExamAnswer.
     * @example
     * // Delete one ExamAnswer
     * const ExamAnswer = await prisma.examAnswer.delete({
     *   where: {
     *     // ... filter to delete one ExamAnswer
     *   }
     * })
     * 
     */
    delete<T extends ExamAnswerDeleteArgs>(args: SelectSubset<T, ExamAnswerDeleteArgs<ExtArgs>>): Prisma__ExamAnswerClient<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExamAnswer.
     * @param {ExamAnswerUpdateArgs} args - Arguments to update one ExamAnswer.
     * @example
     * // Update one ExamAnswer
     * const examAnswer = await prisma.examAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamAnswerUpdateArgs>(args: SelectSubset<T, ExamAnswerUpdateArgs<ExtArgs>>): Prisma__ExamAnswerClient<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExamAnswers.
     * @param {ExamAnswerDeleteManyArgs} args - Arguments to filter ExamAnswers to delete.
     * @example
     * // Delete a few ExamAnswers
     * const { count } = await prisma.examAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamAnswerDeleteManyArgs>(args?: SelectSubset<T, ExamAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExamAnswers
     * const examAnswer = await prisma.examAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamAnswerUpdateManyArgs>(args: SelectSubset<T, ExamAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamAnswers and returns the data updated in the database.
     * @param {ExamAnswerUpdateManyAndReturnArgs} args - Arguments to update many ExamAnswers.
     * @example
     * // Update many ExamAnswers
     * const examAnswer = await prisma.examAnswer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExamAnswers and only return the `id`
     * const examAnswerWithIdOnly = await prisma.examAnswer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExamAnswerUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamAnswerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExamAnswer.
     * @param {ExamAnswerUpsertArgs} args - Arguments to update or create a ExamAnswer.
     * @example
     * // Update or create a ExamAnswer
     * const examAnswer = await prisma.examAnswer.upsert({
     *   create: {
     *     // ... data to create a ExamAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExamAnswer we want to update
     *   }
     * })
     */
    upsert<T extends ExamAnswerUpsertArgs>(args: SelectSubset<T, ExamAnswerUpsertArgs<ExtArgs>>): Prisma__ExamAnswerClient<$Result.GetResult<Prisma.$ExamAnswerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExamAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAnswerCountArgs} args - Arguments to filter ExamAnswers to count.
     * @example
     * // Count the number of ExamAnswers
     * const count = await prisma.examAnswer.count({
     *   where: {
     *     // ... the filter for the ExamAnswers we want to count
     *   }
     * })
    **/
    count<T extends ExamAnswerCountArgs>(
      args?: Subset<T, ExamAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExamAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamAnswerAggregateArgs>(args: Subset<T, ExamAnswerAggregateArgs>): Prisma.PrismaPromise<GetExamAnswerAggregateType<T>>

    /**
     * Group by ExamAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamAnswerGroupByArgs['orderBy'] }
        : { orderBy?: ExamAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExamAnswer model
   */
  readonly fields: ExamAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExamAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submission<T extends ExamSubmissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamSubmissionDefaultArgs<ExtArgs>>): Prisma__ExamSubmissionClient<$Result.GetResult<Prisma.$ExamSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    selectedOption<T extends ExamAnswer$selectedOptionArgs<ExtArgs> = {}>(args?: Subset<T, ExamAnswer$selectedOptionArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExamAnswer model
   */
  interface ExamAnswerFieldRefs {
    readonly id: FieldRef<"ExamAnswer", 'String'>
    readonly submissionId: FieldRef<"ExamAnswer", 'String'>
    readonly questionId: FieldRef<"ExamAnswer", 'String'>
    readonly selectedOptionId: FieldRef<"ExamAnswer", 'String'>
    readonly isCorrect: FieldRef<"ExamAnswer", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ExamAnswer findUnique
   */
  export type ExamAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ExamAnswer to fetch.
     */
    where: ExamAnswerWhereUniqueInput
  }

  /**
   * ExamAnswer findUniqueOrThrow
   */
  export type ExamAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ExamAnswer to fetch.
     */
    where: ExamAnswerWhereUniqueInput
  }

  /**
   * ExamAnswer findFirst
   */
  export type ExamAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ExamAnswer to fetch.
     */
    where?: ExamAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamAnswers to fetch.
     */
    orderBy?: ExamAnswerOrderByWithRelationInput | ExamAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamAnswers.
     */
    cursor?: ExamAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamAnswers.
     */
    distinct?: ExamAnswerScalarFieldEnum | ExamAnswerScalarFieldEnum[]
  }

  /**
   * ExamAnswer findFirstOrThrow
   */
  export type ExamAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ExamAnswer to fetch.
     */
    where?: ExamAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamAnswers to fetch.
     */
    orderBy?: ExamAnswerOrderByWithRelationInput | ExamAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamAnswers.
     */
    cursor?: ExamAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamAnswers.
     */
    distinct?: ExamAnswerScalarFieldEnum | ExamAnswerScalarFieldEnum[]
  }

  /**
   * ExamAnswer findMany
   */
  export type ExamAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    /**
     * Filter, which ExamAnswers to fetch.
     */
    where?: ExamAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamAnswers to fetch.
     */
    orderBy?: ExamAnswerOrderByWithRelationInput | ExamAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExamAnswers.
     */
    cursor?: ExamAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamAnswers.
     */
    skip?: number
    distinct?: ExamAnswerScalarFieldEnum | ExamAnswerScalarFieldEnum[]
  }

  /**
   * ExamAnswer create
   */
  export type ExamAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a ExamAnswer.
     */
    data: XOR<ExamAnswerCreateInput, ExamAnswerUncheckedCreateInput>
  }

  /**
   * ExamAnswer createMany
   */
  export type ExamAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExamAnswers.
     */
    data: ExamAnswerCreateManyInput | ExamAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExamAnswer createManyAndReturn
   */
  export type ExamAnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * The data used to create many ExamAnswers.
     */
    data: ExamAnswerCreateManyInput | ExamAnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamAnswer update
   */
  export type ExamAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a ExamAnswer.
     */
    data: XOR<ExamAnswerUpdateInput, ExamAnswerUncheckedUpdateInput>
    /**
     * Choose, which ExamAnswer to update.
     */
    where: ExamAnswerWhereUniqueInput
  }

  /**
   * ExamAnswer updateMany
   */
  export type ExamAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExamAnswers.
     */
    data: XOR<ExamAnswerUpdateManyMutationInput, ExamAnswerUncheckedUpdateManyInput>
    /**
     * Filter which ExamAnswers to update
     */
    where?: ExamAnswerWhereInput
    /**
     * Limit how many ExamAnswers to update.
     */
    limit?: number
  }

  /**
   * ExamAnswer updateManyAndReturn
   */
  export type ExamAnswerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * The data used to update ExamAnswers.
     */
    data: XOR<ExamAnswerUpdateManyMutationInput, ExamAnswerUncheckedUpdateManyInput>
    /**
     * Filter which ExamAnswers to update
     */
    where?: ExamAnswerWhereInput
    /**
     * Limit how many ExamAnswers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamAnswer upsert
   */
  export type ExamAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the ExamAnswer to update in case it exists.
     */
    where: ExamAnswerWhereUniqueInput
    /**
     * In case the ExamAnswer found by the `where` argument doesn't exist, create a new ExamAnswer with this data.
     */
    create: XOR<ExamAnswerCreateInput, ExamAnswerUncheckedCreateInput>
    /**
     * In case the ExamAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamAnswerUpdateInput, ExamAnswerUncheckedUpdateInput>
  }

  /**
   * ExamAnswer delete
   */
  export type ExamAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
    /**
     * Filter which ExamAnswer to delete.
     */
    where: ExamAnswerWhereUniqueInput
  }

  /**
   * ExamAnswer deleteMany
   */
  export type ExamAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamAnswers to delete
     */
    where?: ExamAnswerWhereInput
    /**
     * Limit how many ExamAnswers to delete.
     */
    limit?: number
  }

  /**
   * ExamAnswer.selectedOption
   */
  export type ExamAnswer$selectedOptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    where?: QuestionOptionWhereInput
  }

  /**
   * ExamAnswer without action
   */
  export type ExamAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamAnswer
     */
    select?: ExamAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamAnswer
     */
    omit?: ExamAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamAnswerInclude<ExtArgs> | null
  }


  /**
   * Model Plan
   */

  export type AggregatePlan = {
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  export type PlanAvgAggregateOutputType = {
    priceCents: number | null
  }

  export type PlanSumAggregateOutputType = {
    priceCents: number | null
  }

  export type PlanMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    priceCents: number | null
    currency: string | null
    interval: $Enums.PlanInterval | null
    planType: $Enums.PlanType | null
    stripePriceId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    priceCents: number | null
    currency: string | null
    interval: $Enums.PlanInterval | null
    planType: $Enums.PlanType | null
    stripePriceId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanCountAggregateOutputType = {
    id: number
    name: number
    description: number
    priceCents: number
    currency: number
    interval: number
    planType: number
    stripePriceId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlanAvgAggregateInputType = {
    priceCents?: true
  }

  export type PlanSumAggregateInputType = {
    priceCents?: true
  }

  export type PlanMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priceCents?: true
    currency?: true
    interval?: true
    planType?: true
    stripePriceId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priceCents?: true
    currency?: true
    interval?: true
    planType?: true
    stripePriceId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priceCents?: true
    currency?: true
    interval?: true
    planType?: true
    stripePriceId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plan to aggregate.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plans
    **/
    _count?: true | PlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanMaxAggregateInputType
  }

  export type GetPlanAggregateType<T extends PlanAggregateArgs> = {
        [P in keyof T & keyof AggregatePlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlan[P]>
      : GetScalarType<T[P], AggregatePlan[P]>
  }




  export type PlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithAggregationInput | PlanOrderByWithAggregationInput[]
    by: PlanScalarFieldEnum[] | PlanScalarFieldEnum
    having?: PlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanCountAggregateInputType | true
    _avg?: PlanAvgAggregateInputType
    _sum?: PlanSumAggregateInputType
    _min?: PlanMinAggregateInputType
    _max?: PlanMaxAggregateInputType
  }

  export type PlanGroupByOutputType = {
    id: string
    name: string
    description: string | null
    priceCents: number
    currency: string
    interval: $Enums.PlanInterval
    planType: $Enums.PlanType
    stripePriceId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  type GetPlanGroupByPayload<T extends PlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanGroupByOutputType[P]>
            : GetScalarType<T[P], PlanGroupByOutputType[P]>
        }
      >
    >


  export type PlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    priceCents?: boolean
    currency?: boolean
    interval?: boolean
    planType?: boolean
    stripePriceId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriptions?: boolean | Plan$subscriptionsArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    priceCents?: boolean
    currency?: boolean
    interval?: boolean
    planType?: boolean
    stripePriceId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    priceCents?: boolean
    currency?: boolean
    interval?: boolean
    planType?: boolean
    stripePriceId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    priceCents?: boolean
    currency?: boolean
    interval?: boolean
    planType?: boolean
    stripePriceId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "priceCents" | "currency" | "interval" | "planType" | "stripePriceId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["plan"]>
  export type PlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | Plan$subscriptionsArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plan"
    objects: {
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      priceCents: number
      currency: string
      interval: $Enums.PlanInterval
      planType: $Enums.PlanType
      stripePriceId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["plan"]>
    composites: {}
  }

  type PlanGetPayload<S extends boolean | null | undefined | PlanDefaultArgs> = $Result.GetResult<Prisma.$PlanPayload, S>

  type PlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlanCountAggregateInputType | true
    }

  export interface PlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plan'], meta: { name: 'Plan' } }
    /**
     * Find zero or one Plan that matches the filter.
     * @param {PlanFindUniqueArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanFindUniqueArgs>(args: SelectSubset<T, PlanFindUniqueArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Plan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlanFindUniqueOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanFindFirstArgs>(args?: SelectSubset<T, PlanFindFirstArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plans
     * const plans = await prisma.plan.findMany()
     * 
     * // Get first 10 Plans
     * const plans = await prisma.plan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planWithIdOnly = await prisma.plan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanFindManyArgs>(args?: SelectSubset<T, PlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Plan.
     * @param {PlanCreateArgs} args - Arguments to create a Plan.
     * @example
     * // Create one Plan
     * const Plan = await prisma.plan.create({
     *   data: {
     *     // ... data to create a Plan
     *   }
     * })
     * 
     */
    create<T extends PlanCreateArgs>(args: SelectSubset<T, PlanCreateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Plans.
     * @param {PlanCreateManyArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanCreateManyArgs>(args?: SelectSubset<T, PlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plans and returns the data saved in the database.
     * @param {PlanCreateManyAndReturnArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plans and only return the `id`
     * const planWithIdOnly = await prisma.plan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Plan.
     * @param {PlanDeleteArgs} args - Arguments to delete one Plan.
     * @example
     * // Delete one Plan
     * const Plan = await prisma.plan.delete({
     *   where: {
     *     // ... filter to delete one Plan
     *   }
     * })
     * 
     */
    delete<T extends PlanDeleteArgs>(args: SelectSubset<T, PlanDeleteArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Plan.
     * @param {PlanUpdateArgs} args - Arguments to update one Plan.
     * @example
     * // Update one Plan
     * const plan = await prisma.plan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanUpdateArgs>(args: SelectSubset<T, PlanUpdateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Plans.
     * @param {PlanDeleteManyArgs} args - Arguments to filter Plans to delete.
     * @example
     * // Delete a few Plans
     * const { count } = await prisma.plan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanDeleteManyArgs>(args?: SelectSubset<T, PlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanUpdateManyArgs>(args: SelectSubset<T, PlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans and returns the data updated in the database.
     * @param {PlanUpdateManyAndReturnArgs} args - Arguments to update many Plans.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Plans and only return the `id`
     * const planWithIdOnly = await prisma.plan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlanUpdateManyAndReturnArgs>(args: SelectSubset<T, PlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Plan.
     * @param {PlanUpsertArgs} args - Arguments to update or create a Plan.
     * @example
     * // Update or create a Plan
     * const plan = await prisma.plan.upsert({
     *   create: {
     *     // ... data to create a Plan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plan we want to update
     *   }
     * })
     */
    upsert<T extends PlanUpsertArgs>(args: SelectSubset<T, PlanUpsertArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCountArgs} args - Arguments to filter Plans to count.
     * @example
     * // Count the number of Plans
     * const count = await prisma.plan.count({
     *   where: {
     *     // ... the filter for the Plans we want to count
     *   }
     * })
    **/
    count<T extends PlanCountArgs>(
      args?: Subset<T, PlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanAggregateArgs>(args: Subset<T, PlanAggregateArgs>): Prisma.PrismaPromise<GetPlanAggregateType<T>>

    /**
     * Group by Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanGroupByArgs['orderBy'] }
        : { orderBy?: PlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plan model
   */
  readonly fields: PlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriptions<T extends Plan$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Plan$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plan model
   */
  interface PlanFieldRefs {
    readonly id: FieldRef<"Plan", 'String'>
    readonly name: FieldRef<"Plan", 'String'>
    readonly description: FieldRef<"Plan", 'String'>
    readonly priceCents: FieldRef<"Plan", 'Int'>
    readonly currency: FieldRef<"Plan", 'String'>
    readonly interval: FieldRef<"Plan", 'PlanInterval'>
    readonly planType: FieldRef<"Plan", 'PlanType'>
    readonly stripePriceId: FieldRef<"Plan", 'String'>
    readonly isActive: FieldRef<"Plan", 'Boolean'>
    readonly createdAt: FieldRef<"Plan", 'DateTime'>
    readonly updatedAt: FieldRef<"Plan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Plan findUnique
   */
  export type PlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findUniqueOrThrow
   */
  export type PlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findFirst
   */
  export type PlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findFirstOrThrow
   */
  export type PlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findMany
   */
  export type PlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plans to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan create
   */
  export type PlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to create a Plan.
     */
    data: XOR<PlanCreateInput, PlanUncheckedCreateInput>
  }

  /**
   * Plan createMany
   */
  export type PlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plan createManyAndReturn
   */
  export type PlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plan update
   */
  export type PlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to update a Plan.
     */
    data: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
    /**
     * Choose, which Plan to update.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan updateMany
   */
  export type PlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
    /**
     * Limit how many Plans to update.
     */
    limit?: number
  }

  /**
   * Plan updateManyAndReturn
   */
  export type PlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
    /**
     * Limit how many Plans to update.
     */
    limit?: number
  }

  /**
   * Plan upsert
   */
  export type PlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The filter to search for the Plan to update in case it exists.
     */
    where: PlanWhereUniqueInput
    /**
     * In case the Plan found by the `where` argument doesn't exist, create a new Plan with this data.
     */
    create: XOR<PlanCreateInput, PlanUncheckedCreateInput>
    /**
     * In case the Plan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
  }

  /**
   * Plan delete
   */
  export type PlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter which Plan to delete.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan deleteMany
   */
  export type PlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plans to delete
     */
    where?: PlanWhereInput
    /**
     * Limit how many Plans to delete.
     */
    limit?: number
  }

  /**
   * Plan.subscriptions
   */
  export type Plan$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Plan without action
   */
  export type PlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    planId: string | null
    status: $Enums.SubscriptionStatus | null
    startedAt: Date | null
    endsAt: Date | null
    stripeCustomerId: string | null
    stripeSubId: string | null
    stripeStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    planId: string | null
    status: $Enums.SubscriptionStatus | null
    startedAt: Date | null
    endsAt: Date | null
    stripeCustomerId: string | null
    stripeSubId: string | null
    stripeStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    planId: number
    status: number
    startedAt: number
    endsAt: number
    stripeCustomerId: number
    stripeSubId: number
    stripeStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    planId?: true
    status?: true
    startedAt?: true
    endsAt?: true
    stripeCustomerId?: true
    stripeSubId?: true
    stripeStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    planId?: true
    status?: true
    startedAt?: true
    endsAt?: true
    stripeCustomerId?: true
    stripeSubId?: true
    stripeStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    planId?: true
    status?: true
    startedAt?: true
    endsAt?: true
    stripeCustomerId?: true
    stripeSubId?: true
    stripeStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    userId: string
    planId: string
    status: $Enums.SubscriptionStatus
    startedAt: Date
    endsAt: Date | null
    stripeCustomerId: string | null
    stripeSubId: string | null
    stripeStatus: string | null
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planId?: boolean
    status?: boolean
    startedAt?: boolean
    endsAt?: boolean
    stripeCustomerId?: boolean
    stripeSubId?: boolean
    stripeStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planId?: boolean
    status?: boolean
    startedAt?: boolean
    endsAt?: boolean
    stripeCustomerId?: boolean
    stripeSubId?: boolean
    stripeStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planId?: boolean
    status?: boolean
    startedAt?: boolean
    endsAt?: boolean
    stripeCustomerId?: boolean
    stripeSubId?: boolean
    stripeStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    planId?: boolean
    status?: boolean
    startedAt?: boolean
    endsAt?: boolean
    stripeCustomerId?: boolean
    stripeSubId?: boolean
    stripeStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "planId" | "status" | "startedAt" | "endsAt" | "stripeCustomerId" | "stripeSubId" | "stripeStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["subscription"]>
  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      plan: Prisma.$PlanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      planId: string
      status: $Enums.SubscriptionStatus
      startedAt: Date
      endsAt: Date | null
      stripeCustomerId: string | null
      stripeSubId: string | null
      stripeStatus: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions and returns the data updated in the database.
     * @param {SubscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly userId: FieldRef<"Subscription", 'String'>
    readonly planId: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'SubscriptionStatus'>
    readonly startedAt: FieldRef<"Subscription", 'DateTime'>
    readonly endsAt: FieldRef<"Subscription", 'DateTime'>
    readonly stripeCustomerId: FieldRef<"Subscription", 'String'>
    readonly stripeSubId: FieldRef<"Subscription", 'String'>
    readonly stripeStatus: FieldRef<"Subscription", 'String'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
  }

  /**
   * Subscription updateManyAndReturn
   */
  export type SubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to delete.
     */
    limit?: number
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model Otp
   */

  export type AggregateOtp = {
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  export type OtpMinAggregateOutputType = {
    id: string | null
    userId: string | null
    code: string | null
    type: $Enums.OtpType | null
    target: string | null
    expiresAt: Date | null
    consumed: boolean | null
    createdAt: Date | null
  }

  export type OtpMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    code: string | null
    type: $Enums.OtpType | null
    target: string | null
    expiresAt: Date | null
    consumed: boolean | null
    createdAt: Date | null
  }

  export type OtpCountAggregateOutputType = {
    id: number
    userId: number
    code: number
    type: number
    target: number
    expiresAt: number
    consumed: number
    createdAt: number
    _all: number
  }


  export type OtpMinAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    type?: true
    target?: true
    expiresAt?: true
    consumed?: true
    createdAt?: true
  }

  export type OtpMaxAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    type?: true
    target?: true
    expiresAt?: true
    consumed?: true
    createdAt?: true
  }

  export type OtpCountAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    type?: true
    target?: true
    expiresAt?: true
    consumed?: true
    createdAt?: true
    _all?: true
  }

  export type OtpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Otp to aggregate.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Otps
    **/
    _count?: true | OtpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpMaxAggregateInputType
  }

  export type GetOtpAggregateType<T extends OtpAggregateArgs> = {
        [P in keyof T & keyof AggregateOtp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtp[P]>
      : GetScalarType<T[P], AggregateOtp[P]>
  }




  export type OtpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpWhereInput
    orderBy?: OtpOrderByWithAggregationInput | OtpOrderByWithAggregationInput[]
    by: OtpScalarFieldEnum[] | OtpScalarFieldEnum
    having?: OtpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpCountAggregateInputType | true
    _min?: OtpMinAggregateInputType
    _max?: OtpMaxAggregateInputType
  }

  export type OtpGroupByOutputType = {
    id: string
    userId: string
    code: string
    type: $Enums.OtpType
    target: string
    expiresAt: Date
    consumed: boolean
    createdAt: Date
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  type GetOtpGroupByPayload<T extends OtpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpGroupByOutputType[P]>
            : GetScalarType<T[P], OtpGroupByOutputType[P]>
        }
      >
    >


  export type OtpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    type?: boolean
    target?: boolean
    expiresAt?: boolean
    consumed?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otp"]>

  export type OtpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    type?: boolean
    target?: boolean
    expiresAt?: boolean
    consumed?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otp"]>

  export type OtpSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    type?: boolean
    target?: boolean
    expiresAt?: boolean
    consumed?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otp"]>

  export type OtpSelectScalar = {
    id?: boolean
    userId?: boolean
    code?: boolean
    type?: boolean
    target?: boolean
    expiresAt?: boolean
    consumed?: boolean
    createdAt?: boolean
  }

  export type OtpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "code" | "type" | "target" | "expiresAt" | "consumed" | "createdAt", ExtArgs["result"]["otp"]>
  export type OtpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OtpIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OtpIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OtpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Otp"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      code: string
      type: $Enums.OtpType
      target: string
      expiresAt: Date
      consumed: boolean
      createdAt: Date
    }, ExtArgs["result"]["otp"]>
    composites: {}
  }

  type OtpGetPayload<S extends boolean | null | undefined | OtpDefaultArgs> = $Result.GetResult<Prisma.$OtpPayload, S>

  type OtpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OtpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OtpCountAggregateInputType | true
    }

  export interface OtpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Otp'], meta: { name: 'Otp' } }
    /**
     * Find zero or one Otp that matches the filter.
     * @param {OtpFindUniqueArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OtpFindUniqueArgs>(args: SelectSubset<T, OtpFindUniqueArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Otp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OtpFindUniqueOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OtpFindUniqueOrThrowArgs>(args: SelectSubset<T, OtpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Otp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OtpFindFirstArgs>(args?: SelectSubset<T, OtpFindFirstArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Otp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OtpFindFirstOrThrowArgs>(args?: SelectSubset<T, OtpFindFirstOrThrowArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Otps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Otps
     * const otps = await prisma.otp.findMany()
     * 
     * // Get first 10 Otps
     * const otps = await prisma.otp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otpWithIdOnly = await prisma.otp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OtpFindManyArgs>(args?: SelectSubset<T, OtpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Otp.
     * @param {OtpCreateArgs} args - Arguments to create a Otp.
     * @example
     * // Create one Otp
     * const Otp = await prisma.otp.create({
     *   data: {
     *     // ... data to create a Otp
     *   }
     * })
     * 
     */
    create<T extends OtpCreateArgs>(args: SelectSubset<T, OtpCreateArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Otps.
     * @param {OtpCreateManyArgs} args - Arguments to create many Otps.
     * @example
     * // Create many Otps
     * const otp = await prisma.otp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OtpCreateManyArgs>(args?: SelectSubset<T, OtpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Otps and returns the data saved in the database.
     * @param {OtpCreateManyAndReturnArgs} args - Arguments to create many Otps.
     * @example
     * // Create many Otps
     * const otp = await prisma.otp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Otps and only return the `id`
     * const otpWithIdOnly = await prisma.otp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OtpCreateManyAndReturnArgs>(args?: SelectSubset<T, OtpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Otp.
     * @param {OtpDeleteArgs} args - Arguments to delete one Otp.
     * @example
     * // Delete one Otp
     * const Otp = await prisma.otp.delete({
     *   where: {
     *     // ... filter to delete one Otp
     *   }
     * })
     * 
     */
    delete<T extends OtpDeleteArgs>(args: SelectSubset<T, OtpDeleteArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Otp.
     * @param {OtpUpdateArgs} args - Arguments to update one Otp.
     * @example
     * // Update one Otp
     * const otp = await prisma.otp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OtpUpdateArgs>(args: SelectSubset<T, OtpUpdateArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Otps.
     * @param {OtpDeleteManyArgs} args - Arguments to filter Otps to delete.
     * @example
     * // Delete a few Otps
     * const { count } = await prisma.otp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OtpDeleteManyArgs>(args?: SelectSubset<T, OtpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Otps
     * const otp = await prisma.otp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OtpUpdateManyArgs>(args: SelectSubset<T, OtpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Otps and returns the data updated in the database.
     * @param {OtpUpdateManyAndReturnArgs} args - Arguments to update many Otps.
     * @example
     * // Update many Otps
     * const otp = await prisma.otp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Otps and only return the `id`
     * const otpWithIdOnly = await prisma.otp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OtpUpdateManyAndReturnArgs>(args: SelectSubset<T, OtpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Otp.
     * @param {OtpUpsertArgs} args - Arguments to update or create a Otp.
     * @example
     * // Update or create a Otp
     * const otp = await prisma.otp.upsert({
     *   create: {
     *     // ... data to create a Otp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Otp we want to update
     *   }
     * })
     */
    upsert<T extends OtpUpsertArgs>(args: SelectSubset<T, OtpUpsertArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCountArgs} args - Arguments to filter Otps to count.
     * @example
     * // Count the number of Otps
     * const count = await prisma.otp.count({
     *   where: {
     *     // ... the filter for the Otps we want to count
     *   }
     * })
    **/
    count<T extends OtpCountArgs>(
      args?: Subset<T, OtpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpAggregateArgs>(args: Subset<T, OtpAggregateArgs>): Prisma.PrismaPromise<GetOtpAggregateType<T>>

    /**
     * Group by Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpGroupByArgs['orderBy'] }
        : { orderBy?: OtpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Otp model
   */
  readonly fields: OtpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Otp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Otp model
   */
  interface OtpFieldRefs {
    readonly id: FieldRef<"Otp", 'String'>
    readonly userId: FieldRef<"Otp", 'String'>
    readonly code: FieldRef<"Otp", 'String'>
    readonly type: FieldRef<"Otp", 'OtpType'>
    readonly target: FieldRef<"Otp", 'String'>
    readonly expiresAt: FieldRef<"Otp", 'DateTime'>
    readonly consumed: FieldRef<"Otp", 'Boolean'>
    readonly createdAt: FieldRef<"Otp", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Otp findUnique
   */
  export type OtpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp findUniqueOrThrow
   */
  export type OtpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp findFirst
   */
  export type OtpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp findFirstOrThrow
   */
  export type OtpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp findMany
   */
  export type OtpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otps to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp create
   */
  export type OtpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * The data needed to create a Otp.
     */
    data: XOR<OtpCreateInput, OtpUncheckedCreateInput>
  }

  /**
   * Otp createMany
   */
  export type OtpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Otps.
     */
    data: OtpCreateManyInput | OtpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Otp createManyAndReturn
   */
  export type OtpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * The data used to create many Otps.
     */
    data: OtpCreateManyInput | OtpCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Otp update
   */
  export type OtpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * The data needed to update a Otp.
     */
    data: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
    /**
     * Choose, which Otp to update.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp updateMany
   */
  export type OtpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Otps.
     */
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyInput>
    /**
     * Filter which Otps to update
     */
    where?: OtpWhereInput
    /**
     * Limit how many Otps to update.
     */
    limit?: number
  }

  /**
   * Otp updateManyAndReturn
   */
  export type OtpUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * The data used to update Otps.
     */
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyInput>
    /**
     * Filter which Otps to update
     */
    where?: OtpWhereInput
    /**
     * Limit how many Otps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Otp upsert
   */
  export type OtpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * The filter to search for the Otp to update in case it exists.
     */
    where: OtpWhereUniqueInput
    /**
     * In case the Otp found by the `where` argument doesn't exist, create a new Otp with this data.
     */
    create: XOR<OtpCreateInput, OtpUncheckedCreateInput>
    /**
     * In case the Otp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
  }

  /**
   * Otp delete
   */
  export type OtpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter which Otp to delete.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp deleteMany
   */
  export type OtpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Otps to delete
     */
    where?: OtpWhereInput
    /**
     * Limit how many Otps to delete.
     */
    limit?: number
  }

  /**
   * Otp without action
   */
  export type OtpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
  }


  /**
   * Model ReferralCode
   */

  export type AggregateReferralCode = {
    _count: ReferralCodeCountAggregateOutputType | null
    _avg: ReferralCodeAvgAggregateOutputType | null
    _sum: ReferralCodeSumAggregateOutputType | null
    _min: ReferralCodeMinAggregateOutputType | null
    _max: ReferralCodeMaxAggregateOutputType | null
  }

  export type ReferralCodeAvgAggregateOutputType = {
    usageCount: number | null
    maxUsage: number | null
  }

  export type ReferralCodeSumAggregateOutputType = {
    usageCount: number | null
    maxUsage: number | null
  }

  export type ReferralCodeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    code: string | null
    isActive: boolean | null
    usageCount: number | null
    maxUsage: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralCodeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    code: string | null
    isActive: boolean | null
    usageCount: number | null
    maxUsage: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralCodeCountAggregateOutputType = {
    id: number
    userId: number
    code: number
    isActive: number
    usageCount: number
    maxUsage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReferralCodeAvgAggregateInputType = {
    usageCount?: true
    maxUsage?: true
  }

  export type ReferralCodeSumAggregateInputType = {
    usageCount?: true
    maxUsage?: true
  }

  export type ReferralCodeMinAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    isActive?: true
    usageCount?: true
    maxUsage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralCodeMaxAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    isActive?: true
    usageCount?: true
    maxUsage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralCodeCountAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    isActive?: true
    usageCount?: true
    maxUsage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReferralCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralCode to aggregate.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReferralCodes
    **/
    _count?: true | ReferralCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferralCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferralCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralCodeMaxAggregateInputType
  }

  export type GetReferralCodeAggregateType<T extends ReferralCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateReferralCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferralCode[P]>
      : GetScalarType<T[P], AggregateReferralCode[P]>
  }




  export type ReferralCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralCodeWhereInput
    orderBy?: ReferralCodeOrderByWithAggregationInput | ReferralCodeOrderByWithAggregationInput[]
    by: ReferralCodeScalarFieldEnum[] | ReferralCodeScalarFieldEnum
    having?: ReferralCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralCodeCountAggregateInputType | true
    _avg?: ReferralCodeAvgAggregateInputType
    _sum?: ReferralCodeSumAggregateInputType
    _min?: ReferralCodeMinAggregateInputType
    _max?: ReferralCodeMaxAggregateInputType
  }

  export type ReferralCodeGroupByOutputType = {
    id: string
    userId: string
    code: string
    isActive: boolean
    usageCount: number
    maxUsage: number | null
    createdAt: Date
    updatedAt: Date
    _count: ReferralCodeCountAggregateOutputType | null
    _avg: ReferralCodeAvgAggregateOutputType | null
    _sum: ReferralCodeSumAggregateOutputType | null
    _min: ReferralCodeMinAggregateOutputType | null
    _max: ReferralCodeMaxAggregateOutputType | null
  }

  type GetReferralCodeGroupByPayload<T extends ReferralCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralCodeGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralCodeGroupByOutputType[P]>
        }
      >
    >


  export type ReferralCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    isActive?: boolean
    usageCount?: boolean
    maxUsage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    referrals?: boolean | ReferralCode$referralsArgs<ExtArgs>
    _count?: boolean | ReferralCodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralCode"]>

  export type ReferralCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    isActive?: boolean
    usageCount?: boolean
    maxUsage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralCode"]>

  export type ReferralCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    isActive?: boolean
    usageCount?: boolean
    maxUsage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralCode"]>

  export type ReferralCodeSelectScalar = {
    id?: boolean
    userId?: boolean
    code?: boolean
    isActive?: boolean
    usageCount?: boolean
    maxUsage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReferralCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "code" | "isActive" | "usageCount" | "maxUsage" | "createdAt" | "updatedAt", ExtArgs["result"]["referralCode"]>
  export type ReferralCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    referrals?: boolean | ReferralCode$referralsArgs<ExtArgs>
    _count?: boolean | ReferralCodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReferralCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReferralCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReferralCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReferralCode"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      referrals: Prisma.$ReferralPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      code: string
      isActive: boolean
      usageCount: number
      maxUsage: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["referralCode"]>
    composites: {}
  }

  type ReferralCodeGetPayload<S extends boolean | null | undefined | ReferralCodeDefaultArgs> = $Result.GetResult<Prisma.$ReferralCodePayload, S>

  type ReferralCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferralCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferralCodeCountAggregateInputType | true
    }

  export interface ReferralCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReferralCode'], meta: { name: 'ReferralCode' } }
    /**
     * Find zero or one ReferralCode that matches the filter.
     * @param {ReferralCodeFindUniqueArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferralCodeFindUniqueArgs>(args: SelectSubset<T, ReferralCodeFindUniqueArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReferralCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferralCodeFindUniqueOrThrowArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferralCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferralCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReferralCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindFirstArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferralCodeFindFirstArgs>(args?: SelectSubset<T, ReferralCodeFindFirstArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReferralCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindFirstOrThrowArgs} args - Arguments to find a ReferralCode
     * @example
     * // Get one ReferralCode
     * const referralCode = await prisma.referralCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferralCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferralCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReferralCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReferralCodes
     * const referralCodes = await prisma.referralCode.findMany()
     * 
     * // Get first 10 ReferralCodes
     * const referralCodes = await prisma.referralCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralCodeWithIdOnly = await prisma.referralCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferralCodeFindManyArgs>(args?: SelectSubset<T, ReferralCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReferralCode.
     * @param {ReferralCodeCreateArgs} args - Arguments to create a ReferralCode.
     * @example
     * // Create one ReferralCode
     * const ReferralCode = await prisma.referralCode.create({
     *   data: {
     *     // ... data to create a ReferralCode
     *   }
     * })
     * 
     */
    create<T extends ReferralCodeCreateArgs>(args: SelectSubset<T, ReferralCodeCreateArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReferralCodes.
     * @param {ReferralCodeCreateManyArgs} args - Arguments to create many ReferralCodes.
     * @example
     * // Create many ReferralCodes
     * const referralCode = await prisma.referralCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferralCodeCreateManyArgs>(args?: SelectSubset<T, ReferralCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReferralCodes and returns the data saved in the database.
     * @param {ReferralCodeCreateManyAndReturnArgs} args - Arguments to create many ReferralCodes.
     * @example
     * // Create many ReferralCodes
     * const referralCode = await prisma.referralCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReferralCodes and only return the `id`
     * const referralCodeWithIdOnly = await prisma.referralCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferralCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferralCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReferralCode.
     * @param {ReferralCodeDeleteArgs} args - Arguments to delete one ReferralCode.
     * @example
     * // Delete one ReferralCode
     * const ReferralCode = await prisma.referralCode.delete({
     *   where: {
     *     // ... filter to delete one ReferralCode
     *   }
     * })
     * 
     */
    delete<T extends ReferralCodeDeleteArgs>(args: SelectSubset<T, ReferralCodeDeleteArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReferralCode.
     * @param {ReferralCodeUpdateArgs} args - Arguments to update one ReferralCode.
     * @example
     * // Update one ReferralCode
     * const referralCode = await prisma.referralCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferralCodeUpdateArgs>(args: SelectSubset<T, ReferralCodeUpdateArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReferralCodes.
     * @param {ReferralCodeDeleteManyArgs} args - Arguments to filter ReferralCodes to delete.
     * @example
     * // Delete a few ReferralCodes
     * const { count } = await prisma.referralCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferralCodeDeleteManyArgs>(args?: SelectSubset<T, ReferralCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReferralCodes
     * const referralCode = await prisma.referralCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferralCodeUpdateManyArgs>(args: SelectSubset<T, ReferralCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralCodes and returns the data updated in the database.
     * @param {ReferralCodeUpdateManyAndReturnArgs} args - Arguments to update many ReferralCodes.
     * @example
     * // Update many ReferralCodes
     * const referralCode = await prisma.referralCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReferralCodes and only return the `id`
     * const referralCodeWithIdOnly = await prisma.referralCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReferralCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, ReferralCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReferralCode.
     * @param {ReferralCodeUpsertArgs} args - Arguments to update or create a ReferralCode.
     * @example
     * // Update or create a ReferralCode
     * const referralCode = await prisma.referralCode.upsert({
     *   create: {
     *     // ... data to create a ReferralCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReferralCode we want to update
     *   }
     * })
     */
    upsert<T extends ReferralCodeUpsertArgs>(args: SelectSubset<T, ReferralCodeUpsertArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReferralCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeCountArgs} args - Arguments to filter ReferralCodes to count.
     * @example
     * // Count the number of ReferralCodes
     * const count = await prisma.referralCode.count({
     *   where: {
     *     // ... the filter for the ReferralCodes we want to count
     *   }
     * })
    **/
    count<T extends ReferralCodeCountArgs>(
      args?: Subset<T, ReferralCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReferralCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralCodeAggregateArgs>(args: Subset<T, ReferralCodeAggregateArgs>): Prisma.PrismaPromise<GetReferralCodeAggregateType<T>>

    /**
     * Group by ReferralCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralCodeGroupByArgs['orderBy'] }
        : { orderBy?: ReferralCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReferralCode model
   */
  readonly fields: ReferralCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReferralCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    referrals<T extends ReferralCode$referralsArgs<ExtArgs> = {}>(args?: Subset<T, ReferralCode$referralsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReferralCode model
   */
  interface ReferralCodeFieldRefs {
    readonly id: FieldRef<"ReferralCode", 'String'>
    readonly userId: FieldRef<"ReferralCode", 'String'>
    readonly code: FieldRef<"ReferralCode", 'String'>
    readonly isActive: FieldRef<"ReferralCode", 'Boolean'>
    readonly usageCount: FieldRef<"ReferralCode", 'Int'>
    readonly maxUsage: FieldRef<"ReferralCode", 'Int'>
    readonly createdAt: FieldRef<"ReferralCode", 'DateTime'>
    readonly updatedAt: FieldRef<"ReferralCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReferralCode findUnique
   */
  export type ReferralCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode findUniqueOrThrow
   */
  export type ReferralCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode findFirst
   */
  export type ReferralCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralCodes.
     */
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * ReferralCode findFirstOrThrow
   */
  export type ReferralCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCode to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralCodes.
     */
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * ReferralCode findMany
   */
  export type ReferralCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter, which ReferralCodes to fetch.
     */
    where?: ReferralCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralCodes to fetch.
     */
    orderBy?: ReferralCodeOrderByWithRelationInput | ReferralCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReferralCodes.
     */
    cursor?: ReferralCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralCodes.
     */
    skip?: number
    distinct?: ReferralCodeScalarFieldEnum | ReferralCodeScalarFieldEnum[]
  }

  /**
   * ReferralCode create
   */
  export type ReferralCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a ReferralCode.
     */
    data: XOR<ReferralCodeCreateInput, ReferralCodeUncheckedCreateInput>
  }

  /**
   * ReferralCode createMany
   */
  export type ReferralCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReferralCodes.
     */
    data: ReferralCodeCreateManyInput | ReferralCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReferralCode createManyAndReturn
   */
  export type ReferralCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * The data used to create many ReferralCodes.
     */
    data: ReferralCodeCreateManyInput | ReferralCodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReferralCode update
   */
  export type ReferralCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a ReferralCode.
     */
    data: XOR<ReferralCodeUpdateInput, ReferralCodeUncheckedUpdateInput>
    /**
     * Choose, which ReferralCode to update.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode updateMany
   */
  export type ReferralCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReferralCodes.
     */
    data: XOR<ReferralCodeUpdateManyMutationInput, ReferralCodeUncheckedUpdateManyInput>
    /**
     * Filter which ReferralCodes to update
     */
    where?: ReferralCodeWhereInput
    /**
     * Limit how many ReferralCodes to update.
     */
    limit?: number
  }

  /**
   * ReferralCode updateManyAndReturn
   */
  export type ReferralCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * The data used to update ReferralCodes.
     */
    data: XOR<ReferralCodeUpdateManyMutationInput, ReferralCodeUncheckedUpdateManyInput>
    /**
     * Filter which ReferralCodes to update
     */
    where?: ReferralCodeWhereInput
    /**
     * Limit how many ReferralCodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReferralCode upsert
   */
  export type ReferralCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the ReferralCode to update in case it exists.
     */
    where: ReferralCodeWhereUniqueInput
    /**
     * In case the ReferralCode found by the `where` argument doesn't exist, create a new ReferralCode with this data.
     */
    create: XOR<ReferralCodeCreateInput, ReferralCodeUncheckedCreateInput>
    /**
     * In case the ReferralCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralCodeUpdateInput, ReferralCodeUncheckedUpdateInput>
  }

  /**
   * ReferralCode delete
   */
  export type ReferralCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
    /**
     * Filter which ReferralCode to delete.
     */
    where: ReferralCodeWhereUniqueInput
  }

  /**
   * ReferralCode deleteMany
   */
  export type ReferralCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralCodes to delete
     */
    where?: ReferralCodeWhereInput
    /**
     * Limit how many ReferralCodes to delete.
     */
    limit?: number
  }

  /**
   * ReferralCode.referrals
   */
  export type ReferralCode$referralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    cursor?: ReferralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * ReferralCode without action
   */
  export type ReferralCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCode
     */
    select?: ReferralCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralCode
     */
    omit?: ReferralCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralCodeInclude<ExtArgs> | null
  }


  /**
   * Model Referral
   */

  export type AggregateReferral = {
    _count: ReferralCountAggregateOutputType | null
    _min: ReferralMinAggregateOutputType | null
    _max: ReferralMaxAggregateOutputType | null
  }

  export type ReferralMinAggregateOutputType = {
    id: string | null
    referrerId: string | null
    refereeId: string | null
    referralCodeId: string | null
    status: $Enums.ReferralStatus | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralMaxAggregateOutputType = {
    id: string | null
    referrerId: string | null
    refereeId: string | null
    referralCodeId: string | null
    status: $Enums.ReferralStatus | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralCountAggregateOutputType = {
    id: number
    referrerId: number
    refereeId: number
    referralCodeId: number
    status: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReferralMinAggregateInputType = {
    id?: true
    referrerId?: true
    refereeId?: true
    referralCodeId?: true
    status?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralMaxAggregateInputType = {
    id?: true
    referrerId?: true
    refereeId?: true
    referralCodeId?: true
    status?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralCountAggregateInputType = {
    id?: true
    referrerId?: true
    refereeId?: true
    referralCodeId?: true
    status?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReferralAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referral to aggregate.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referrals
    **/
    _count?: true | ReferralCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralMaxAggregateInputType
  }

  export type GetReferralAggregateType<T extends ReferralAggregateArgs> = {
        [P in keyof T & keyof AggregateReferral]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferral[P]>
      : GetScalarType<T[P], AggregateReferral[P]>
  }




  export type ReferralGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithAggregationInput | ReferralOrderByWithAggregationInput[]
    by: ReferralScalarFieldEnum[] | ReferralScalarFieldEnum
    having?: ReferralScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralCountAggregateInputType | true
    _min?: ReferralMinAggregateInputType
    _max?: ReferralMaxAggregateInputType
  }

  export type ReferralGroupByOutputType = {
    id: string
    referrerId: string
    refereeId: string
    referralCodeId: string
    status: $Enums.ReferralStatus
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ReferralCountAggregateOutputType | null
    _min: ReferralMinAggregateOutputType | null
    _max: ReferralMaxAggregateOutputType | null
  }

  type GetReferralGroupByPayload<T extends ReferralGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralGroupByOutputType[P]>
        }
      >
    >


  export type ReferralSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referrerId?: boolean
    refereeId?: boolean
    referralCodeId?: boolean
    status?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    referee?: boolean | UserDefaultArgs<ExtArgs>
    referralCode?: boolean | ReferralCodeDefaultArgs<ExtArgs>
    rewards?: boolean | Referral$rewardsArgs<ExtArgs>
    _count?: boolean | ReferralCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referrerId?: boolean
    refereeId?: boolean
    referralCodeId?: boolean
    status?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    referee?: boolean | UserDefaultArgs<ExtArgs>
    referralCode?: boolean | ReferralCodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referrerId?: boolean
    refereeId?: boolean
    referralCodeId?: boolean
    status?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    referee?: boolean | UserDefaultArgs<ExtArgs>
    referralCode?: boolean | ReferralCodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectScalar = {
    id?: boolean
    referrerId?: boolean
    refereeId?: boolean
    referralCodeId?: boolean
    status?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReferralOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "referrerId" | "refereeId" | "referralCodeId" | "status" | "completedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["referral"]>
  export type ReferralInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    referee?: boolean | UserDefaultArgs<ExtArgs>
    referralCode?: boolean | ReferralCodeDefaultArgs<ExtArgs>
    rewards?: boolean | Referral$rewardsArgs<ExtArgs>
    _count?: boolean | ReferralCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReferralIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    referee?: boolean | UserDefaultArgs<ExtArgs>
    referralCode?: boolean | ReferralCodeDefaultArgs<ExtArgs>
  }
  export type ReferralIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | UserDefaultArgs<ExtArgs>
    referee?: boolean | UserDefaultArgs<ExtArgs>
    referralCode?: boolean | ReferralCodeDefaultArgs<ExtArgs>
  }

  export type $ReferralPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Referral"
    objects: {
      referrer: Prisma.$UserPayload<ExtArgs>
      referee: Prisma.$UserPayload<ExtArgs>
      referralCode: Prisma.$ReferralCodePayload<ExtArgs>
      rewards: Prisma.$ReferralRewardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      referrerId: string
      refereeId: string
      referralCodeId: string
      status: $Enums.ReferralStatus
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["referral"]>
    composites: {}
  }

  type ReferralGetPayload<S extends boolean | null | undefined | ReferralDefaultArgs> = $Result.GetResult<Prisma.$ReferralPayload, S>

  type ReferralCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferralFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferralCountAggregateInputType | true
    }

  export interface ReferralDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Referral'], meta: { name: 'Referral' } }
    /**
     * Find zero or one Referral that matches the filter.
     * @param {ReferralFindUniqueArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferralFindUniqueArgs>(args: SelectSubset<T, ReferralFindUniqueArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Referral that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferralFindUniqueOrThrowArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferralFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferralFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referral that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindFirstArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferralFindFirstArgs>(args?: SelectSubset<T, ReferralFindFirstArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referral that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindFirstOrThrowArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferralFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferralFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Referrals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referrals
     * const referrals = await prisma.referral.findMany()
     * 
     * // Get first 10 Referrals
     * const referrals = await prisma.referral.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralWithIdOnly = await prisma.referral.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferralFindManyArgs>(args?: SelectSubset<T, ReferralFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Referral.
     * @param {ReferralCreateArgs} args - Arguments to create a Referral.
     * @example
     * // Create one Referral
     * const Referral = await prisma.referral.create({
     *   data: {
     *     // ... data to create a Referral
     *   }
     * })
     * 
     */
    create<T extends ReferralCreateArgs>(args: SelectSubset<T, ReferralCreateArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Referrals.
     * @param {ReferralCreateManyArgs} args - Arguments to create many Referrals.
     * @example
     * // Create many Referrals
     * const referral = await prisma.referral.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferralCreateManyArgs>(args?: SelectSubset<T, ReferralCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Referrals and returns the data saved in the database.
     * @param {ReferralCreateManyAndReturnArgs} args - Arguments to create many Referrals.
     * @example
     * // Create many Referrals
     * const referral = await prisma.referral.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Referrals and only return the `id`
     * const referralWithIdOnly = await prisma.referral.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferralCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferralCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Referral.
     * @param {ReferralDeleteArgs} args - Arguments to delete one Referral.
     * @example
     * // Delete one Referral
     * const Referral = await prisma.referral.delete({
     *   where: {
     *     // ... filter to delete one Referral
     *   }
     * })
     * 
     */
    delete<T extends ReferralDeleteArgs>(args: SelectSubset<T, ReferralDeleteArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Referral.
     * @param {ReferralUpdateArgs} args - Arguments to update one Referral.
     * @example
     * // Update one Referral
     * const referral = await prisma.referral.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferralUpdateArgs>(args: SelectSubset<T, ReferralUpdateArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Referrals.
     * @param {ReferralDeleteManyArgs} args - Arguments to filter Referrals to delete.
     * @example
     * // Delete a few Referrals
     * const { count } = await prisma.referral.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferralDeleteManyArgs>(args?: SelectSubset<T, ReferralDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referrals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referrals
     * const referral = await prisma.referral.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferralUpdateManyArgs>(args: SelectSubset<T, ReferralUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referrals and returns the data updated in the database.
     * @param {ReferralUpdateManyAndReturnArgs} args - Arguments to update many Referrals.
     * @example
     * // Update many Referrals
     * const referral = await prisma.referral.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Referrals and only return the `id`
     * const referralWithIdOnly = await prisma.referral.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReferralUpdateManyAndReturnArgs>(args: SelectSubset<T, ReferralUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Referral.
     * @param {ReferralUpsertArgs} args - Arguments to update or create a Referral.
     * @example
     * // Update or create a Referral
     * const referral = await prisma.referral.upsert({
     *   create: {
     *     // ... data to create a Referral
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referral we want to update
     *   }
     * })
     */
    upsert<T extends ReferralUpsertArgs>(args: SelectSubset<T, ReferralUpsertArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Referrals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCountArgs} args - Arguments to filter Referrals to count.
     * @example
     * // Count the number of Referrals
     * const count = await prisma.referral.count({
     *   where: {
     *     // ... the filter for the Referrals we want to count
     *   }
     * })
    **/
    count<T extends ReferralCountArgs>(
      args?: Subset<T, ReferralCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralAggregateArgs>(args: Subset<T, ReferralAggregateArgs>): Prisma.PrismaPromise<GetReferralAggregateType<T>>

    /**
     * Group by Referral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralGroupByArgs['orderBy'] }
        : { orderBy?: ReferralGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Referral model
   */
  readonly fields: ReferralFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Referral.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referrer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    referee<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    referralCode<T extends ReferralCodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReferralCodeDefaultArgs<ExtArgs>>): Prisma__ReferralCodeClient<$Result.GetResult<Prisma.$ReferralCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rewards<T extends Referral$rewardsArgs<ExtArgs> = {}>(args?: Subset<T, Referral$rewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Referral model
   */
  interface ReferralFieldRefs {
    readonly id: FieldRef<"Referral", 'String'>
    readonly referrerId: FieldRef<"Referral", 'String'>
    readonly refereeId: FieldRef<"Referral", 'String'>
    readonly referralCodeId: FieldRef<"Referral", 'String'>
    readonly status: FieldRef<"Referral", 'ReferralStatus'>
    readonly completedAt: FieldRef<"Referral", 'DateTime'>
    readonly createdAt: FieldRef<"Referral", 'DateTime'>
    readonly updatedAt: FieldRef<"Referral", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Referral findUnique
   */
  export type ReferralFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral findUniqueOrThrow
   */
  export type ReferralFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral findFirst
   */
  export type ReferralFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrals.
     */
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral findFirstOrThrow
   */
  export type ReferralFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrals.
     */
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral findMany
   */
  export type ReferralFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referrals to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral create
   */
  export type ReferralCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * The data needed to create a Referral.
     */
    data: XOR<ReferralCreateInput, ReferralUncheckedCreateInput>
  }

  /**
   * Referral createMany
   */
  export type ReferralCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Referrals.
     */
    data: ReferralCreateManyInput | ReferralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Referral createManyAndReturn
   */
  export type ReferralCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data used to create many Referrals.
     */
    data: ReferralCreateManyInput | ReferralCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Referral update
   */
  export type ReferralUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * The data needed to update a Referral.
     */
    data: XOR<ReferralUpdateInput, ReferralUncheckedUpdateInput>
    /**
     * Choose, which Referral to update.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral updateMany
   */
  export type ReferralUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Referrals.
     */
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyInput>
    /**
     * Filter which Referrals to update
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to update.
     */
    limit?: number
  }

  /**
   * Referral updateManyAndReturn
   */
  export type ReferralUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data used to update Referrals.
     */
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyInput>
    /**
     * Filter which Referrals to update
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Referral upsert
   */
  export type ReferralUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * The filter to search for the Referral to update in case it exists.
     */
    where: ReferralWhereUniqueInput
    /**
     * In case the Referral found by the `where` argument doesn't exist, create a new Referral with this data.
     */
    create: XOR<ReferralCreateInput, ReferralUncheckedCreateInput>
    /**
     * In case the Referral was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralUpdateInput, ReferralUncheckedUpdateInput>
  }

  /**
   * Referral delete
   */
  export type ReferralDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter which Referral to delete.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral deleteMany
   */
  export type ReferralDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referrals to delete
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to delete.
     */
    limit?: number
  }

  /**
   * Referral.rewards
   */
  export type Referral$rewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    where?: ReferralRewardWhereInput
    orderBy?: ReferralRewardOrderByWithRelationInput | ReferralRewardOrderByWithRelationInput[]
    cursor?: ReferralRewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralRewardScalarFieldEnum | ReferralRewardScalarFieldEnum[]
  }

  /**
   * Referral without action
   */
  export type ReferralDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
  }


  /**
   * Model ReferralReward
   */

  export type AggregateReferralReward = {
    _count: ReferralRewardCountAggregateOutputType | null
    _avg: ReferralRewardAvgAggregateOutputType | null
    _sum: ReferralRewardSumAggregateOutputType | null
    _min: ReferralRewardMinAggregateOutputType | null
    _max: ReferralRewardMaxAggregateOutputType | null
  }

  export type ReferralRewardAvgAggregateOutputType = {
    amount: number | null
  }

  export type ReferralRewardSumAggregateOutputType = {
    amount: number | null
  }

  export type ReferralRewardMinAggregateOutputType = {
    id: string | null
    referralId: string | null
    type: $Enums.RewardType | null
    amount: number | null
    currency: string | null
    description: string | null
    isClaimed: boolean | null
    claimedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralRewardMaxAggregateOutputType = {
    id: string | null
    referralId: string | null
    type: $Enums.RewardType | null
    amount: number | null
    currency: string | null
    description: string | null
    isClaimed: boolean | null
    claimedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReferralRewardCountAggregateOutputType = {
    id: number
    referralId: number
    type: number
    amount: number
    currency: number
    description: number
    isClaimed: number
    claimedAt: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReferralRewardAvgAggregateInputType = {
    amount?: true
  }

  export type ReferralRewardSumAggregateInputType = {
    amount?: true
  }

  export type ReferralRewardMinAggregateInputType = {
    id?: true
    referralId?: true
    type?: true
    amount?: true
    currency?: true
    description?: true
    isClaimed?: true
    claimedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralRewardMaxAggregateInputType = {
    id?: true
    referralId?: true
    type?: true
    amount?: true
    currency?: true
    description?: true
    isClaimed?: true
    claimedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReferralRewardCountAggregateInputType = {
    id?: true
    referralId?: true
    type?: true
    amount?: true
    currency?: true
    description?: true
    isClaimed?: true
    claimedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReferralRewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralReward to aggregate.
     */
    where?: ReferralRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralRewards to fetch.
     */
    orderBy?: ReferralRewardOrderByWithRelationInput | ReferralRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReferralRewards
    **/
    _count?: true | ReferralRewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferralRewardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferralRewardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralRewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralRewardMaxAggregateInputType
  }

  export type GetReferralRewardAggregateType<T extends ReferralRewardAggregateArgs> = {
        [P in keyof T & keyof AggregateReferralReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferralReward[P]>
      : GetScalarType<T[P], AggregateReferralReward[P]>
  }




  export type ReferralRewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralRewardWhereInput
    orderBy?: ReferralRewardOrderByWithAggregationInput | ReferralRewardOrderByWithAggregationInput[]
    by: ReferralRewardScalarFieldEnum[] | ReferralRewardScalarFieldEnum
    having?: ReferralRewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralRewardCountAggregateInputType | true
    _avg?: ReferralRewardAvgAggregateInputType
    _sum?: ReferralRewardSumAggregateInputType
    _min?: ReferralRewardMinAggregateInputType
    _max?: ReferralRewardMaxAggregateInputType
  }

  export type ReferralRewardGroupByOutputType = {
    id: string
    referralId: string
    type: $Enums.RewardType
    amount: number
    currency: string | null
    description: string
    isClaimed: boolean
    claimedAt: Date | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ReferralRewardCountAggregateOutputType | null
    _avg: ReferralRewardAvgAggregateOutputType | null
    _sum: ReferralRewardSumAggregateOutputType | null
    _min: ReferralRewardMinAggregateOutputType | null
    _max: ReferralRewardMaxAggregateOutputType | null
  }

  type GetReferralRewardGroupByPayload<T extends ReferralRewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralRewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralRewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralRewardGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralRewardGroupByOutputType[P]>
        }
      >
    >


  export type ReferralRewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referralId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    isClaimed?: boolean
    claimedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    referral?: boolean | ReferralDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralReward"]>

  export type ReferralRewardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referralId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    isClaimed?: boolean
    claimedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    referral?: boolean | ReferralDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralReward"]>

  export type ReferralRewardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referralId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    isClaimed?: boolean
    claimedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    referral?: boolean | ReferralDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referralReward"]>

  export type ReferralRewardSelectScalar = {
    id?: boolean
    referralId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    isClaimed?: boolean
    claimedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReferralRewardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "referralId" | "type" | "amount" | "currency" | "description" | "isClaimed" | "claimedAt" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["referralReward"]>
  export type ReferralRewardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referral?: boolean | ReferralDefaultArgs<ExtArgs>
  }
  export type ReferralRewardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referral?: boolean | ReferralDefaultArgs<ExtArgs>
  }
  export type ReferralRewardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referral?: boolean | ReferralDefaultArgs<ExtArgs>
  }

  export type $ReferralRewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReferralReward"
    objects: {
      referral: Prisma.$ReferralPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      referralId: string
      type: $Enums.RewardType
      amount: number
      currency: string | null
      description: string
      isClaimed: boolean
      claimedAt: Date | null
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["referralReward"]>
    composites: {}
  }

  type ReferralRewardGetPayload<S extends boolean | null | undefined | ReferralRewardDefaultArgs> = $Result.GetResult<Prisma.$ReferralRewardPayload, S>

  type ReferralRewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferralRewardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferralRewardCountAggregateInputType | true
    }

  export interface ReferralRewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReferralReward'], meta: { name: 'ReferralReward' } }
    /**
     * Find zero or one ReferralReward that matches the filter.
     * @param {ReferralRewardFindUniqueArgs} args - Arguments to find a ReferralReward
     * @example
     * // Get one ReferralReward
     * const referralReward = await prisma.referralReward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferralRewardFindUniqueArgs>(args: SelectSubset<T, ReferralRewardFindUniqueArgs<ExtArgs>>): Prisma__ReferralRewardClient<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReferralReward that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferralRewardFindUniqueOrThrowArgs} args - Arguments to find a ReferralReward
     * @example
     * // Get one ReferralReward
     * const referralReward = await prisma.referralReward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferralRewardFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferralRewardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferralRewardClient<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReferralReward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralRewardFindFirstArgs} args - Arguments to find a ReferralReward
     * @example
     * // Get one ReferralReward
     * const referralReward = await prisma.referralReward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferralRewardFindFirstArgs>(args?: SelectSubset<T, ReferralRewardFindFirstArgs<ExtArgs>>): Prisma__ReferralRewardClient<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReferralReward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralRewardFindFirstOrThrowArgs} args - Arguments to find a ReferralReward
     * @example
     * // Get one ReferralReward
     * const referralReward = await prisma.referralReward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferralRewardFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferralRewardFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferralRewardClient<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReferralRewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralRewardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReferralRewards
     * const referralRewards = await prisma.referralReward.findMany()
     * 
     * // Get first 10 ReferralRewards
     * const referralRewards = await prisma.referralReward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralRewardWithIdOnly = await prisma.referralReward.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferralRewardFindManyArgs>(args?: SelectSubset<T, ReferralRewardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReferralReward.
     * @param {ReferralRewardCreateArgs} args - Arguments to create a ReferralReward.
     * @example
     * // Create one ReferralReward
     * const ReferralReward = await prisma.referralReward.create({
     *   data: {
     *     // ... data to create a ReferralReward
     *   }
     * })
     * 
     */
    create<T extends ReferralRewardCreateArgs>(args: SelectSubset<T, ReferralRewardCreateArgs<ExtArgs>>): Prisma__ReferralRewardClient<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReferralRewards.
     * @param {ReferralRewardCreateManyArgs} args - Arguments to create many ReferralRewards.
     * @example
     * // Create many ReferralRewards
     * const referralReward = await prisma.referralReward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferralRewardCreateManyArgs>(args?: SelectSubset<T, ReferralRewardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReferralRewards and returns the data saved in the database.
     * @param {ReferralRewardCreateManyAndReturnArgs} args - Arguments to create many ReferralRewards.
     * @example
     * // Create many ReferralRewards
     * const referralReward = await prisma.referralReward.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReferralRewards and only return the `id`
     * const referralRewardWithIdOnly = await prisma.referralReward.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferralRewardCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferralRewardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReferralReward.
     * @param {ReferralRewardDeleteArgs} args - Arguments to delete one ReferralReward.
     * @example
     * // Delete one ReferralReward
     * const ReferralReward = await prisma.referralReward.delete({
     *   where: {
     *     // ... filter to delete one ReferralReward
     *   }
     * })
     * 
     */
    delete<T extends ReferralRewardDeleteArgs>(args: SelectSubset<T, ReferralRewardDeleteArgs<ExtArgs>>): Prisma__ReferralRewardClient<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReferralReward.
     * @param {ReferralRewardUpdateArgs} args - Arguments to update one ReferralReward.
     * @example
     * // Update one ReferralReward
     * const referralReward = await prisma.referralReward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferralRewardUpdateArgs>(args: SelectSubset<T, ReferralRewardUpdateArgs<ExtArgs>>): Prisma__ReferralRewardClient<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReferralRewards.
     * @param {ReferralRewardDeleteManyArgs} args - Arguments to filter ReferralRewards to delete.
     * @example
     * // Delete a few ReferralRewards
     * const { count } = await prisma.referralReward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferralRewardDeleteManyArgs>(args?: SelectSubset<T, ReferralRewardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralRewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReferralRewards
     * const referralReward = await prisma.referralReward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferralRewardUpdateManyArgs>(args: SelectSubset<T, ReferralRewardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferralRewards and returns the data updated in the database.
     * @param {ReferralRewardUpdateManyAndReturnArgs} args - Arguments to update many ReferralRewards.
     * @example
     * // Update many ReferralRewards
     * const referralReward = await prisma.referralReward.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReferralRewards and only return the `id`
     * const referralRewardWithIdOnly = await prisma.referralReward.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReferralRewardUpdateManyAndReturnArgs>(args: SelectSubset<T, ReferralRewardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReferralReward.
     * @param {ReferralRewardUpsertArgs} args - Arguments to update or create a ReferralReward.
     * @example
     * // Update or create a ReferralReward
     * const referralReward = await prisma.referralReward.upsert({
     *   create: {
     *     // ... data to create a ReferralReward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReferralReward we want to update
     *   }
     * })
     */
    upsert<T extends ReferralRewardUpsertArgs>(args: SelectSubset<T, ReferralRewardUpsertArgs<ExtArgs>>): Prisma__ReferralRewardClient<$Result.GetResult<Prisma.$ReferralRewardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReferralRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralRewardCountArgs} args - Arguments to filter ReferralRewards to count.
     * @example
     * // Count the number of ReferralRewards
     * const count = await prisma.referralReward.count({
     *   where: {
     *     // ... the filter for the ReferralRewards we want to count
     *   }
     * })
    **/
    count<T extends ReferralRewardCountArgs>(
      args?: Subset<T, ReferralRewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralRewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReferralReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralRewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralRewardAggregateArgs>(args: Subset<T, ReferralRewardAggregateArgs>): Prisma.PrismaPromise<GetReferralRewardAggregateType<T>>

    /**
     * Group by ReferralReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralRewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralRewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralRewardGroupByArgs['orderBy'] }
        : { orderBy?: ReferralRewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralRewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReferralReward model
   */
  readonly fields: ReferralRewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReferralReward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralRewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referral<T extends ReferralDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReferralDefaultArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReferralReward model
   */
  interface ReferralRewardFieldRefs {
    readonly id: FieldRef<"ReferralReward", 'String'>
    readonly referralId: FieldRef<"ReferralReward", 'String'>
    readonly type: FieldRef<"ReferralReward", 'RewardType'>
    readonly amount: FieldRef<"ReferralReward", 'Int'>
    readonly currency: FieldRef<"ReferralReward", 'String'>
    readonly description: FieldRef<"ReferralReward", 'String'>
    readonly isClaimed: FieldRef<"ReferralReward", 'Boolean'>
    readonly claimedAt: FieldRef<"ReferralReward", 'DateTime'>
    readonly expiresAt: FieldRef<"ReferralReward", 'DateTime'>
    readonly createdAt: FieldRef<"ReferralReward", 'DateTime'>
    readonly updatedAt: FieldRef<"ReferralReward", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReferralReward findUnique
   */
  export type ReferralRewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    /**
     * Filter, which ReferralReward to fetch.
     */
    where: ReferralRewardWhereUniqueInput
  }

  /**
   * ReferralReward findUniqueOrThrow
   */
  export type ReferralRewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    /**
     * Filter, which ReferralReward to fetch.
     */
    where: ReferralRewardWhereUniqueInput
  }

  /**
   * ReferralReward findFirst
   */
  export type ReferralRewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    /**
     * Filter, which ReferralReward to fetch.
     */
    where?: ReferralRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralRewards to fetch.
     */
    orderBy?: ReferralRewardOrderByWithRelationInput | ReferralRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralRewards.
     */
    cursor?: ReferralRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralRewards.
     */
    distinct?: ReferralRewardScalarFieldEnum | ReferralRewardScalarFieldEnum[]
  }

  /**
   * ReferralReward findFirstOrThrow
   */
  export type ReferralRewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    /**
     * Filter, which ReferralReward to fetch.
     */
    where?: ReferralRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralRewards to fetch.
     */
    orderBy?: ReferralRewardOrderByWithRelationInput | ReferralRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferralRewards.
     */
    cursor?: ReferralRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferralRewards.
     */
    distinct?: ReferralRewardScalarFieldEnum | ReferralRewardScalarFieldEnum[]
  }

  /**
   * ReferralReward findMany
   */
  export type ReferralRewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    /**
     * Filter, which ReferralRewards to fetch.
     */
    where?: ReferralRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferralRewards to fetch.
     */
    orderBy?: ReferralRewardOrderByWithRelationInput | ReferralRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReferralRewards.
     */
    cursor?: ReferralRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferralRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferralRewards.
     */
    skip?: number
    distinct?: ReferralRewardScalarFieldEnum | ReferralRewardScalarFieldEnum[]
  }

  /**
   * ReferralReward create
   */
  export type ReferralRewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    /**
     * The data needed to create a ReferralReward.
     */
    data: XOR<ReferralRewardCreateInput, ReferralRewardUncheckedCreateInput>
  }

  /**
   * ReferralReward createMany
   */
  export type ReferralRewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReferralRewards.
     */
    data: ReferralRewardCreateManyInput | ReferralRewardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReferralReward createManyAndReturn
   */
  export type ReferralRewardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * The data used to create many ReferralRewards.
     */
    data: ReferralRewardCreateManyInput | ReferralRewardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReferralReward update
   */
  export type ReferralRewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    /**
     * The data needed to update a ReferralReward.
     */
    data: XOR<ReferralRewardUpdateInput, ReferralRewardUncheckedUpdateInput>
    /**
     * Choose, which ReferralReward to update.
     */
    where: ReferralRewardWhereUniqueInput
  }

  /**
   * ReferralReward updateMany
   */
  export type ReferralRewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReferralRewards.
     */
    data: XOR<ReferralRewardUpdateManyMutationInput, ReferralRewardUncheckedUpdateManyInput>
    /**
     * Filter which ReferralRewards to update
     */
    where?: ReferralRewardWhereInput
    /**
     * Limit how many ReferralRewards to update.
     */
    limit?: number
  }

  /**
   * ReferralReward updateManyAndReturn
   */
  export type ReferralRewardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * The data used to update ReferralRewards.
     */
    data: XOR<ReferralRewardUpdateManyMutationInput, ReferralRewardUncheckedUpdateManyInput>
    /**
     * Filter which ReferralRewards to update
     */
    where?: ReferralRewardWhereInput
    /**
     * Limit how many ReferralRewards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReferralReward upsert
   */
  export type ReferralRewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    /**
     * The filter to search for the ReferralReward to update in case it exists.
     */
    where: ReferralRewardWhereUniqueInput
    /**
     * In case the ReferralReward found by the `where` argument doesn't exist, create a new ReferralReward with this data.
     */
    create: XOR<ReferralRewardCreateInput, ReferralRewardUncheckedCreateInput>
    /**
     * In case the ReferralReward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralRewardUpdateInput, ReferralRewardUncheckedUpdateInput>
  }

  /**
   * ReferralReward delete
   */
  export type ReferralRewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
    /**
     * Filter which ReferralReward to delete.
     */
    where: ReferralRewardWhereUniqueInput
  }

  /**
   * ReferralReward deleteMany
   */
  export type ReferralRewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferralRewards to delete
     */
    where?: ReferralRewardWhereInput
    /**
     * Limit how many ReferralRewards to delete.
     */
    limit?: number
  }

  /**
   * ReferralReward without action
   */
  export type ReferralRewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralReward
     */
    select?: ReferralRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferralReward
     */
    omit?: ReferralRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralRewardInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    emailVerified: 'emailVerified',
    phoneVerified: 'phoneVerified',
    hashedPassword: 'hashedPassword',
    fullName: 'fullName',
    role: 'role',
    streamId: 'streamId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    trialStartedAt: 'trialStartedAt',
    trialEndsAt: 'trialEndsAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StreamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    code: 'code',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StreamScalarFieldEnum = (typeof StreamScalarFieldEnum)[keyof typeof StreamScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    streamId: 'streamId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const TopicScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    subjectId: 'subjectId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TopicScalarFieldEnum = (typeof TopicScalarFieldEnum)[keyof typeof TopicScalarFieldEnum]


  export const SubtopicScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    topicId: 'topicId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubtopicScalarFieldEnum = (typeof SubtopicScalarFieldEnum)[keyof typeof SubtopicScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    stem: 'stem',
    explanation: 'explanation',
    difficulty: 'difficulty',
    yearAppeared: 'yearAppeared',
    isPreviousYear: 'isPreviousYear',
    isAIGenerated: 'isAIGenerated',
    aiPrompt: 'aiPrompt',
    subjectId: 'subjectId',
    topicId: 'topicId',
    subtopicId: 'subtopicId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const QuestionOptionScalarFieldEnum: {
    id: 'id',
    questionId: 'questionId',
    text: 'text',
    isCorrect: 'isCorrect',
    order: 'order'
  };

  export type QuestionOptionScalarFieldEnum = (typeof QuestionOptionScalarFieldEnum)[keyof typeof QuestionOptionScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const QuestionTagScalarFieldEnum: {
    questionId: 'questionId',
    tagId: 'tagId'
  };

  export type QuestionTagScalarFieldEnum = (typeof QuestionTagScalarFieldEnum)[keyof typeof QuestionTagScalarFieldEnum]


  export const QuestionReportScalarFieldEnum: {
    id: 'id',
    questionId: 'questionId',
    userId: 'userId',
    reportType: 'reportType',
    reason: 'reason',
    description: 'description',
    status: 'status',
    alternativeExplanation: 'alternativeExplanation',
    suggestedAnswer: 'suggestedAnswer',
    reviewedById: 'reviewedById',
    reviewedAt: 'reviewedAt',
    reviewNotes: 'reviewNotes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionReportScalarFieldEnum = (typeof QuestionReportScalarFieldEnum)[keyof typeof QuestionReportScalarFieldEnum]


  export const QuestionReportOptionScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    text: 'text',
    isCorrect: 'isCorrect',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionReportOptionScalarFieldEnum = (typeof QuestionReportOptionScalarFieldEnum)[keyof typeof QuestionReportOptionScalarFieldEnum]


  export const QuestionAlternativeExplanationScalarFieldEnum: {
    id: 'id',
    questionId: 'questionId',
    explanation: 'explanation',
    source: 'source',
    reportId: 'reportId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionAlternativeExplanationScalarFieldEnum = (typeof QuestionAlternativeExplanationScalarFieldEnum)[keyof typeof QuestionAlternativeExplanationScalarFieldEnum]


  export const ExamPaperScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    subjectIds: 'subjectIds',
    topicIds: 'topicIds',
    subtopicIds: 'subtopicIds',
    questionIds: 'questionIds',
    timeLimitMin: 'timeLimitMin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExamPaperScalarFieldEnum = (typeof ExamPaperScalarFieldEnum)[keyof typeof ExamPaperScalarFieldEnum]


  export const ExamSubmissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    examPaperId: 'examPaperId',
    startedAt: 'startedAt',
    submittedAt: 'submittedAt',
    totalQuestions: 'totalQuestions',
    correctCount: 'correctCount',
    scorePercent: 'scorePercent'
  };

  export type ExamSubmissionScalarFieldEnum = (typeof ExamSubmissionScalarFieldEnum)[keyof typeof ExamSubmissionScalarFieldEnum]


  export const ExamAnswerScalarFieldEnum: {
    id: 'id',
    submissionId: 'submissionId',
    questionId: 'questionId',
    selectedOptionId: 'selectedOptionId',
    isCorrect: 'isCorrect'
  };

  export type ExamAnswerScalarFieldEnum = (typeof ExamAnswerScalarFieldEnum)[keyof typeof ExamAnswerScalarFieldEnum]


  export const PlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    priceCents: 'priceCents',
    currency: 'currency',
    interval: 'interval',
    planType: 'planType',
    stripePriceId: 'stripePriceId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlanScalarFieldEnum = (typeof PlanScalarFieldEnum)[keyof typeof PlanScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    planId: 'planId',
    status: 'status',
    startedAt: 'startedAt',
    endsAt: 'endsAt',
    stripeCustomerId: 'stripeCustomerId',
    stripeSubId: 'stripeSubId',
    stripeStatus: 'stripeStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const OtpScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    code: 'code',
    type: 'type',
    target: 'target',
    expiresAt: 'expiresAt',
    consumed: 'consumed',
    createdAt: 'createdAt'
  };

  export type OtpScalarFieldEnum = (typeof OtpScalarFieldEnum)[keyof typeof OtpScalarFieldEnum]


  export const ReferralCodeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    code: 'code',
    isActive: 'isActive',
    usageCount: 'usageCount',
    maxUsage: 'maxUsage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReferralCodeScalarFieldEnum = (typeof ReferralCodeScalarFieldEnum)[keyof typeof ReferralCodeScalarFieldEnum]


  export const ReferralScalarFieldEnum: {
    id: 'id',
    referrerId: 'referrerId',
    refereeId: 'refereeId',
    referralCodeId: 'referralCodeId',
    status: 'status',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReferralScalarFieldEnum = (typeof ReferralScalarFieldEnum)[keyof typeof ReferralScalarFieldEnum]


  export const ReferralRewardScalarFieldEnum: {
    id: 'id',
    referralId: 'referralId',
    type: 'type',
    amount: 'amount',
    currency: 'currency',
    description: 'description',
    isClaimed: 'isClaimed',
    claimedAt: 'claimedAt',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReferralRewardScalarFieldEnum = (typeof ReferralRewardScalarFieldEnum)[keyof typeof ReferralRewardScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Difficulty'
   */
  export type EnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty'>
    


  /**
   * Reference to a field of type 'Difficulty[]'
   */
  export type ListEnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'QuestionReportType'
   */
  export type EnumQuestionReportTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionReportType'>
    


  /**
   * Reference to a field of type 'QuestionReportType[]'
   */
  export type ListEnumQuestionReportTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionReportType[]'>
    


  /**
   * Reference to a field of type 'ReportStatus'
   */
  export type EnumReportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportStatus'>
    


  /**
   * Reference to a field of type 'ReportStatus[]'
   */
  export type ListEnumReportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'PlanInterval'
   */
  export type EnumPlanIntervalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanInterval'>
    


  /**
   * Reference to a field of type 'PlanInterval[]'
   */
  export type ListEnumPlanIntervalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanInterval[]'>
    


  /**
   * Reference to a field of type 'PlanType'
   */
  export type EnumPlanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanType'>
    


  /**
   * Reference to a field of type 'PlanType[]'
   */
  export type ListEnumPlanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanType[]'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus'
   */
  export type EnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus[]'
   */
  export type ListEnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus[]'>
    


  /**
   * Reference to a field of type 'OtpType'
   */
  export type EnumOtpTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OtpType'>
    


  /**
   * Reference to a field of type 'OtpType[]'
   */
  export type ListEnumOtpTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OtpType[]'>
    


  /**
   * Reference to a field of type 'ReferralStatus'
   */
  export type EnumReferralStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReferralStatus'>
    


  /**
   * Reference to a field of type 'ReferralStatus[]'
   */
  export type ListEnumReferralStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReferralStatus[]'>
    


  /**
   * Reference to a field of type 'RewardType'
   */
  export type EnumRewardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardType'>
    


  /**
   * Reference to a field of type 'RewardType[]'
   */
  export type ListEnumRewardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    phoneVerified?: BoolFilter<"User"> | boolean
    hashedPassword?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    streamId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    trialStartedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    trialEndsAt?: DateTimeNullableFilter<"User"> | Date | string | null
    stream?: XOR<StreamNullableScalarRelationFilter, StreamWhereInput> | null
    subscriptions?: SubscriptionListRelationFilter
    examSubmissions?: ExamSubmissionListRelationFilter
    otps?: OtpListRelationFilter
    referralCode?: XOR<ReferralCodeNullableScalarRelationFilter, ReferralCodeWhereInput> | null
    referralsMade?: ReferralListRelationFilter
    referralReceived?: XOR<ReferralNullableScalarRelationFilter, ReferralWhereInput> | null
    questionReports?: QuestionReportListRelationFilter
    reviewedReports?: QuestionReportListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    hashedPassword?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    streamId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trialStartedAt?: SortOrderInput | SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    stream?: StreamOrderByWithRelationInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    examSubmissions?: ExamSubmissionOrderByRelationAggregateInput
    otps?: OtpOrderByRelationAggregateInput
    referralCode?: ReferralCodeOrderByWithRelationInput
    referralsMade?: ReferralOrderByRelationAggregateInput
    referralReceived?: ReferralOrderByWithRelationInput
    questionReports?: QuestionReportOrderByRelationAggregateInput
    reviewedReports?: QuestionReportOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    emailVerified?: BoolFilter<"User"> | boolean
    phoneVerified?: BoolFilter<"User"> | boolean
    hashedPassword?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    streamId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    trialStartedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    trialEndsAt?: DateTimeNullableFilter<"User"> | Date | string | null
    stream?: XOR<StreamNullableScalarRelationFilter, StreamWhereInput> | null
    subscriptions?: SubscriptionListRelationFilter
    examSubmissions?: ExamSubmissionListRelationFilter
    otps?: OtpListRelationFilter
    referralCode?: XOR<ReferralCodeNullableScalarRelationFilter, ReferralCodeWhereInput> | null
    referralsMade?: ReferralListRelationFilter
    referralReceived?: XOR<ReferralNullableScalarRelationFilter, ReferralWhereInput> | null
    questionReports?: QuestionReportListRelationFilter
    reviewedReports?: QuestionReportListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    hashedPassword?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    streamId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trialStartedAt?: SortOrderInput | SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    phoneVerified?: BoolWithAggregatesFilter<"User"> | boolean
    hashedPassword?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    streamId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    trialStartedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    trialEndsAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type StreamWhereInput = {
    AND?: StreamWhereInput | StreamWhereInput[]
    OR?: StreamWhereInput[]
    NOT?: StreamWhereInput | StreamWhereInput[]
    id?: StringFilter<"Stream"> | string
    name?: StringFilter<"Stream"> | string
    description?: StringNullableFilter<"Stream"> | string | null
    code?: StringFilter<"Stream"> | string
    isActive?: BoolFilter<"Stream"> | boolean
    createdAt?: DateTimeFilter<"Stream"> | Date | string
    updatedAt?: DateTimeFilter<"Stream"> | Date | string
    subjects?: SubjectListRelationFilter
    users?: UserListRelationFilter
  }

  export type StreamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subjects?: SubjectOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type StreamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: StreamWhereInput | StreamWhereInput[]
    OR?: StreamWhereInput[]
    NOT?: StreamWhereInput | StreamWhereInput[]
    description?: StringNullableFilter<"Stream"> | string | null
    isActive?: BoolFilter<"Stream"> | boolean
    createdAt?: DateTimeFilter<"Stream"> | Date | string
    updatedAt?: DateTimeFilter<"Stream"> | Date | string
    subjects?: SubjectListRelationFilter
    users?: UserListRelationFilter
  }, "id" | "name" | "code">

  export type StreamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StreamCountOrderByAggregateInput
    _max?: StreamMaxOrderByAggregateInput
    _min?: StreamMinOrderByAggregateInput
  }

  export type StreamScalarWhereWithAggregatesInput = {
    AND?: StreamScalarWhereWithAggregatesInput | StreamScalarWhereWithAggregatesInput[]
    OR?: StreamScalarWhereWithAggregatesInput[]
    NOT?: StreamScalarWhereWithAggregatesInput | StreamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Stream"> | string
    name?: StringWithAggregatesFilter<"Stream"> | string
    description?: StringNullableWithAggregatesFilter<"Stream"> | string | null
    code?: StringWithAggregatesFilter<"Stream"> | string
    isActive?: BoolWithAggregatesFilter<"Stream"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Stream"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Stream"> | Date | string
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: StringFilter<"Subject"> | string
    name?: StringFilter<"Subject"> | string
    description?: StringNullableFilter<"Subject"> | string | null
    streamId?: StringFilter<"Subject"> | string
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
    stream?: XOR<StreamScalarRelationFilter, StreamWhereInput>
    topics?: TopicListRelationFilter
    questions?: QuestionListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    streamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stream?: StreamOrderByWithRelationInput
    topics?: TopicOrderByRelationAggregateInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    streamId_name?: SubjectStreamIdNameCompoundUniqueInput
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    name?: StringFilter<"Subject"> | string
    description?: StringNullableFilter<"Subject"> | string | null
    streamId?: StringFilter<"Subject"> | string
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
    stream?: XOR<StreamScalarRelationFilter, StreamWhereInput>
    topics?: TopicListRelationFilter
    questions?: QuestionListRelationFilter
  }, "id" | "streamId_name">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    streamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subject"> | string
    name?: StringWithAggregatesFilter<"Subject"> | string
    description?: StringNullableWithAggregatesFilter<"Subject"> | string | null
    streamId?: StringWithAggregatesFilter<"Subject"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
  }

  export type TopicWhereInput = {
    AND?: TopicWhereInput | TopicWhereInput[]
    OR?: TopicWhereInput[]
    NOT?: TopicWhereInput | TopicWhereInput[]
    id?: StringFilter<"Topic"> | string
    name?: StringFilter<"Topic"> | string
    description?: StringNullableFilter<"Topic"> | string | null
    subjectId?: StringFilter<"Topic"> | string
    createdAt?: DateTimeFilter<"Topic"> | Date | string
    updatedAt?: DateTimeFilter<"Topic"> | Date | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    subtopics?: SubtopicListRelationFilter
    questions?: QuestionListRelationFilter
  }

  export type TopicOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    subjectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    subtopics?: SubtopicOrderByRelationAggregateInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type TopicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    subjectId_name?: TopicSubjectIdNameCompoundUniqueInput
    AND?: TopicWhereInput | TopicWhereInput[]
    OR?: TopicWhereInput[]
    NOT?: TopicWhereInput | TopicWhereInput[]
    name?: StringFilter<"Topic"> | string
    description?: StringNullableFilter<"Topic"> | string | null
    subjectId?: StringFilter<"Topic"> | string
    createdAt?: DateTimeFilter<"Topic"> | Date | string
    updatedAt?: DateTimeFilter<"Topic"> | Date | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    subtopics?: SubtopicListRelationFilter
    questions?: QuestionListRelationFilter
  }, "id" | "subjectId_name">

  export type TopicOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    subjectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TopicCountOrderByAggregateInput
    _max?: TopicMaxOrderByAggregateInput
    _min?: TopicMinOrderByAggregateInput
  }

  export type TopicScalarWhereWithAggregatesInput = {
    AND?: TopicScalarWhereWithAggregatesInput | TopicScalarWhereWithAggregatesInput[]
    OR?: TopicScalarWhereWithAggregatesInput[]
    NOT?: TopicScalarWhereWithAggregatesInput | TopicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Topic"> | string
    name?: StringWithAggregatesFilter<"Topic"> | string
    description?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    subjectId?: StringWithAggregatesFilter<"Topic"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Topic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Topic"> | Date | string
  }

  export type SubtopicWhereInput = {
    AND?: SubtopicWhereInput | SubtopicWhereInput[]
    OR?: SubtopicWhereInput[]
    NOT?: SubtopicWhereInput | SubtopicWhereInput[]
    id?: StringFilter<"Subtopic"> | string
    name?: StringFilter<"Subtopic"> | string
    description?: StringNullableFilter<"Subtopic"> | string | null
    topicId?: StringFilter<"Subtopic"> | string
    createdAt?: DateTimeFilter<"Subtopic"> | Date | string
    updatedAt?: DateTimeFilter<"Subtopic"> | Date | string
    topic?: XOR<TopicScalarRelationFilter, TopicWhereInput>
    questions?: QuestionListRelationFilter
  }

  export type SubtopicOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    topic?: TopicOrderByWithRelationInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type SubtopicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    topicId_name?: SubtopicTopicIdNameCompoundUniqueInput
    AND?: SubtopicWhereInput | SubtopicWhereInput[]
    OR?: SubtopicWhereInput[]
    NOT?: SubtopicWhereInput | SubtopicWhereInput[]
    name?: StringFilter<"Subtopic"> | string
    description?: StringNullableFilter<"Subtopic"> | string | null
    topicId?: StringFilter<"Subtopic"> | string
    createdAt?: DateTimeFilter<"Subtopic"> | Date | string
    updatedAt?: DateTimeFilter<"Subtopic"> | Date | string
    topic?: XOR<TopicScalarRelationFilter, TopicWhereInput>
    questions?: QuestionListRelationFilter
  }, "id" | "topicId_name">

  export type SubtopicOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubtopicCountOrderByAggregateInput
    _max?: SubtopicMaxOrderByAggregateInput
    _min?: SubtopicMinOrderByAggregateInput
  }

  export type SubtopicScalarWhereWithAggregatesInput = {
    AND?: SubtopicScalarWhereWithAggregatesInput | SubtopicScalarWhereWithAggregatesInput[]
    OR?: SubtopicScalarWhereWithAggregatesInput[]
    NOT?: SubtopicScalarWhereWithAggregatesInput | SubtopicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subtopic"> | string
    name?: StringWithAggregatesFilter<"Subtopic"> | string
    description?: StringNullableWithAggregatesFilter<"Subtopic"> | string | null
    topicId?: StringWithAggregatesFilter<"Subtopic"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subtopic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subtopic"> | Date | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    stem?: StringFilter<"Question"> | string
    explanation?: StringNullableFilter<"Question"> | string | null
    difficulty?: EnumDifficultyFilter<"Question"> | $Enums.Difficulty
    yearAppeared?: IntNullableFilter<"Question"> | number | null
    isPreviousYear?: BoolFilter<"Question"> | boolean
    isAIGenerated?: BoolFilter<"Question"> | boolean
    aiPrompt?: StringNullableFilter<"Question"> | string | null
    subjectId?: StringNullableFilter<"Question"> | string | null
    topicId?: StringNullableFilter<"Question"> | string | null
    subtopicId?: StringNullableFilter<"Question"> | string | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    subject?: XOR<SubjectNullableScalarRelationFilter, SubjectWhereInput> | null
    topic?: XOR<TopicNullableScalarRelationFilter, TopicWhereInput> | null
    subtopic?: XOR<SubtopicNullableScalarRelationFilter, SubtopicWhereInput> | null
    tags?: QuestionTagListRelationFilter
    options?: QuestionOptionListRelationFilter
    answers?: ExamAnswerListRelationFilter
    reports?: QuestionReportListRelationFilter
    alternativeExplanations?: QuestionAlternativeExplanationListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    stem?: SortOrder
    explanation?: SortOrderInput | SortOrder
    difficulty?: SortOrder
    yearAppeared?: SortOrderInput | SortOrder
    isPreviousYear?: SortOrder
    isAIGenerated?: SortOrder
    aiPrompt?: SortOrderInput | SortOrder
    subjectId?: SortOrderInput | SortOrder
    topicId?: SortOrderInput | SortOrder
    subtopicId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    topic?: TopicOrderByWithRelationInput
    subtopic?: SubtopicOrderByWithRelationInput
    tags?: QuestionTagOrderByRelationAggregateInput
    options?: QuestionOptionOrderByRelationAggregateInput
    answers?: ExamAnswerOrderByRelationAggregateInput
    reports?: QuestionReportOrderByRelationAggregateInput
    alternativeExplanations?: QuestionAlternativeExplanationOrderByRelationAggregateInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    stem?: StringFilter<"Question"> | string
    explanation?: StringNullableFilter<"Question"> | string | null
    difficulty?: EnumDifficultyFilter<"Question"> | $Enums.Difficulty
    yearAppeared?: IntNullableFilter<"Question"> | number | null
    isPreviousYear?: BoolFilter<"Question"> | boolean
    isAIGenerated?: BoolFilter<"Question"> | boolean
    aiPrompt?: StringNullableFilter<"Question"> | string | null
    subjectId?: StringNullableFilter<"Question"> | string | null
    topicId?: StringNullableFilter<"Question"> | string | null
    subtopicId?: StringNullableFilter<"Question"> | string | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    subject?: XOR<SubjectNullableScalarRelationFilter, SubjectWhereInput> | null
    topic?: XOR<TopicNullableScalarRelationFilter, TopicWhereInput> | null
    subtopic?: XOR<SubtopicNullableScalarRelationFilter, SubtopicWhereInput> | null
    tags?: QuestionTagListRelationFilter
    options?: QuestionOptionListRelationFilter
    answers?: ExamAnswerListRelationFilter
    reports?: QuestionReportListRelationFilter
    alternativeExplanations?: QuestionAlternativeExplanationListRelationFilter
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    stem?: SortOrder
    explanation?: SortOrderInput | SortOrder
    difficulty?: SortOrder
    yearAppeared?: SortOrderInput | SortOrder
    isPreviousYear?: SortOrder
    isAIGenerated?: SortOrder
    aiPrompt?: SortOrderInput | SortOrder
    subjectId?: SortOrderInput | SortOrder
    topicId?: SortOrderInput | SortOrder
    subtopicId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    stem?: StringWithAggregatesFilter<"Question"> | string
    explanation?: StringNullableWithAggregatesFilter<"Question"> | string | null
    difficulty?: EnumDifficultyWithAggregatesFilter<"Question"> | $Enums.Difficulty
    yearAppeared?: IntNullableWithAggregatesFilter<"Question"> | number | null
    isPreviousYear?: BoolWithAggregatesFilter<"Question"> | boolean
    isAIGenerated?: BoolWithAggregatesFilter<"Question"> | boolean
    aiPrompt?: StringNullableWithAggregatesFilter<"Question"> | string | null
    subjectId?: StringNullableWithAggregatesFilter<"Question"> | string | null
    topicId?: StringNullableWithAggregatesFilter<"Question"> | string | null
    subtopicId?: StringNullableWithAggregatesFilter<"Question"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
  }

  export type QuestionOptionWhereInput = {
    AND?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    OR?: QuestionOptionWhereInput[]
    NOT?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    id?: StringFilter<"QuestionOption"> | string
    questionId?: StringFilter<"QuestionOption"> | string
    text?: StringFilter<"QuestionOption"> | string
    isCorrect?: BoolFilter<"QuestionOption"> | boolean
    order?: IntFilter<"QuestionOption"> | number
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    selectedByAnswers?: ExamAnswerListRelationFilter
  }

  export type QuestionOptionOrderByWithRelationInput = {
    id?: SortOrder
    questionId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
    question?: QuestionOrderByWithRelationInput
    selectedByAnswers?: ExamAnswerOrderByRelationAggregateInput
  }

  export type QuestionOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    OR?: QuestionOptionWhereInput[]
    NOT?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    questionId?: StringFilter<"QuestionOption"> | string
    text?: StringFilter<"QuestionOption"> | string
    isCorrect?: BoolFilter<"QuestionOption"> | boolean
    order?: IntFilter<"QuestionOption"> | number
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    selectedByAnswers?: ExamAnswerListRelationFilter
  }, "id">

  export type QuestionOptionOrderByWithAggregationInput = {
    id?: SortOrder
    questionId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
    _count?: QuestionOptionCountOrderByAggregateInput
    _avg?: QuestionOptionAvgOrderByAggregateInput
    _max?: QuestionOptionMaxOrderByAggregateInput
    _min?: QuestionOptionMinOrderByAggregateInput
    _sum?: QuestionOptionSumOrderByAggregateInput
  }

  export type QuestionOptionScalarWhereWithAggregatesInput = {
    AND?: QuestionOptionScalarWhereWithAggregatesInput | QuestionOptionScalarWhereWithAggregatesInput[]
    OR?: QuestionOptionScalarWhereWithAggregatesInput[]
    NOT?: QuestionOptionScalarWhereWithAggregatesInput | QuestionOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionOption"> | string
    questionId?: StringWithAggregatesFilter<"QuestionOption"> | string
    text?: StringWithAggregatesFilter<"QuestionOption"> | string
    isCorrect?: BoolWithAggregatesFilter<"QuestionOption"> | boolean
    order?: IntWithAggregatesFilter<"QuestionOption"> | number
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    questions?: QuestionTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    questions?: QuestionTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    questions?: QuestionTagListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type QuestionTagWhereInput = {
    AND?: QuestionTagWhereInput | QuestionTagWhereInput[]
    OR?: QuestionTagWhereInput[]
    NOT?: QuestionTagWhereInput | QuestionTagWhereInput[]
    questionId?: StringFilter<"QuestionTag"> | string
    tagId?: StringFilter<"QuestionTag"> | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }

  export type QuestionTagOrderByWithRelationInput = {
    questionId?: SortOrder
    tagId?: SortOrder
    question?: QuestionOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type QuestionTagWhereUniqueInput = Prisma.AtLeast<{
    questionId_tagId?: QuestionTagQuestionIdTagIdCompoundUniqueInput
    AND?: QuestionTagWhereInput | QuestionTagWhereInput[]
    OR?: QuestionTagWhereInput[]
    NOT?: QuestionTagWhereInput | QuestionTagWhereInput[]
    questionId?: StringFilter<"QuestionTag"> | string
    tagId?: StringFilter<"QuestionTag"> | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }, "questionId_tagId">

  export type QuestionTagOrderByWithAggregationInput = {
    questionId?: SortOrder
    tagId?: SortOrder
    _count?: QuestionTagCountOrderByAggregateInput
    _max?: QuestionTagMaxOrderByAggregateInput
    _min?: QuestionTagMinOrderByAggregateInput
  }

  export type QuestionTagScalarWhereWithAggregatesInput = {
    AND?: QuestionTagScalarWhereWithAggregatesInput | QuestionTagScalarWhereWithAggregatesInput[]
    OR?: QuestionTagScalarWhereWithAggregatesInput[]
    NOT?: QuestionTagScalarWhereWithAggregatesInput | QuestionTagScalarWhereWithAggregatesInput[]
    questionId?: StringWithAggregatesFilter<"QuestionTag"> | string
    tagId?: StringWithAggregatesFilter<"QuestionTag"> | string
  }

  export type QuestionReportWhereInput = {
    AND?: QuestionReportWhereInput | QuestionReportWhereInput[]
    OR?: QuestionReportWhereInput[]
    NOT?: QuestionReportWhereInput | QuestionReportWhereInput[]
    id?: StringFilter<"QuestionReport"> | string
    questionId?: StringFilter<"QuestionReport"> | string
    userId?: StringFilter<"QuestionReport"> | string
    reportType?: EnumQuestionReportTypeFilter<"QuestionReport"> | $Enums.QuestionReportType
    reason?: StringFilter<"QuestionReport"> | string
    description?: StringNullableFilter<"QuestionReport"> | string | null
    status?: EnumReportStatusFilter<"QuestionReport"> | $Enums.ReportStatus
    alternativeExplanation?: StringNullableFilter<"QuestionReport"> | string | null
    suggestedAnswer?: StringNullableFilter<"QuestionReport"> | string | null
    reviewedById?: StringNullableFilter<"QuestionReport"> | string | null
    reviewedAt?: DateTimeNullableFilter<"QuestionReport"> | Date | string | null
    reviewNotes?: StringNullableFilter<"QuestionReport"> | string | null
    createdAt?: DateTimeFilter<"QuestionReport"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionReport"> | Date | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    suggestedOptions?: QuestionReportOptionListRelationFilter
    reviewedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type QuestionReportOrderByWithRelationInput = {
    id?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    reportType?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    alternativeExplanation?: SortOrderInput | SortOrder
    suggestedAnswer?: SortOrderInput | SortOrder
    reviewedById?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    question?: QuestionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    suggestedOptions?: QuestionReportOptionOrderByRelationAggregateInput
    reviewedBy?: UserOrderByWithRelationInput
  }

  export type QuestionReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionReportWhereInput | QuestionReportWhereInput[]
    OR?: QuestionReportWhereInput[]
    NOT?: QuestionReportWhereInput | QuestionReportWhereInput[]
    questionId?: StringFilter<"QuestionReport"> | string
    userId?: StringFilter<"QuestionReport"> | string
    reportType?: EnumQuestionReportTypeFilter<"QuestionReport"> | $Enums.QuestionReportType
    reason?: StringFilter<"QuestionReport"> | string
    description?: StringNullableFilter<"QuestionReport"> | string | null
    status?: EnumReportStatusFilter<"QuestionReport"> | $Enums.ReportStatus
    alternativeExplanation?: StringNullableFilter<"QuestionReport"> | string | null
    suggestedAnswer?: StringNullableFilter<"QuestionReport"> | string | null
    reviewedById?: StringNullableFilter<"QuestionReport"> | string | null
    reviewedAt?: DateTimeNullableFilter<"QuestionReport"> | Date | string | null
    reviewNotes?: StringNullableFilter<"QuestionReport"> | string | null
    createdAt?: DateTimeFilter<"QuestionReport"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionReport"> | Date | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    suggestedOptions?: QuestionReportOptionListRelationFilter
    reviewedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type QuestionReportOrderByWithAggregationInput = {
    id?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    reportType?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    alternativeExplanation?: SortOrderInput | SortOrder
    suggestedAnswer?: SortOrderInput | SortOrder
    reviewedById?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionReportCountOrderByAggregateInput
    _max?: QuestionReportMaxOrderByAggregateInput
    _min?: QuestionReportMinOrderByAggregateInput
  }

  export type QuestionReportScalarWhereWithAggregatesInput = {
    AND?: QuestionReportScalarWhereWithAggregatesInput | QuestionReportScalarWhereWithAggregatesInput[]
    OR?: QuestionReportScalarWhereWithAggregatesInput[]
    NOT?: QuestionReportScalarWhereWithAggregatesInput | QuestionReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionReport"> | string
    questionId?: StringWithAggregatesFilter<"QuestionReport"> | string
    userId?: StringWithAggregatesFilter<"QuestionReport"> | string
    reportType?: EnumQuestionReportTypeWithAggregatesFilter<"QuestionReport"> | $Enums.QuestionReportType
    reason?: StringWithAggregatesFilter<"QuestionReport"> | string
    description?: StringNullableWithAggregatesFilter<"QuestionReport"> | string | null
    status?: EnumReportStatusWithAggregatesFilter<"QuestionReport"> | $Enums.ReportStatus
    alternativeExplanation?: StringNullableWithAggregatesFilter<"QuestionReport"> | string | null
    suggestedAnswer?: StringNullableWithAggregatesFilter<"QuestionReport"> | string | null
    reviewedById?: StringNullableWithAggregatesFilter<"QuestionReport"> | string | null
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"QuestionReport"> | Date | string | null
    reviewNotes?: StringNullableWithAggregatesFilter<"QuestionReport"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"QuestionReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionReport"> | Date | string
  }

  export type QuestionReportOptionWhereInput = {
    AND?: QuestionReportOptionWhereInput | QuestionReportOptionWhereInput[]
    OR?: QuestionReportOptionWhereInput[]
    NOT?: QuestionReportOptionWhereInput | QuestionReportOptionWhereInput[]
    id?: StringFilter<"QuestionReportOption"> | string
    reportId?: StringFilter<"QuestionReportOption"> | string
    text?: StringFilter<"QuestionReportOption"> | string
    isCorrect?: BoolFilter<"QuestionReportOption"> | boolean
    order?: IntFilter<"QuestionReportOption"> | number
    createdAt?: DateTimeFilter<"QuestionReportOption"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionReportOption"> | Date | string
    report?: XOR<QuestionReportScalarRelationFilter, QuestionReportWhereInput>
  }

  export type QuestionReportOptionOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    report?: QuestionReportOrderByWithRelationInput
  }

  export type QuestionReportOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionReportOptionWhereInput | QuestionReportOptionWhereInput[]
    OR?: QuestionReportOptionWhereInput[]
    NOT?: QuestionReportOptionWhereInput | QuestionReportOptionWhereInput[]
    reportId?: StringFilter<"QuestionReportOption"> | string
    text?: StringFilter<"QuestionReportOption"> | string
    isCorrect?: BoolFilter<"QuestionReportOption"> | boolean
    order?: IntFilter<"QuestionReportOption"> | number
    createdAt?: DateTimeFilter<"QuestionReportOption"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionReportOption"> | Date | string
    report?: XOR<QuestionReportScalarRelationFilter, QuestionReportWhereInput>
  }, "id">

  export type QuestionReportOptionOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionReportOptionCountOrderByAggregateInput
    _avg?: QuestionReportOptionAvgOrderByAggregateInput
    _max?: QuestionReportOptionMaxOrderByAggregateInput
    _min?: QuestionReportOptionMinOrderByAggregateInput
    _sum?: QuestionReportOptionSumOrderByAggregateInput
  }

  export type QuestionReportOptionScalarWhereWithAggregatesInput = {
    AND?: QuestionReportOptionScalarWhereWithAggregatesInput | QuestionReportOptionScalarWhereWithAggregatesInput[]
    OR?: QuestionReportOptionScalarWhereWithAggregatesInput[]
    NOT?: QuestionReportOptionScalarWhereWithAggregatesInput | QuestionReportOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionReportOption"> | string
    reportId?: StringWithAggregatesFilter<"QuestionReportOption"> | string
    text?: StringWithAggregatesFilter<"QuestionReportOption"> | string
    isCorrect?: BoolWithAggregatesFilter<"QuestionReportOption"> | boolean
    order?: IntWithAggregatesFilter<"QuestionReportOption"> | number
    createdAt?: DateTimeWithAggregatesFilter<"QuestionReportOption"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionReportOption"> | Date | string
  }

  export type QuestionAlternativeExplanationWhereInput = {
    AND?: QuestionAlternativeExplanationWhereInput | QuestionAlternativeExplanationWhereInput[]
    OR?: QuestionAlternativeExplanationWhereInput[]
    NOT?: QuestionAlternativeExplanationWhereInput | QuestionAlternativeExplanationWhereInput[]
    id?: StringFilter<"QuestionAlternativeExplanation"> | string
    questionId?: StringFilter<"QuestionAlternativeExplanation"> | string
    explanation?: StringFilter<"QuestionAlternativeExplanation"> | string
    source?: StringFilter<"QuestionAlternativeExplanation"> | string
    reportId?: StringNullableFilter<"QuestionAlternativeExplanation"> | string | null
    createdAt?: DateTimeFilter<"QuestionAlternativeExplanation"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionAlternativeExplanation"> | Date | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }

  export type QuestionAlternativeExplanationOrderByWithRelationInput = {
    id?: SortOrder
    questionId?: SortOrder
    explanation?: SortOrder
    source?: SortOrder
    reportId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    question?: QuestionOrderByWithRelationInput
  }

  export type QuestionAlternativeExplanationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionAlternativeExplanationWhereInput | QuestionAlternativeExplanationWhereInput[]
    OR?: QuestionAlternativeExplanationWhereInput[]
    NOT?: QuestionAlternativeExplanationWhereInput | QuestionAlternativeExplanationWhereInput[]
    questionId?: StringFilter<"QuestionAlternativeExplanation"> | string
    explanation?: StringFilter<"QuestionAlternativeExplanation"> | string
    source?: StringFilter<"QuestionAlternativeExplanation"> | string
    reportId?: StringNullableFilter<"QuestionAlternativeExplanation"> | string | null
    createdAt?: DateTimeFilter<"QuestionAlternativeExplanation"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionAlternativeExplanation"> | Date | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }, "id">

  export type QuestionAlternativeExplanationOrderByWithAggregationInput = {
    id?: SortOrder
    questionId?: SortOrder
    explanation?: SortOrder
    source?: SortOrder
    reportId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionAlternativeExplanationCountOrderByAggregateInput
    _max?: QuestionAlternativeExplanationMaxOrderByAggregateInput
    _min?: QuestionAlternativeExplanationMinOrderByAggregateInput
  }

  export type QuestionAlternativeExplanationScalarWhereWithAggregatesInput = {
    AND?: QuestionAlternativeExplanationScalarWhereWithAggregatesInput | QuestionAlternativeExplanationScalarWhereWithAggregatesInput[]
    OR?: QuestionAlternativeExplanationScalarWhereWithAggregatesInput[]
    NOT?: QuestionAlternativeExplanationScalarWhereWithAggregatesInput | QuestionAlternativeExplanationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionAlternativeExplanation"> | string
    questionId?: StringWithAggregatesFilter<"QuestionAlternativeExplanation"> | string
    explanation?: StringWithAggregatesFilter<"QuestionAlternativeExplanation"> | string
    source?: StringWithAggregatesFilter<"QuestionAlternativeExplanation"> | string
    reportId?: StringNullableWithAggregatesFilter<"QuestionAlternativeExplanation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"QuestionAlternativeExplanation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionAlternativeExplanation"> | Date | string
  }

  export type ExamPaperWhereInput = {
    AND?: ExamPaperWhereInput | ExamPaperWhereInput[]
    OR?: ExamPaperWhereInput[]
    NOT?: ExamPaperWhereInput | ExamPaperWhereInput[]
    id?: StringFilter<"ExamPaper"> | string
    title?: StringFilter<"ExamPaper"> | string
    description?: StringNullableFilter<"ExamPaper"> | string | null
    subjectIds?: StringNullableListFilter<"ExamPaper">
    topicIds?: StringNullableListFilter<"ExamPaper">
    subtopicIds?: StringNullableListFilter<"ExamPaper">
    questionIds?: StringNullableListFilter<"ExamPaper">
    timeLimitMin?: IntNullableFilter<"ExamPaper"> | number | null
    createdAt?: DateTimeFilter<"ExamPaper"> | Date | string
    updatedAt?: DateTimeFilter<"ExamPaper"> | Date | string
    submissions?: ExamSubmissionListRelationFilter
  }

  export type ExamPaperOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    subjectIds?: SortOrder
    topicIds?: SortOrder
    subtopicIds?: SortOrder
    questionIds?: SortOrder
    timeLimitMin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submissions?: ExamSubmissionOrderByRelationAggregateInput
  }

  export type ExamPaperWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExamPaperWhereInput | ExamPaperWhereInput[]
    OR?: ExamPaperWhereInput[]
    NOT?: ExamPaperWhereInput | ExamPaperWhereInput[]
    title?: StringFilter<"ExamPaper"> | string
    description?: StringNullableFilter<"ExamPaper"> | string | null
    subjectIds?: StringNullableListFilter<"ExamPaper">
    topicIds?: StringNullableListFilter<"ExamPaper">
    subtopicIds?: StringNullableListFilter<"ExamPaper">
    questionIds?: StringNullableListFilter<"ExamPaper">
    timeLimitMin?: IntNullableFilter<"ExamPaper"> | number | null
    createdAt?: DateTimeFilter<"ExamPaper"> | Date | string
    updatedAt?: DateTimeFilter<"ExamPaper"> | Date | string
    submissions?: ExamSubmissionListRelationFilter
  }, "id">

  export type ExamPaperOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    subjectIds?: SortOrder
    topicIds?: SortOrder
    subtopicIds?: SortOrder
    questionIds?: SortOrder
    timeLimitMin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExamPaperCountOrderByAggregateInput
    _avg?: ExamPaperAvgOrderByAggregateInput
    _max?: ExamPaperMaxOrderByAggregateInput
    _min?: ExamPaperMinOrderByAggregateInput
    _sum?: ExamPaperSumOrderByAggregateInput
  }

  export type ExamPaperScalarWhereWithAggregatesInput = {
    AND?: ExamPaperScalarWhereWithAggregatesInput | ExamPaperScalarWhereWithAggregatesInput[]
    OR?: ExamPaperScalarWhereWithAggregatesInput[]
    NOT?: ExamPaperScalarWhereWithAggregatesInput | ExamPaperScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExamPaper"> | string
    title?: StringWithAggregatesFilter<"ExamPaper"> | string
    description?: StringNullableWithAggregatesFilter<"ExamPaper"> | string | null
    subjectIds?: StringNullableListFilter<"ExamPaper">
    topicIds?: StringNullableListFilter<"ExamPaper">
    subtopicIds?: StringNullableListFilter<"ExamPaper">
    questionIds?: StringNullableListFilter<"ExamPaper">
    timeLimitMin?: IntNullableWithAggregatesFilter<"ExamPaper"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ExamPaper"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExamPaper"> | Date | string
  }

  export type ExamSubmissionWhereInput = {
    AND?: ExamSubmissionWhereInput | ExamSubmissionWhereInput[]
    OR?: ExamSubmissionWhereInput[]
    NOT?: ExamSubmissionWhereInput | ExamSubmissionWhereInput[]
    id?: StringFilter<"ExamSubmission"> | string
    userId?: StringFilter<"ExamSubmission"> | string
    examPaperId?: StringFilter<"ExamSubmission"> | string
    startedAt?: DateTimeFilter<"ExamSubmission"> | Date | string
    submittedAt?: DateTimeNullableFilter<"ExamSubmission"> | Date | string | null
    totalQuestions?: IntFilter<"ExamSubmission"> | number
    correctCount?: IntFilter<"ExamSubmission"> | number
    scorePercent?: FloatNullableFilter<"ExamSubmission"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    examPaper?: XOR<ExamPaperScalarRelationFilter, ExamPaperWhereInput>
    answers?: ExamAnswerListRelationFilter
  }

  export type ExamSubmissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    examPaperId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    totalQuestions?: SortOrder
    correctCount?: SortOrder
    scorePercent?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    examPaper?: ExamPaperOrderByWithRelationInput
    answers?: ExamAnswerOrderByRelationAggregateInput
  }

  export type ExamSubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExamSubmissionWhereInput | ExamSubmissionWhereInput[]
    OR?: ExamSubmissionWhereInput[]
    NOT?: ExamSubmissionWhereInput | ExamSubmissionWhereInput[]
    userId?: StringFilter<"ExamSubmission"> | string
    examPaperId?: StringFilter<"ExamSubmission"> | string
    startedAt?: DateTimeFilter<"ExamSubmission"> | Date | string
    submittedAt?: DateTimeNullableFilter<"ExamSubmission"> | Date | string | null
    totalQuestions?: IntFilter<"ExamSubmission"> | number
    correctCount?: IntFilter<"ExamSubmission"> | number
    scorePercent?: FloatNullableFilter<"ExamSubmission"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    examPaper?: XOR<ExamPaperScalarRelationFilter, ExamPaperWhereInput>
    answers?: ExamAnswerListRelationFilter
  }, "id">

  export type ExamSubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    examPaperId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    totalQuestions?: SortOrder
    correctCount?: SortOrder
    scorePercent?: SortOrderInput | SortOrder
    _count?: ExamSubmissionCountOrderByAggregateInput
    _avg?: ExamSubmissionAvgOrderByAggregateInput
    _max?: ExamSubmissionMaxOrderByAggregateInput
    _min?: ExamSubmissionMinOrderByAggregateInput
    _sum?: ExamSubmissionSumOrderByAggregateInput
  }

  export type ExamSubmissionScalarWhereWithAggregatesInput = {
    AND?: ExamSubmissionScalarWhereWithAggregatesInput | ExamSubmissionScalarWhereWithAggregatesInput[]
    OR?: ExamSubmissionScalarWhereWithAggregatesInput[]
    NOT?: ExamSubmissionScalarWhereWithAggregatesInput | ExamSubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExamSubmission"> | string
    userId?: StringWithAggregatesFilter<"ExamSubmission"> | string
    examPaperId?: StringWithAggregatesFilter<"ExamSubmission"> | string
    startedAt?: DateTimeWithAggregatesFilter<"ExamSubmission"> | Date | string
    submittedAt?: DateTimeNullableWithAggregatesFilter<"ExamSubmission"> | Date | string | null
    totalQuestions?: IntWithAggregatesFilter<"ExamSubmission"> | number
    correctCount?: IntWithAggregatesFilter<"ExamSubmission"> | number
    scorePercent?: FloatNullableWithAggregatesFilter<"ExamSubmission"> | number | null
  }

  export type ExamAnswerWhereInput = {
    AND?: ExamAnswerWhereInput | ExamAnswerWhereInput[]
    OR?: ExamAnswerWhereInput[]
    NOT?: ExamAnswerWhereInput | ExamAnswerWhereInput[]
    id?: StringFilter<"ExamAnswer"> | string
    submissionId?: StringFilter<"ExamAnswer"> | string
    questionId?: StringFilter<"ExamAnswer"> | string
    selectedOptionId?: StringNullableFilter<"ExamAnswer"> | string | null
    isCorrect?: BoolFilter<"ExamAnswer"> | boolean
    submission?: XOR<ExamSubmissionScalarRelationFilter, ExamSubmissionWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    selectedOption?: XOR<QuestionOptionNullableScalarRelationFilter, QuestionOptionWhereInput> | null
  }

  export type ExamAnswerOrderByWithRelationInput = {
    id?: SortOrder
    submissionId?: SortOrder
    questionId?: SortOrder
    selectedOptionId?: SortOrderInput | SortOrder
    isCorrect?: SortOrder
    submission?: ExamSubmissionOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
    selectedOption?: QuestionOptionOrderByWithRelationInput
  }

  export type ExamAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    submissionId_questionId?: ExamAnswerSubmissionIdQuestionIdCompoundUniqueInput
    AND?: ExamAnswerWhereInput | ExamAnswerWhereInput[]
    OR?: ExamAnswerWhereInput[]
    NOT?: ExamAnswerWhereInput | ExamAnswerWhereInput[]
    submissionId?: StringFilter<"ExamAnswer"> | string
    questionId?: StringFilter<"ExamAnswer"> | string
    selectedOptionId?: StringNullableFilter<"ExamAnswer"> | string | null
    isCorrect?: BoolFilter<"ExamAnswer"> | boolean
    submission?: XOR<ExamSubmissionScalarRelationFilter, ExamSubmissionWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    selectedOption?: XOR<QuestionOptionNullableScalarRelationFilter, QuestionOptionWhereInput> | null
  }, "id" | "submissionId_questionId">

  export type ExamAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    submissionId?: SortOrder
    questionId?: SortOrder
    selectedOptionId?: SortOrderInput | SortOrder
    isCorrect?: SortOrder
    _count?: ExamAnswerCountOrderByAggregateInput
    _max?: ExamAnswerMaxOrderByAggregateInput
    _min?: ExamAnswerMinOrderByAggregateInput
  }

  export type ExamAnswerScalarWhereWithAggregatesInput = {
    AND?: ExamAnswerScalarWhereWithAggregatesInput | ExamAnswerScalarWhereWithAggregatesInput[]
    OR?: ExamAnswerScalarWhereWithAggregatesInput[]
    NOT?: ExamAnswerScalarWhereWithAggregatesInput | ExamAnswerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExamAnswer"> | string
    submissionId?: StringWithAggregatesFilter<"ExamAnswer"> | string
    questionId?: StringWithAggregatesFilter<"ExamAnswer"> | string
    selectedOptionId?: StringNullableWithAggregatesFilter<"ExamAnswer"> | string | null
    isCorrect?: BoolWithAggregatesFilter<"ExamAnswer"> | boolean
  }

  export type PlanWhereInput = {
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    id?: StringFilter<"Plan"> | string
    name?: StringFilter<"Plan"> | string
    description?: StringNullableFilter<"Plan"> | string | null
    priceCents?: IntFilter<"Plan"> | number
    currency?: StringFilter<"Plan"> | string
    interval?: EnumPlanIntervalFilter<"Plan"> | $Enums.PlanInterval
    planType?: EnumPlanTypeFilter<"Plan"> | $Enums.PlanType
    stripePriceId?: StringNullableFilter<"Plan"> | string | null
    isActive?: BoolFilter<"Plan"> | boolean
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    subscriptions?: SubscriptionListRelationFilter
  }

  export type PlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    planType?: SortOrder
    stripePriceId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptions?: SubscriptionOrderByRelationAggregateInput
  }

  export type PlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    stripePriceId?: string
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    description?: StringNullableFilter<"Plan"> | string | null
    priceCents?: IntFilter<"Plan"> | number
    currency?: StringFilter<"Plan"> | string
    interval?: EnumPlanIntervalFilter<"Plan"> | $Enums.PlanInterval
    planType?: EnumPlanTypeFilter<"Plan"> | $Enums.PlanType
    isActive?: BoolFilter<"Plan"> | boolean
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    subscriptions?: SubscriptionListRelationFilter
  }, "id" | "name" | "stripePriceId">

  export type PlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    planType?: SortOrder
    stripePriceId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlanCountOrderByAggregateInput
    _avg?: PlanAvgOrderByAggregateInput
    _max?: PlanMaxOrderByAggregateInput
    _min?: PlanMinOrderByAggregateInput
    _sum?: PlanSumOrderByAggregateInput
  }

  export type PlanScalarWhereWithAggregatesInput = {
    AND?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    OR?: PlanScalarWhereWithAggregatesInput[]
    NOT?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Plan"> | string
    name?: StringWithAggregatesFilter<"Plan"> | string
    description?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    priceCents?: IntWithAggregatesFilter<"Plan"> | number
    currency?: StringWithAggregatesFilter<"Plan"> | string
    interval?: EnumPlanIntervalWithAggregatesFilter<"Plan"> | $Enums.PlanInterval
    planType?: EnumPlanTypeWithAggregatesFilter<"Plan"> | $Enums.PlanType
    stripePriceId?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    isActive?: BoolWithAggregatesFilter<"Plan"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    userId?: StringFilter<"Subscription"> | string
    planId?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    startedAt?: DateTimeFilter<"Subscription"> | Date | string
    endsAt?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    stripeCustomerId?: StringNullableFilter<"Subscription"> | string | null
    stripeSubId?: StringNullableFilter<"Subscription"> | string | null
    stripeStatus?: StringNullableFilter<"Subscription"> | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubId?: SortOrderInput | SortOrder
    stripeStatus?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    plan?: PlanOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    userId?: StringFilter<"Subscription"> | string
    planId?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    startedAt?: DateTimeFilter<"Subscription"> | Date | string
    endsAt?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    stripeCustomerId?: StringNullableFilter<"Subscription"> | string | null
    stripeSubId?: StringNullableFilter<"Subscription"> | string | null
    stripeStatus?: StringNullableFilter<"Subscription"> | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
  }, "id">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubId?: SortOrderInput | SortOrder
    stripeStatus?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    userId?: StringWithAggregatesFilter<"Subscription"> | string
    planId?: StringWithAggregatesFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusWithAggregatesFilter<"Subscription"> | $Enums.SubscriptionStatus
    startedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    endsAt?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    stripeCustomerId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    stripeSubId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    stripeStatus?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type OtpWhereInput = {
    AND?: OtpWhereInput | OtpWhereInput[]
    OR?: OtpWhereInput[]
    NOT?: OtpWhereInput | OtpWhereInput[]
    id?: StringFilter<"Otp"> | string
    userId?: StringFilter<"Otp"> | string
    code?: StringFilter<"Otp"> | string
    type?: EnumOtpTypeFilter<"Otp"> | $Enums.OtpType
    target?: StringFilter<"Otp"> | string
    expiresAt?: DateTimeFilter<"Otp"> | Date | string
    consumed?: BoolFilter<"Otp"> | boolean
    createdAt?: DateTimeFilter<"Otp"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OtpOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    type?: SortOrder
    target?: SortOrder
    expiresAt?: SortOrder
    consumed?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OtpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OtpWhereInput | OtpWhereInput[]
    OR?: OtpWhereInput[]
    NOT?: OtpWhereInput | OtpWhereInput[]
    userId?: StringFilter<"Otp"> | string
    code?: StringFilter<"Otp"> | string
    type?: EnumOtpTypeFilter<"Otp"> | $Enums.OtpType
    target?: StringFilter<"Otp"> | string
    expiresAt?: DateTimeFilter<"Otp"> | Date | string
    consumed?: BoolFilter<"Otp"> | boolean
    createdAt?: DateTimeFilter<"Otp"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type OtpOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    type?: SortOrder
    target?: SortOrder
    expiresAt?: SortOrder
    consumed?: SortOrder
    createdAt?: SortOrder
    _count?: OtpCountOrderByAggregateInput
    _max?: OtpMaxOrderByAggregateInput
    _min?: OtpMinOrderByAggregateInput
  }

  export type OtpScalarWhereWithAggregatesInput = {
    AND?: OtpScalarWhereWithAggregatesInput | OtpScalarWhereWithAggregatesInput[]
    OR?: OtpScalarWhereWithAggregatesInput[]
    NOT?: OtpScalarWhereWithAggregatesInput | OtpScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Otp"> | string
    userId?: StringWithAggregatesFilter<"Otp"> | string
    code?: StringWithAggregatesFilter<"Otp"> | string
    type?: EnumOtpTypeWithAggregatesFilter<"Otp"> | $Enums.OtpType
    target?: StringWithAggregatesFilter<"Otp"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Otp"> | Date | string
    consumed?: BoolWithAggregatesFilter<"Otp"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Otp"> | Date | string
  }

  export type ReferralCodeWhereInput = {
    AND?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    OR?: ReferralCodeWhereInput[]
    NOT?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    id?: StringFilter<"ReferralCode"> | string
    userId?: StringFilter<"ReferralCode"> | string
    code?: StringFilter<"ReferralCode"> | string
    isActive?: BoolFilter<"ReferralCode"> | boolean
    usageCount?: IntFilter<"ReferralCode"> | number
    maxUsage?: IntNullableFilter<"ReferralCode"> | number | null
    createdAt?: DateTimeFilter<"ReferralCode"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralCode"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    referrals?: ReferralListRelationFilter
  }

  export type ReferralCodeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    maxUsage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    referrals?: ReferralOrderByRelationAggregateInput
  }

  export type ReferralCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    code?: string
    AND?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    OR?: ReferralCodeWhereInput[]
    NOT?: ReferralCodeWhereInput | ReferralCodeWhereInput[]
    isActive?: BoolFilter<"ReferralCode"> | boolean
    usageCount?: IntFilter<"ReferralCode"> | number
    maxUsage?: IntNullableFilter<"ReferralCode"> | number | null
    createdAt?: DateTimeFilter<"ReferralCode"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralCode"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    referrals?: ReferralListRelationFilter
  }, "id" | "userId" | "code">

  export type ReferralCodeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    maxUsage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReferralCodeCountOrderByAggregateInput
    _avg?: ReferralCodeAvgOrderByAggregateInput
    _max?: ReferralCodeMaxOrderByAggregateInput
    _min?: ReferralCodeMinOrderByAggregateInput
    _sum?: ReferralCodeSumOrderByAggregateInput
  }

  export type ReferralCodeScalarWhereWithAggregatesInput = {
    AND?: ReferralCodeScalarWhereWithAggregatesInput | ReferralCodeScalarWhereWithAggregatesInput[]
    OR?: ReferralCodeScalarWhereWithAggregatesInput[]
    NOT?: ReferralCodeScalarWhereWithAggregatesInput | ReferralCodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReferralCode"> | string
    userId?: StringWithAggregatesFilter<"ReferralCode"> | string
    code?: StringWithAggregatesFilter<"ReferralCode"> | string
    isActive?: BoolWithAggregatesFilter<"ReferralCode"> | boolean
    usageCount?: IntWithAggregatesFilter<"ReferralCode"> | number
    maxUsage?: IntNullableWithAggregatesFilter<"ReferralCode"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ReferralCode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReferralCode"> | Date | string
  }

  export type ReferralWhereInput = {
    AND?: ReferralWhereInput | ReferralWhereInput[]
    OR?: ReferralWhereInput[]
    NOT?: ReferralWhereInput | ReferralWhereInput[]
    id?: StringFilter<"Referral"> | string
    referrerId?: StringFilter<"Referral"> | string
    refereeId?: StringFilter<"Referral"> | string
    referralCodeId?: StringFilter<"Referral"> | string
    status?: EnumReferralStatusFilter<"Referral"> | $Enums.ReferralStatus
    completedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
    createdAt?: DateTimeFilter<"Referral"> | Date | string
    updatedAt?: DateTimeFilter<"Referral"> | Date | string
    referrer?: XOR<UserScalarRelationFilter, UserWhereInput>
    referee?: XOR<UserScalarRelationFilter, UserWhereInput>
    referralCode?: XOR<ReferralCodeScalarRelationFilter, ReferralCodeWhereInput>
    rewards?: ReferralRewardListRelationFilter
  }

  export type ReferralOrderByWithRelationInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCodeId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    referrer?: UserOrderByWithRelationInput
    referee?: UserOrderByWithRelationInput
    referralCode?: ReferralCodeOrderByWithRelationInput
    rewards?: ReferralRewardOrderByRelationAggregateInput
  }

  export type ReferralWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    refereeId?: string
    referrerId_refereeId?: ReferralReferrerIdRefereeIdCompoundUniqueInput
    AND?: ReferralWhereInput | ReferralWhereInput[]
    OR?: ReferralWhereInput[]
    NOT?: ReferralWhereInput | ReferralWhereInput[]
    referrerId?: StringFilter<"Referral"> | string
    referralCodeId?: StringFilter<"Referral"> | string
    status?: EnumReferralStatusFilter<"Referral"> | $Enums.ReferralStatus
    completedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
    createdAt?: DateTimeFilter<"Referral"> | Date | string
    updatedAt?: DateTimeFilter<"Referral"> | Date | string
    referrer?: XOR<UserScalarRelationFilter, UserWhereInput>
    referee?: XOR<UserScalarRelationFilter, UserWhereInput>
    referralCode?: XOR<ReferralCodeScalarRelationFilter, ReferralCodeWhereInput>
    rewards?: ReferralRewardListRelationFilter
  }, "id" | "refereeId" | "referrerId_refereeId">

  export type ReferralOrderByWithAggregationInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCodeId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReferralCountOrderByAggregateInput
    _max?: ReferralMaxOrderByAggregateInput
    _min?: ReferralMinOrderByAggregateInput
  }

  export type ReferralScalarWhereWithAggregatesInput = {
    AND?: ReferralScalarWhereWithAggregatesInput | ReferralScalarWhereWithAggregatesInput[]
    OR?: ReferralScalarWhereWithAggregatesInput[]
    NOT?: ReferralScalarWhereWithAggregatesInput | ReferralScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Referral"> | string
    referrerId?: StringWithAggregatesFilter<"Referral"> | string
    refereeId?: StringWithAggregatesFilter<"Referral"> | string
    referralCodeId?: StringWithAggregatesFilter<"Referral"> | string
    status?: EnumReferralStatusWithAggregatesFilter<"Referral"> | $Enums.ReferralStatus
    completedAt?: DateTimeNullableWithAggregatesFilter<"Referral"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Referral"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Referral"> | Date | string
  }

  export type ReferralRewardWhereInput = {
    AND?: ReferralRewardWhereInput | ReferralRewardWhereInput[]
    OR?: ReferralRewardWhereInput[]
    NOT?: ReferralRewardWhereInput | ReferralRewardWhereInput[]
    id?: StringFilter<"ReferralReward"> | string
    referralId?: StringFilter<"ReferralReward"> | string
    type?: EnumRewardTypeFilter<"ReferralReward"> | $Enums.RewardType
    amount?: IntFilter<"ReferralReward"> | number
    currency?: StringNullableFilter<"ReferralReward"> | string | null
    description?: StringFilter<"ReferralReward"> | string
    isClaimed?: BoolFilter<"ReferralReward"> | boolean
    claimedAt?: DateTimeNullableFilter<"ReferralReward"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"ReferralReward"> | Date | string | null
    createdAt?: DateTimeFilter<"ReferralReward"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralReward"> | Date | string
    referral?: XOR<ReferralScalarRelationFilter, ReferralWhereInput>
  }

  export type ReferralRewardOrderByWithRelationInput = {
    id?: SortOrder
    referralId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrderInput | SortOrder
    description?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    referral?: ReferralOrderByWithRelationInput
  }

  export type ReferralRewardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReferralRewardWhereInput | ReferralRewardWhereInput[]
    OR?: ReferralRewardWhereInput[]
    NOT?: ReferralRewardWhereInput | ReferralRewardWhereInput[]
    referralId?: StringFilter<"ReferralReward"> | string
    type?: EnumRewardTypeFilter<"ReferralReward"> | $Enums.RewardType
    amount?: IntFilter<"ReferralReward"> | number
    currency?: StringNullableFilter<"ReferralReward"> | string | null
    description?: StringFilter<"ReferralReward"> | string
    isClaimed?: BoolFilter<"ReferralReward"> | boolean
    claimedAt?: DateTimeNullableFilter<"ReferralReward"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"ReferralReward"> | Date | string | null
    createdAt?: DateTimeFilter<"ReferralReward"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralReward"> | Date | string
    referral?: XOR<ReferralScalarRelationFilter, ReferralWhereInput>
  }, "id">

  export type ReferralRewardOrderByWithAggregationInput = {
    id?: SortOrder
    referralId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrderInput | SortOrder
    description?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReferralRewardCountOrderByAggregateInput
    _avg?: ReferralRewardAvgOrderByAggregateInput
    _max?: ReferralRewardMaxOrderByAggregateInput
    _min?: ReferralRewardMinOrderByAggregateInput
    _sum?: ReferralRewardSumOrderByAggregateInput
  }

  export type ReferralRewardScalarWhereWithAggregatesInput = {
    AND?: ReferralRewardScalarWhereWithAggregatesInput | ReferralRewardScalarWhereWithAggregatesInput[]
    OR?: ReferralRewardScalarWhereWithAggregatesInput[]
    NOT?: ReferralRewardScalarWhereWithAggregatesInput | ReferralRewardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReferralReward"> | string
    referralId?: StringWithAggregatesFilter<"ReferralReward"> | string
    type?: EnumRewardTypeWithAggregatesFilter<"ReferralReward"> | $Enums.RewardType
    amount?: IntWithAggregatesFilter<"ReferralReward"> | number
    currency?: StringNullableWithAggregatesFilter<"ReferralReward"> | string | null
    description?: StringWithAggregatesFilter<"ReferralReward"> | string
    isClaimed?: BoolWithAggregatesFilter<"ReferralReward"> | boolean
    claimedAt?: DateTimeNullableWithAggregatesFilter<"ReferralReward"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ReferralReward"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ReferralReward"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReferralReward"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    stream?: StreamCreateNestedOneWithoutUsersInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionCreateNestedManyWithoutUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeCreateNestedOneWithoutUserInput
    referralsMade?: ReferralCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportCreateNestedManyWithoutReviewedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionUncheckedCreateNestedManyWithoutUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeUncheckedCreateNestedOneWithoutUserInput
    referralsMade?: ReferralUncheckedCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralUncheckedCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportUncheckedCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stream?: StreamUpdateOneWithoutUsersNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUpdateManyWithoutUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUncheckedUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUncheckedUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUncheckedUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUncheckedUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StreamCreateInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: SubjectCreateNestedManyWithoutStreamInput
    users?: UserCreateNestedManyWithoutStreamInput
  }

  export type StreamUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: SubjectUncheckedCreateNestedManyWithoutStreamInput
    users?: UserUncheckedCreateNestedManyWithoutStreamInput
  }

  export type StreamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUpdateManyWithoutStreamNestedInput
    users?: UserUpdateManyWithoutStreamNestedInput
  }

  export type StreamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUncheckedUpdateManyWithoutStreamNestedInput
    users?: UserUncheckedUpdateManyWithoutStreamNestedInput
  }

  export type StreamCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StreamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StreamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stream: StreamCreateNestedOneWithoutSubjectsInput
    topics?: TopicCreateNestedManyWithoutSubjectInput
    questions?: QuestionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    streamId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutSubjectInput
    questions?: QuestionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stream?: StreamUpdateOneRequiredWithoutSubjectsNestedInput
    topics?: TopicUpdateManyWithoutSubjectNestedInput
    questions?: QuestionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    streamId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutSubjectNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    streamId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    streamId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutTopicsInput
    subtopics?: SubtopicCreateNestedManyWithoutTopicInput
    questions?: QuestionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    subjectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopics?: SubtopicUncheckedCreateNestedManyWithoutTopicInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutTopicsNestedInput
    subtopics?: SubtopicUpdateManyWithoutTopicNestedInput
    questions?: QuestionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopics?: SubtopicUncheckedUpdateManyWithoutTopicNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type TopicCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    subjectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TopicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubtopicCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topic: TopicCreateNestedOneWithoutSubtopicsInput
    questions?: QuestionCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    topicId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutSubtopicsNestedInput
    questions?: QuestionUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    topicId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubtopicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubtopicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject?: SubjectCreateNestedOneWithoutQuestionsInput
    topic?: TopicCreateNestedOneWithoutQuestionsInput
    subtopic?: SubtopicCreateNestedOneWithoutQuestionsInput
    tags?: QuestionTagCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    topicId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: QuestionTagUncheckedCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportUncheckedCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneWithoutQuestionsNestedInput
    topic?: TopicUpdateOneWithoutQuestionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutQuestionsNestedInput
    tags?: QuestionTagUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUncheckedUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    topicId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionOptionCreateInput = {
    id?: string
    text: string
    isCorrect?: boolean
    order?: number
    question: QuestionCreateNestedOneWithoutOptionsInput
    selectedByAnswers?: ExamAnswerCreateNestedManyWithoutSelectedOptionInput
  }

  export type QuestionOptionUncheckedCreateInput = {
    id?: string
    questionId: string
    text: string
    isCorrect?: boolean
    order?: number
    selectedByAnswers?: ExamAnswerUncheckedCreateNestedManyWithoutSelectedOptionInput
  }

  export type QuestionOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    question?: QuestionUpdateOneRequiredWithoutOptionsNestedInput
    selectedByAnswers?: ExamAnswerUpdateManyWithoutSelectedOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    selectedByAnswers?: ExamAnswerUncheckedUpdateManyWithoutSelectedOptionNestedInput
  }

  export type QuestionOptionCreateManyInput = {
    id?: string
    questionId: string
    text: string
    isCorrect?: boolean
    order?: number
  }

  export type QuestionOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
  }

  export type TagCreateInput = {
    id?: string
    name: string
    questions?: QuestionTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    questions?: QuestionTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    questions?: QuestionTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    questions?: QuestionTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionTagCreateInput = {
    question: QuestionCreateNestedOneWithoutTagsInput
    tag: TagCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionTagUncheckedCreateInput = {
    questionId: string
    tagId: string
  }

  export type QuestionTagUpdateInput = {
    question?: QuestionUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionTagUncheckedUpdateInput = {
    questionId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionTagCreateManyInput = {
    questionId: string
    tagId: string
  }

  export type QuestionTagUpdateManyMutationInput = {

  }

  export type QuestionTagUncheckedUpdateManyInput = {
    questionId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionReportCreateInput = {
    id?: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    question: QuestionCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutQuestionReportsInput
    suggestedOptions?: QuestionReportOptionCreateNestedManyWithoutReportInput
    reviewedBy?: UserCreateNestedOneWithoutReviewedReportsInput
  }

  export type QuestionReportUncheckedCreateInput = {
    id?: string
    questionId: string
    userId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedById?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    suggestedOptions?: QuestionReportOptionUncheckedCreateNestedManyWithoutReportInput
  }

  export type QuestionReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionReportsNestedInput
    suggestedOptions?: QuestionReportOptionUpdateManyWithoutReportNestedInput
    reviewedBy?: UserUpdateOneWithoutReviewedReportsNestedInput
  }

  export type QuestionReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestedOptions?: QuestionReportOptionUncheckedUpdateManyWithoutReportNestedInput
  }

  export type QuestionReportCreateManyInput = {
    id?: string
    questionId: string
    userId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedById?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionReportOptionCreateInput = {
    id?: string
    text: string
    isCorrect?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    report: QuestionReportCreateNestedOneWithoutSuggestedOptionsInput
  }

  export type QuestionReportOptionUncheckedCreateInput = {
    id?: string
    reportId: string
    text: string
    isCorrect?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionReportOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: QuestionReportUpdateOneRequiredWithoutSuggestedOptionsNestedInput
  }

  export type QuestionReportOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionReportOptionCreateManyInput = {
    id?: string
    reportId: string
    text: string
    isCorrect?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionReportOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionReportOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAlternativeExplanationCreateInput = {
    id?: string
    explanation: string
    source: string
    reportId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    question: QuestionCreateNestedOneWithoutAlternativeExplanationsInput
  }

  export type QuestionAlternativeExplanationUncheckedCreateInput = {
    id?: string
    questionId: string
    explanation: string
    source: string
    reportId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionAlternativeExplanationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutAlternativeExplanationsNestedInput
  }

  export type QuestionAlternativeExplanationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAlternativeExplanationCreateManyInput = {
    id?: string
    questionId: string
    explanation: string
    source: string
    reportId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionAlternativeExplanationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAlternativeExplanationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamPaperCreateInput = {
    id?: string
    title: string
    description?: string | null
    subjectIds?: ExamPaperCreatesubjectIdsInput | string[]
    topicIds?: ExamPaperCreatetopicIdsInput | string[]
    subtopicIds?: ExamPaperCreatesubtopicIdsInput | string[]
    questionIds?: ExamPaperCreatequestionIdsInput | string[]
    timeLimitMin?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: ExamSubmissionCreateNestedManyWithoutExamPaperInput
  }

  export type ExamPaperUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    subjectIds?: ExamPaperCreatesubjectIdsInput | string[]
    topicIds?: ExamPaperCreatetopicIdsInput | string[]
    subtopicIds?: ExamPaperCreatesubtopicIdsInput | string[]
    questionIds?: ExamPaperCreatequestionIdsInput | string[]
    timeLimitMin?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: ExamSubmissionUncheckedCreateNestedManyWithoutExamPaperInput
  }

  export type ExamPaperUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectIds?: ExamPaperUpdatesubjectIdsInput | string[]
    topicIds?: ExamPaperUpdatetopicIdsInput | string[]
    subtopicIds?: ExamPaperUpdatesubtopicIdsInput | string[]
    questionIds?: ExamPaperUpdatequestionIdsInput | string[]
    timeLimitMin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: ExamSubmissionUpdateManyWithoutExamPaperNestedInput
  }

  export type ExamPaperUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectIds?: ExamPaperUpdatesubjectIdsInput | string[]
    topicIds?: ExamPaperUpdatetopicIdsInput | string[]
    subtopicIds?: ExamPaperUpdatesubtopicIdsInput | string[]
    questionIds?: ExamPaperUpdatequestionIdsInput | string[]
    timeLimitMin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: ExamSubmissionUncheckedUpdateManyWithoutExamPaperNestedInput
  }

  export type ExamPaperCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    subjectIds?: ExamPaperCreatesubjectIdsInput | string[]
    topicIds?: ExamPaperCreatetopicIdsInput | string[]
    subtopicIds?: ExamPaperCreatesubtopicIdsInput | string[]
    questionIds?: ExamPaperCreatequestionIdsInput | string[]
    timeLimitMin?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamPaperUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectIds?: ExamPaperUpdatesubjectIdsInput | string[]
    topicIds?: ExamPaperUpdatetopicIdsInput | string[]
    subtopicIds?: ExamPaperUpdatesubtopicIdsInput | string[]
    questionIds?: ExamPaperUpdatequestionIdsInput | string[]
    timeLimitMin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamPaperUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectIds?: ExamPaperUpdatesubjectIdsInput | string[]
    topicIds?: ExamPaperUpdatetopicIdsInput | string[]
    subtopicIds?: ExamPaperUpdatesubtopicIdsInput | string[]
    questionIds?: ExamPaperUpdatequestionIdsInput | string[]
    timeLimitMin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamSubmissionCreateInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
    user: UserCreateNestedOneWithoutExamSubmissionsInput
    examPaper: ExamPaperCreateNestedOneWithoutSubmissionsInput
    answers?: ExamAnswerCreateNestedManyWithoutSubmissionInput
  }

  export type ExamSubmissionUncheckedCreateInput = {
    id?: string
    userId: string
    examPaperId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type ExamSubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutExamSubmissionsNestedInput
    examPaper?: ExamPaperUpdateOneRequiredWithoutSubmissionsNestedInput
    answers?: ExamAnswerUpdateManyWithoutSubmissionNestedInput
  }

  export type ExamSubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    examPaperId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: ExamAnswerUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type ExamSubmissionCreateManyInput = {
    id?: string
    userId: string
    examPaperId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
  }

  export type ExamSubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ExamSubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    examPaperId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ExamAnswerCreateInput = {
    id?: string
    isCorrect?: boolean
    submission: ExamSubmissionCreateNestedOneWithoutAnswersInput
    question: QuestionCreateNestedOneWithoutAnswersInput
    selectedOption?: QuestionOptionCreateNestedOneWithoutSelectedByAnswersInput
  }

  export type ExamAnswerUncheckedCreateInput = {
    id?: string
    submissionId: string
    questionId: string
    selectedOptionId?: string | null
    isCorrect?: boolean
  }

  export type ExamAnswerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submission?: ExamSubmissionUpdateOneRequiredWithoutAnswersNestedInput
    question?: QuestionUpdateOneRequiredWithoutAnswersNestedInput
    selectedOption?: QuestionOptionUpdateOneWithoutSelectedByAnswersNestedInput
  }

  export type ExamAnswerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    selectedOptionId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExamAnswerCreateManyInput = {
    id?: string
    submissionId: string
    questionId: string
    selectedOptionId?: string | null
    isCorrect?: boolean
  }

  export type ExamAnswerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExamAnswerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    selectedOptionId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlanCreateInput = {
    id?: string
    name: string
    description?: string | null
    priceCents: number
    currency?: string
    interval?: $Enums.PlanInterval
    planType?: $Enums.PlanType
    stripePriceId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: SubscriptionCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    priceCents: number
    currency?: string
    interval?: $Enums.PlanInterval
    planType?: $Enums.PlanType
    stripePriceId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: EnumPlanIntervalFieldUpdateOperationsInput | $Enums.PlanInterval
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: SubscriptionUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: EnumPlanIntervalFieldUpdateOperationsInput | $Enums.PlanInterval
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PlanCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    priceCents: number
    currency?: string
    interval?: $Enums.PlanInterval
    planType?: $Enums.PlanType
    stripePriceId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: EnumPlanIntervalFieldUpdateOperationsInput | $Enums.PlanInterval
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: EnumPlanIntervalFieldUpdateOperationsInput | $Enums.PlanInterval
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    status?: $Enums.SubscriptionStatus
    startedAt?: Date | string
    endsAt?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubId?: string | null
    stripeStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionsInput
    plan: PlanCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    userId: string
    planId: string
    status?: $Enums.SubscriptionStatus
    startedAt?: Date | string
    endsAt?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubId?: string | null
    stripeStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
    plan?: PlanUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    userId: string
    planId: string
    status?: $Enums.SubscriptionStatus
    startedAt?: Date | string
    endsAt?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubId?: string | null
    stripeStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCreateInput = {
    id?: string
    code: string
    type: $Enums.OtpType
    target: string
    expiresAt: Date | string
    consumed?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOtpsInput
  }

  export type OtpUncheckedCreateInput = {
    id?: string
    userId: string
    code: string
    type: $Enums.OtpType
    target: string
    expiresAt: Date | string
    consumed?: boolean
    createdAt?: Date | string
  }

  export type OtpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumOtpTypeFieldUpdateOperationsInput | $Enums.OtpType
    target?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOtpsNestedInput
  }

  export type OtpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumOtpTypeFieldUpdateOperationsInput | $Enums.OtpType
    target?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCreateManyInput = {
    id?: string
    userId: string
    code: string
    type: $Enums.OtpType
    target: string
    expiresAt: Date | string
    consumed?: boolean
    createdAt?: Date | string
  }

  export type OtpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumOtpTypeFieldUpdateOperationsInput | $Enums.OtpType
    target?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumOtpTypeFieldUpdateOperationsInput | $Enums.OtpType
    target?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeCreateInput = {
    id?: string
    code: string
    isActive?: boolean
    usageCount?: number
    maxUsage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReferralCodeInput
    referrals?: ReferralCreateNestedManyWithoutReferralCodeInput
  }

  export type ReferralCodeUncheckedCreateInput = {
    id?: string
    userId: string
    code: string
    isActive?: boolean
    usageCount?: number
    maxUsage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referrals?: ReferralUncheckedCreateNestedManyWithoutReferralCodeInput
  }

  export type ReferralCodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    maxUsage?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReferralCodeNestedInput
    referrals?: ReferralUpdateManyWithoutReferralCodeNestedInput
  }

  export type ReferralCodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    maxUsage?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referrals?: ReferralUncheckedUpdateManyWithoutReferralCodeNestedInput
  }

  export type ReferralCodeCreateManyInput = {
    id?: string
    userId: string
    code: string
    isActive?: boolean
    usageCount?: number
    maxUsage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralCodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    maxUsage?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    maxUsage?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCreateInput = {
    id?: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referrer: UserCreateNestedOneWithoutReferralsMadeInput
    referee: UserCreateNestedOneWithoutReferralReceivedInput
    referralCode: ReferralCodeCreateNestedOneWithoutReferralsInput
    rewards?: ReferralRewardCreateNestedManyWithoutReferralInput
  }

  export type ReferralUncheckedCreateInput = {
    id?: string
    referrerId: string
    refereeId: string
    referralCodeId: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rewards?: ReferralRewardUncheckedCreateNestedManyWithoutReferralInput
  }

  export type ReferralUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referrer?: UserUpdateOneRequiredWithoutReferralsMadeNestedInput
    referee?: UserUpdateOneRequiredWithoutReferralReceivedNestedInput
    referralCode?: ReferralCodeUpdateOneRequiredWithoutReferralsNestedInput
    rewards?: ReferralRewardUpdateManyWithoutReferralNestedInput
  }

  export type ReferralUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralCodeId?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rewards?: ReferralRewardUncheckedUpdateManyWithoutReferralNestedInput
  }

  export type ReferralCreateManyInput = {
    id?: string
    referrerId: string
    refereeId: string
    referralCodeId: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralCodeId?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralRewardCreateInput = {
    id?: string
    type: $Enums.RewardType
    amount: number
    currency?: string | null
    description: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referral: ReferralCreateNestedOneWithoutRewardsInput
  }

  export type ReferralRewardUncheckedCreateInput = {
    id?: string
    referralId: string
    type: $Enums.RewardType
    amount: number
    currency?: string | null
    description: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralRewardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referral?: ReferralUpdateOneRequiredWithoutRewardsNestedInput
  }

  export type ReferralRewardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    referralId?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralRewardCreateManyInput = {
    id?: string
    referralId: string
    type: $Enums.RewardType
    amount: number
    currency?: string | null
    description: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralRewardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralRewardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    referralId?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StreamNullableScalarRelationFilter = {
    is?: StreamWhereInput | null
    isNot?: StreamWhereInput | null
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type ExamSubmissionListRelationFilter = {
    every?: ExamSubmissionWhereInput
    some?: ExamSubmissionWhereInput
    none?: ExamSubmissionWhereInput
  }

  export type OtpListRelationFilter = {
    every?: OtpWhereInput
    some?: OtpWhereInput
    none?: OtpWhereInput
  }

  export type ReferralCodeNullableScalarRelationFilter = {
    is?: ReferralCodeWhereInput | null
    isNot?: ReferralCodeWhereInput | null
  }

  export type ReferralListRelationFilter = {
    every?: ReferralWhereInput
    some?: ReferralWhereInput
    none?: ReferralWhereInput
  }

  export type ReferralNullableScalarRelationFilter = {
    is?: ReferralWhereInput | null
    isNot?: ReferralWhereInput | null
  }

  export type QuestionReportListRelationFilter = {
    every?: QuestionReportWhereInput
    some?: QuestionReportWhereInput
    none?: QuestionReportWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamSubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OtpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferralOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    hashedPassword?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    streamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trialStartedAt?: SortOrder
    trialEndsAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    hashedPassword?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    streamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trialStartedAt?: SortOrder
    trialEndsAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    hashedPassword?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    streamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trialStartedAt?: SortOrder
    trialEndsAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StreamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StreamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StreamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StreamScalarRelationFilter = {
    is?: StreamWhereInput
    isNot?: StreamWhereInput
  }

  export type TopicListRelationFilter = {
    every?: TopicWhereInput
    some?: TopicWhereInput
    none?: TopicWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type TopicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectStreamIdNameCompoundUniqueInput = {
    streamId: string
    name: string
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    streamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    streamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    streamId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectScalarRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type SubtopicListRelationFilter = {
    every?: SubtopicWhereInput
    some?: SubtopicWhereInput
    none?: SubtopicWhereInput
  }

  export type SubtopicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TopicSubjectIdNameCompoundUniqueInput = {
    subjectId: string
    name: string
  }

  export type TopicCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subjectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TopicMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subjectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TopicMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subjectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TopicScalarRelationFilter = {
    is?: TopicWhereInput
    isNot?: TopicWhereInput
  }

  export type SubtopicTopicIdNameCompoundUniqueInput = {
    topicId: string
    name: string
  }

  export type SubtopicCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubtopicMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubtopicMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    topicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SubjectNullableScalarRelationFilter = {
    is?: SubjectWhereInput | null
    isNot?: SubjectWhereInput | null
  }

  export type TopicNullableScalarRelationFilter = {
    is?: TopicWhereInput | null
    isNot?: TopicWhereInput | null
  }

  export type SubtopicNullableScalarRelationFilter = {
    is?: SubtopicWhereInput | null
    isNot?: SubtopicWhereInput | null
  }

  export type QuestionTagListRelationFilter = {
    every?: QuestionTagWhereInput
    some?: QuestionTagWhereInput
    none?: QuestionTagWhereInput
  }

  export type QuestionOptionListRelationFilter = {
    every?: QuestionOptionWhereInput
    some?: QuestionOptionWhereInput
    none?: QuestionOptionWhereInput
  }

  export type ExamAnswerListRelationFilter = {
    every?: ExamAnswerWhereInput
    some?: ExamAnswerWhereInput
    none?: ExamAnswerWhereInput
  }

  export type QuestionAlternativeExplanationListRelationFilter = {
    every?: QuestionAlternativeExplanationWhereInput
    some?: QuestionAlternativeExplanationWhereInput
    none?: QuestionAlternativeExplanationWhereInput
  }

  export type QuestionTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionAlternativeExplanationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    stem?: SortOrder
    explanation?: SortOrder
    difficulty?: SortOrder
    yearAppeared?: SortOrder
    isPreviousYear?: SortOrder
    isAIGenerated?: SortOrder
    aiPrompt?: SortOrder
    subjectId?: SortOrder
    topicId?: SortOrder
    subtopicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    yearAppeared?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    stem?: SortOrder
    explanation?: SortOrder
    difficulty?: SortOrder
    yearAppeared?: SortOrder
    isPreviousYear?: SortOrder
    isAIGenerated?: SortOrder
    aiPrompt?: SortOrder
    subjectId?: SortOrder
    topicId?: SortOrder
    subtopicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    stem?: SortOrder
    explanation?: SortOrder
    difficulty?: SortOrder
    yearAppeared?: SortOrder
    isPreviousYear?: SortOrder
    isAIGenerated?: SortOrder
    aiPrompt?: SortOrder
    subjectId?: SortOrder
    topicId?: SortOrder
    subtopicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    yearAppeared?: SortOrder
  }

  export type EnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type QuestionOptionCountOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
  }

  export type QuestionOptionAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type QuestionOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
  }

  export type QuestionOptionMinOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
  }

  export type QuestionOptionSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type QuestionTagQuestionIdTagIdCompoundUniqueInput = {
    questionId: string
    tagId: string
  }

  export type QuestionTagCountOrderByAggregateInput = {
    questionId?: SortOrder
    tagId?: SortOrder
  }

  export type QuestionTagMaxOrderByAggregateInput = {
    questionId?: SortOrder
    tagId?: SortOrder
  }

  export type QuestionTagMinOrderByAggregateInput = {
    questionId?: SortOrder
    tagId?: SortOrder
  }

  export type EnumQuestionReportTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionReportType | EnumQuestionReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionReportType[] | ListEnumQuestionReportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionReportType[] | ListEnumQuestionReportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionReportTypeFilter<$PrismaModel> | $Enums.QuestionReportType
  }

  export type EnumReportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportStatus | EnumReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportStatus[] | ListEnumReportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportStatus[] | ListEnumReportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReportStatusFilter<$PrismaModel> | $Enums.ReportStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QuestionReportOptionListRelationFilter = {
    every?: QuestionReportOptionWhereInput
    some?: QuestionReportOptionWhereInput
    none?: QuestionReportOptionWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type QuestionReportOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionReportCountOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    reportType?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    status?: SortOrder
    alternativeExplanation?: SortOrder
    suggestedAnswer?: SortOrder
    reviewedById?: SortOrder
    reviewedAt?: SortOrder
    reviewNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionReportMaxOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    reportType?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    status?: SortOrder
    alternativeExplanation?: SortOrder
    suggestedAnswer?: SortOrder
    reviewedById?: SortOrder
    reviewedAt?: SortOrder
    reviewNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionReportMinOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    userId?: SortOrder
    reportType?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    status?: SortOrder
    alternativeExplanation?: SortOrder
    suggestedAnswer?: SortOrder
    reviewedById?: SortOrder
    reviewedAt?: SortOrder
    reviewNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumQuestionReportTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionReportType | EnumQuestionReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionReportType[] | ListEnumQuestionReportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionReportType[] | ListEnumQuestionReportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionReportTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionReportType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionReportTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionReportTypeFilter<$PrismaModel>
  }

  export type EnumReportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportStatus | EnumReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportStatus[] | ListEnumReportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportStatus[] | ListEnumReportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReportStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportStatusFilter<$PrismaModel>
    _max?: NestedEnumReportStatusFilter<$PrismaModel>
  }

  export type QuestionReportScalarRelationFilter = {
    is?: QuestionReportWhereInput
    isNot?: QuestionReportWhereInput
  }

  export type QuestionReportOptionCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionReportOptionAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type QuestionReportOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionReportOptionMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionReportOptionSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type QuestionAlternativeExplanationCountOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    explanation?: SortOrder
    source?: SortOrder
    reportId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAlternativeExplanationMaxOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    explanation?: SortOrder
    source?: SortOrder
    reportId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAlternativeExplanationMinOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    explanation?: SortOrder
    source?: SortOrder
    reportId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ExamPaperCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    subjectIds?: SortOrder
    topicIds?: SortOrder
    subtopicIds?: SortOrder
    questionIds?: SortOrder
    timeLimitMin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamPaperAvgOrderByAggregateInput = {
    timeLimitMin?: SortOrder
  }

  export type ExamPaperMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    timeLimitMin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamPaperMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    timeLimitMin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExamPaperSumOrderByAggregateInput = {
    timeLimitMin?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ExamPaperScalarRelationFilter = {
    is?: ExamPaperWhereInput
    isNot?: ExamPaperWhereInput
  }

  export type ExamSubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    examPaperId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    totalQuestions?: SortOrder
    correctCount?: SortOrder
    scorePercent?: SortOrder
  }

  export type ExamSubmissionAvgOrderByAggregateInput = {
    totalQuestions?: SortOrder
    correctCount?: SortOrder
    scorePercent?: SortOrder
  }

  export type ExamSubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    examPaperId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    totalQuestions?: SortOrder
    correctCount?: SortOrder
    scorePercent?: SortOrder
  }

  export type ExamSubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    examPaperId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    totalQuestions?: SortOrder
    correctCount?: SortOrder
    scorePercent?: SortOrder
  }

  export type ExamSubmissionSumOrderByAggregateInput = {
    totalQuestions?: SortOrder
    correctCount?: SortOrder
    scorePercent?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ExamSubmissionScalarRelationFilter = {
    is?: ExamSubmissionWhereInput
    isNot?: ExamSubmissionWhereInput
  }

  export type QuestionOptionNullableScalarRelationFilter = {
    is?: QuestionOptionWhereInput | null
    isNot?: QuestionOptionWhereInput | null
  }

  export type ExamAnswerSubmissionIdQuestionIdCompoundUniqueInput = {
    submissionId: string
    questionId: string
  }

  export type ExamAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    submissionId?: SortOrder
    questionId?: SortOrder
    selectedOptionId?: SortOrder
    isCorrect?: SortOrder
  }

  export type ExamAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    submissionId?: SortOrder
    questionId?: SortOrder
    selectedOptionId?: SortOrder
    isCorrect?: SortOrder
  }

  export type ExamAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    submissionId?: SortOrder
    questionId?: SortOrder
    selectedOptionId?: SortOrder
    isCorrect?: SortOrder
  }

  export type EnumPlanIntervalFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanInterval | EnumPlanIntervalFieldRefInput<$PrismaModel>
    in?: $Enums.PlanInterval[] | ListEnumPlanIntervalFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanInterval[] | ListEnumPlanIntervalFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanIntervalFilter<$PrismaModel> | $Enums.PlanInterval
  }

  export type EnumPlanTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeFilter<$PrismaModel> | $Enums.PlanType
  }

  export type PlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    planType?: SortOrder
    stripePriceId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanAvgOrderByAggregateInput = {
    priceCents?: SortOrder
  }

  export type PlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    planType?: SortOrder
    stripePriceId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceCents?: SortOrder
    currency?: SortOrder
    interval?: SortOrder
    planType?: SortOrder
    stripePriceId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanSumOrderByAggregateInput = {
    priceCents?: SortOrder
  }

  export type EnumPlanIntervalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanInterval | EnumPlanIntervalFieldRefInput<$PrismaModel>
    in?: $Enums.PlanInterval[] | ListEnumPlanIntervalFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanInterval[] | ListEnumPlanIntervalFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanIntervalWithAggregatesFilter<$PrismaModel> | $Enums.PlanInterval
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanIntervalFilter<$PrismaModel>
    _max?: NestedEnumPlanIntervalFilter<$PrismaModel>
  }

  export type EnumPlanTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlanType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanTypeFilter<$PrismaModel>
    _max?: NestedEnumPlanTypeFilter<$PrismaModel>
  }

  export type EnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type PlanScalarRelationFilter = {
    is?: PlanWhereInput
    isNot?: PlanWhereInput
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubId?: SortOrder
    stripeStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubId?: SortOrder
    stripeStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubId?: SortOrder
    stripeStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type EnumOtpTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OtpType | EnumOtpTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OtpType[] | ListEnumOtpTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OtpType[] | ListEnumOtpTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOtpTypeFilter<$PrismaModel> | $Enums.OtpType
  }

  export type OtpCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    type?: SortOrder
    target?: SortOrder
    expiresAt?: SortOrder
    consumed?: SortOrder
    createdAt?: SortOrder
  }

  export type OtpMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    type?: SortOrder
    target?: SortOrder
    expiresAt?: SortOrder
    consumed?: SortOrder
    createdAt?: SortOrder
  }

  export type OtpMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    type?: SortOrder
    target?: SortOrder
    expiresAt?: SortOrder
    consumed?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumOtpTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OtpType | EnumOtpTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OtpType[] | ListEnumOtpTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OtpType[] | ListEnumOtpTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOtpTypeWithAggregatesFilter<$PrismaModel> | $Enums.OtpType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOtpTypeFilter<$PrismaModel>
    _max?: NestedEnumOtpTypeFilter<$PrismaModel>
  }

  export type ReferralCodeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    maxUsage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralCodeAvgOrderByAggregateInput = {
    usageCount?: SortOrder
    maxUsage?: SortOrder
  }

  export type ReferralCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    maxUsage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralCodeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    maxUsage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralCodeSumOrderByAggregateInput = {
    usageCount?: SortOrder
    maxUsage?: SortOrder
  }

  export type EnumReferralStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralStatus | EnumReferralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralStatusFilter<$PrismaModel> | $Enums.ReferralStatus
  }

  export type ReferralCodeScalarRelationFilter = {
    is?: ReferralCodeWhereInput
    isNot?: ReferralCodeWhereInput
  }

  export type ReferralRewardListRelationFilter = {
    every?: ReferralRewardWhereInput
    some?: ReferralRewardWhereInput
    none?: ReferralRewardWhereInput
  }

  export type ReferralRewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferralReferrerIdRefereeIdCompoundUniqueInput = {
    referrerId: string
    refereeId: string
  }

  export type ReferralCountOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCodeId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralMaxOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCodeId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralMinOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCodeId?: SortOrder
    status?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumReferralStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralStatus | EnumReferralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReferralStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReferralStatusFilter<$PrismaModel>
    _max?: NestedEnumReferralStatusFilter<$PrismaModel>
  }

  export type EnumRewardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeFilter<$PrismaModel> | $Enums.RewardType
  }

  export type ReferralScalarRelationFilter = {
    is?: ReferralWhereInput
    isNot?: ReferralWhereInput
  }

  export type ReferralRewardCountOrderByAggregateInput = {
    id?: SortOrder
    referralId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralRewardAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ReferralRewardMaxOrderByAggregateInput = {
    id?: SortOrder
    referralId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralRewardMinOrderByAggregateInput = {
    id?: SortOrder
    referralId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrder
    isClaimed?: SortOrder
    claimedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReferralRewardSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumRewardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardTypeFilter<$PrismaModel>
  }

  export type StreamCreateNestedOneWithoutUsersInput = {
    create?: XOR<StreamCreateWithoutUsersInput, StreamUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StreamCreateOrConnectWithoutUsersInput
    connect?: StreamWhereUniqueInput
  }

  export type SubscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type ExamSubmissionCreateNestedManyWithoutUserInput = {
    create?: XOR<ExamSubmissionCreateWithoutUserInput, ExamSubmissionUncheckedCreateWithoutUserInput> | ExamSubmissionCreateWithoutUserInput[] | ExamSubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutUserInput | ExamSubmissionCreateOrConnectWithoutUserInput[]
    createMany?: ExamSubmissionCreateManyUserInputEnvelope
    connect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
  }

  export type OtpCreateNestedManyWithoutUserInput = {
    create?: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput> | OtpCreateWithoutUserInput[] | OtpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpCreateOrConnectWithoutUserInput | OtpCreateOrConnectWithoutUserInput[]
    createMany?: OtpCreateManyUserInputEnvelope
    connect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
  }

  export type ReferralCodeCreateNestedOneWithoutUserInput = {
    create?: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUserInput
    connect?: ReferralCodeWhereUniqueInput
  }

  export type ReferralCreateNestedManyWithoutReferrerInput = {
    create?: XOR<ReferralCreateWithoutReferrerInput, ReferralUncheckedCreateWithoutReferrerInput> | ReferralCreateWithoutReferrerInput[] | ReferralUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferrerInput | ReferralCreateOrConnectWithoutReferrerInput[]
    createMany?: ReferralCreateManyReferrerInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type ReferralCreateNestedOneWithoutRefereeInput = {
    create?: XOR<ReferralCreateWithoutRefereeInput, ReferralUncheckedCreateWithoutRefereeInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutRefereeInput
    connect?: ReferralWhereUniqueInput
  }

  export type QuestionReportCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionReportCreateWithoutUserInput, QuestionReportUncheckedCreateWithoutUserInput> | QuestionReportCreateWithoutUserInput[] | QuestionReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutUserInput | QuestionReportCreateOrConnectWithoutUserInput[]
    createMany?: QuestionReportCreateManyUserInputEnvelope
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
  }

  export type QuestionReportCreateNestedManyWithoutReviewedByInput = {
    create?: XOR<QuestionReportCreateWithoutReviewedByInput, QuestionReportUncheckedCreateWithoutReviewedByInput> | QuestionReportCreateWithoutReviewedByInput[] | QuestionReportUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutReviewedByInput | QuestionReportCreateOrConnectWithoutReviewedByInput[]
    createMany?: QuestionReportCreateManyReviewedByInputEnvelope
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type ExamSubmissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ExamSubmissionCreateWithoutUserInput, ExamSubmissionUncheckedCreateWithoutUserInput> | ExamSubmissionCreateWithoutUserInput[] | ExamSubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutUserInput | ExamSubmissionCreateOrConnectWithoutUserInput[]
    createMany?: ExamSubmissionCreateManyUserInputEnvelope
    connect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
  }

  export type OtpUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput> | OtpCreateWithoutUserInput[] | OtpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpCreateOrConnectWithoutUserInput | OtpCreateOrConnectWithoutUserInput[]
    createMany?: OtpCreateManyUserInputEnvelope
    connect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
  }

  export type ReferralCodeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUserInput
    connect?: ReferralCodeWhereUniqueInput
  }

  export type ReferralUncheckedCreateNestedManyWithoutReferrerInput = {
    create?: XOR<ReferralCreateWithoutReferrerInput, ReferralUncheckedCreateWithoutReferrerInput> | ReferralCreateWithoutReferrerInput[] | ReferralUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferrerInput | ReferralCreateOrConnectWithoutReferrerInput[]
    createMany?: ReferralCreateManyReferrerInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type ReferralUncheckedCreateNestedOneWithoutRefereeInput = {
    create?: XOR<ReferralCreateWithoutRefereeInput, ReferralUncheckedCreateWithoutRefereeInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutRefereeInput
    connect?: ReferralWhereUniqueInput
  }

  export type QuestionReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<QuestionReportCreateWithoutUserInput, QuestionReportUncheckedCreateWithoutUserInput> | QuestionReportCreateWithoutUserInput[] | QuestionReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutUserInput | QuestionReportCreateOrConnectWithoutUserInput[]
    createMany?: QuestionReportCreateManyUserInputEnvelope
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
  }

  export type QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput = {
    create?: XOR<QuestionReportCreateWithoutReviewedByInput, QuestionReportUncheckedCreateWithoutReviewedByInput> | QuestionReportCreateWithoutReviewedByInput[] | QuestionReportUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutReviewedByInput | QuestionReportCreateOrConnectWithoutReviewedByInput[]
    createMany?: QuestionReportCreateManyReviewedByInputEnvelope
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type StreamUpdateOneWithoutUsersNestedInput = {
    create?: XOR<StreamCreateWithoutUsersInput, StreamUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StreamCreateOrConnectWithoutUsersInput
    upsert?: StreamUpsertWithoutUsersInput
    disconnect?: StreamWhereInput | boolean
    delete?: StreamWhereInput | boolean
    connect?: StreamWhereUniqueInput
    update?: XOR<XOR<StreamUpdateToOneWithWhereWithoutUsersInput, StreamUpdateWithoutUsersInput>, StreamUncheckedUpdateWithoutUsersInput>
  }

  export type SubscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type ExamSubmissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExamSubmissionCreateWithoutUserInput, ExamSubmissionUncheckedCreateWithoutUserInput> | ExamSubmissionCreateWithoutUserInput[] | ExamSubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutUserInput | ExamSubmissionCreateOrConnectWithoutUserInput[]
    upsert?: ExamSubmissionUpsertWithWhereUniqueWithoutUserInput | ExamSubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExamSubmissionCreateManyUserInputEnvelope
    set?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    disconnect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    delete?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    connect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    update?: ExamSubmissionUpdateWithWhereUniqueWithoutUserInput | ExamSubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExamSubmissionUpdateManyWithWhereWithoutUserInput | ExamSubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExamSubmissionScalarWhereInput | ExamSubmissionScalarWhereInput[]
  }

  export type OtpUpdateManyWithoutUserNestedInput = {
    create?: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput> | OtpCreateWithoutUserInput[] | OtpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpCreateOrConnectWithoutUserInput | OtpCreateOrConnectWithoutUserInput[]
    upsert?: OtpUpsertWithWhereUniqueWithoutUserInput | OtpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OtpCreateManyUserInputEnvelope
    set?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    disconnect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    delete?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    connect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    update?: OtpUpdateWithWhereUniqueWithoutUserInput | OtpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OtpUpdateManyWithWhereWithoutUserInput | OtpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OtpScalarWhereInput | OtpScalarWhereInput[]
  }

  export type ReferralCodeUpdateOneWithoutUserNestedInput = {
    create?: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUserInput
    upsert?: ReferralCodeUpsertWithoutUserInput
    disconnect?: ReferralCodeWhereInput | boolean
    delete?: ReferralCodeWhereInput | boolean
    connect?: ReferralCodeWhereUniqueInput
    update?: XOR<XOR<ReferralCodeUpdateToOneWithWhereWithoutUserInput, ReferralCodeUpdateWithoutUserInput>, ReferralCodeUncheckedUpdateWithoutUserInput>
  }

  export type ReferralUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<ReferralCreateWithoutReferrerInput, ReferralUncheckedCreateWithoutReferrerInput> | ReferralCreateWithoutReferrerInput[] | ReferralUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferrerInput | ReferralCreateOrConnectWithoutReferrerInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutReferrerInput | ReferralUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: ReferralCreateManyReferrerInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutReferrerInput | ReferralUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutReferrerInput | ReferralUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type ReferralUpdateOneWithoutRefereeNestedInput = {
    create?: XOR<ReferralCreateWithoutRefereeInput, ReferralUncheckedCreateWithoutRefereeInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutRefereeInput
    upsert?: ReferralUpsertWithoutRefereeInput
    disconnect?: ReferralWhereInput | boolean
    delete?: ReferralWhereInput | boolean
    connect?: ReferralWhereUniqueInput
    update?: XOR<XOR<ReferralUpdateToOneWithWhereWithoutRefereeInput, ReferralUpdateWithoutRefereeInput>, ReferralUncheckedUpdateWithoutRefereeInput>
  }

  export type QuestionReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionReportCreateWithoutUserInput, QuestionReportUncheckedCreateWithoutUserInput> | QuestionReportCreateWithoutUserInput[] | QuestionReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutUserInput | QuestionReportCreateOrConnectWithoutUserInput[]
    upsert?: QuestionReportUpsertWithWhereUniqueWithoutUserInput | QuestionReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionReportCreateManyUserInputEnvelope
    set?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    disconnect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    delete?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    update?: QuestionReportUpdateWithWhereUniqueWithoutUserInput | QuestionReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionReportUpdateManyWithWhereWithoutUserInput | QuestionReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionReportScalarWhereInput | QuestionReportScalarWhereInput[]
  }

  export type QuestionReportUpdateManyWithoutReviewedByNestedInput = {
    create?: XOR<QuestionReportCreateWithoutReviewedByInput, QuestionReportUncheckedCreateWithoutReviewedByInput> | QuestionReportCreateWithoutReviewedByInput[] | QuestionReportUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutReviewedByInput | QuestionReportCreateOrConnectWithoutReviewedByInput[]
    upsert?: QuestionReportUpsertWithWhereUniqueWithoutReviewedByInput | QuestionReportUpsertWithWhereUniqueWithoutReviewedByInput[]
    createMany?: QuestionReportCreateManyReviewedByInputEnvelope
    set?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    disconnect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    delete?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    update?: QuestionReportUpdateWithWhereUniqueWithoutReviewedByInput | QuestionReportUpdateWithWhereUniqueWithoutReviewedByInput[]
    updateMany?: QuestionReportUpdateManyWithWhereWithoutReviewedByInput | QuestionReportUpdateManyWithWhereWithoutReviewedByInput[]
    deleteMany?: QuestionReportScalarWhereInput | QuestionReportScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExamSubmissionCreateWithoutUserInput, ExamSubmissionUncheckedCreateWithoutUserInput> | ExamSubmissionCreateWithoutUserInput[] | ExamSubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutUserInput | ExamSubmissionCreateOrConnectWithoutUserInput[]
    upsert?: ExamSubmissionUpsertWithWhereUniqueWithoutUserInput | ExamSubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExamSubmissionCreateManyUserInputEnvelope
    set?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    disconnect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    delete?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    connect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    update?: ExamSubmissionUpdateWithWhereUniqueWithoutUserInput | ExamSubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExamSubmissionUpdateManyWithWhereWithoutUserInput | ExamSubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExamSubmissionScalarWhereInput | ExamSubmissionScalarWhereInput[]
  }

  export type OtpUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput> | OtpCreateWithoutUserInput[] | OtpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpCreateOrConnectWithoutUserInput | OtpCreateOrConnectWithoutUserInput[]
    upsert?: OtpUpsertWithWhereUniqueWithoutUserInput | OtpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OtpCreateManyUserInputEnvelope
    set?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    disconnect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    delete?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    connect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    update?: OtpUpdateWithWhereUniqueWithoutUserInput | OtpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OtpUpdateManyWithWhereWithoutUserInput | OtpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OtpScalarWhereInput | OtpScalarWhereInput[]
  }

  export type ReferralCodeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutUserInput
    upsert?: ReferralCodeUpsertWithoutUserInput
    disconnect?: ReferralCodeWhereInput | boolean
    delete?: ReferralCodeWhereInput | boolean
    connect?: ReferralCodeWhereUniqueInput
    update?: XOR<XOR<ReferralCodeUpdateToOneWithWhereWithoutUserInput, ReferralCodeUpdateWithoutUserInput>, ReferralCodeUncheckedUpdateWithoutUserInput>
  }

  export type ReferralUncheckedUpdateManyWithoutReferrerNestedInput = {
    create?: XOR<ReferralCreateWithoutReferrerInput, ReferralUncheckedCreateWithoutReferrerInput> | ReferralCreateWithoutReferrerInput[] | ReferralUncheckedCreateWithoutReferrerInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferrerInput | ReferralCreateOrConnectWithoutReferrerInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutReferrerInput | ReferralUpsertWithWhereUniqueWithoutReferrerInput[]
    createMany?: ReferralCreateManyReferrerInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutReferrerInput | ReferralUpdateWithWhereUniqueWithoutReferrerInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutReferrerInput | ReferralUpdateManyWithWhereWithoutReferrerInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type ReferralUncheckedUpdateOneWithoutRefereeNestedInput = {
    create?: XOR<ReferralCreateWithoutRefereeInput, ReferralUncheckedCreateWithoutRefereeInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutRefereeInput
    upsert?: ReferralUpsertWithoutRefereeInput
    disconnect?: ReferralWhereInput | boolean
    delete?: ReferralWhereInput | boolean
    connect?: ReferralWhereUniqueInput
    update?: XOR<XOR<ReferralUpdateToOneWithWhereWithoutRefereeInput, ReferralUpdateWithoutRefereeInput>, ReferralUncheckedUpdateWithoutRefereeInput>
  }

  export type QuestionReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<QuestionReportCreateWithoutUserInput, QuestionReportUncheckedCreateWithoutUserInput> | QuestionReportCreateWithoutUserInput[] | QuestionReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutUserInput | QuestionReportCreateOrConnectWithoutUserInput[]
    upsert?: QuestionReportUpsertWithWhereUniqueWithoutUserInput | QuestionReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QuestionReportCreateManyUserInputEnvelope
    set?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    disconnect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    delete?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    update?: QuestionReportUpdateWithWhereUniqueWithoutUserInput | QuestionReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QuestionReportUpdateManyWithWhereWithoutUserInput | QuestionReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QuestionReportScalarWhereInput | QuestionReportScalarWhereInput[]
  }

  export type QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput = {
    create?: XOR<QuestionReportCreateWithoutReviewedByInput, QuestionReportUncheckedCreateWithoutReviewedByInput> | QuestionReportCreateWithoutReviewedByInput[] | QuestionReportUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutReviewedByInput | QuestionReportCreateOrConnectWithoutReviewedByInput[]
    upsert?: QuestionReportUpsertWithWhereUniqueWithoutReviewedByInput | QuestionReportUpsertWithWhereUniqueWithoutReviewedByInput[]
    createMany?: QuestionReportCreateManyReviewedByInputEnvelope
    set?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    disconnect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    delete?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    update?: QuestionReportUpdateWithWhereUniqueWithoutReviewedByInput | QuestionReportUpdateWithWhereUniqueWithoutReviewedByInput[]
    updateMany?: QuestionReportUpdateManyWithWhereWithoutReviewedByInput | QuestionReportUpdateManyWithWhereWithoutReviewedByInput[]
    deleteMany?: QuestionReportScalarWhereInput | QuestionReportScalarWhereInput[]
  }

  export type SubjectCreateNestedManyWithoutStreamInput = {
    create?: XOR<SubjectCreateWithoutStreamInput, SubjectUncheckedCreateWithoutStreamInput> | SubjectCreateWithoutStreamInput[] | SubjectUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutStreamInput | SubjectCreateOrConnectWithoutStreamInput[]
    createMany?: SubjectCreateManyStreamInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStreamInput = {
    create?: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput> | UserCreateWithoutStreamInput[] | UserUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStreamInput | UserCreateOrConnectWithoutStreamInput[]
    createMany?: UserCreateManyStreamInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutStreamInput = {
    create?: XOR<SubjectCreateWithoutStreamInput, SubjectUncheckedCreateWithoutStreamInput> | SubjectCreateWithoutStreamInput[] | SubjectUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutStreamInput | SubjectCreateOrConnectWithoutStreamInput[]
    createMany?: SubjectCreateManyStreamInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStreamInput = {
    create?: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput> | UserCreateWithoutStreamInput[] | UserUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStreamInput | UserCreateOrConnectWithoutStreamInput[]
    createMany?: UserCreateManyStreamInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SubjectUpdateManyWithoutStreamNestedInput = {
    create?: XOR<SubjectCreateWithoutStreamInput, SubjectUncheckedCreateWithoutStreamInput> | SubjectCreateWithoutStreamInput[] | SubjectUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutStreamInput | SubjectCreateOrConnectWithoutStreamInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutStreamInput | SubjectUpsertWithWhereUniqueWithoutStreamInput[]
    createMany?: SubjectCreateManyStreamInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutStreamInput | SubjectUpdateWithWhereUniqueWithoutStreamInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutStreamInput | SubjectUpdateManyWithWhereWithoutStreamInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStreamNestedInput = {
    create?: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput> | UserCreateWithoutStreamInput[] | UserUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStreamInput | UserCreateOrConnectWithoutStreamInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStreamInput | UserUpsertWithWhereUniqueWithoutStreamInput[]
    createMany?: UserCreateManyStreamInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStreamInput | UserUpdateWithWhereUniqueWithoutStreamInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStreamInput | UserUpdateManyWithWhereWithoutStreamInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutStreamNestedInput = {
    create?: XOR<SubjectCreateWithoutStreamInput, SubjectUncheckedCreateWithoutStreamInput> | SubjectCreateWithoutStreamInput[] | SubjectUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutStreamInput | SubjectCreateOrConnectWithoutStreamInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutStreamInput | SubjectUpsertWithWhereUniqueWithoutStreamInput[]
    createMany?: SubjectCreateManyStreamInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutStreamInput | SubjectUpdateWithWhereUniqueWithoutStreamInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutStreamInput | SubjectUpdateManyWithWhereWithoutStreamInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStreamNestedInput = {
    create?: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput> | UserCreateWithoutStreamInput[] | UserUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStreamInput | UserCreateOrConnectWithoutStreamInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStreamInput | UserUpsertWithWhereUniqueWithoutStreamInput[]
    createMany?: UserCreateManyStreamInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStreamInput | UserUpdateWithWhereUniqueWithoutStreamInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStreamInput | UserUpdateManyWithWhereWithoutStreamInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type StreamCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<StreamCreateWithoutSubjectsInput, StreamUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: StreamCreateOrConnectWithoutSubjectsInput
    connect?: StreamWhereUniqueInput
  }

  export type TopicCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TopicCreateWithoutSubjectInput, TopicUncheckedCreateWithoutSubjectInput> | TopicCreateWithoutSubjectInput[] | TopicUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TopicCreateOrConnectWithoutSubjectInput | TopicCreateOrConnectWithoutSubjectInput[]
    createMany?: TopicCreateManySubjectInputEnvelope
    connect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
  }

  export type QuestionCreateNestedManyWithoutSubjectInput = {
    create?: XOR<QuestionCreateWithoutSubjectInput, QuestionUncheckedCreateWithoutSubjectInput> | QuestionCreateWithoutSubjectInput[] | QuestionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSubjectInput | QuestionCreateOrConnectWithoutSubjectInput[]
    createMany?: QuestionCreateManySubjectInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type TopicUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TopicCreateWithoutSubjectInput, TopicUncheckedCreateWithoutSubjectInput> | TopicCreateWithoutSubjectInput[] | TopicUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TopicCreateOrConnectWithoutSubjectInput | TopicCreateOrConnectWithoutSubjectInput[]
    createMany?: TopicCreateManySubjectInputEnvelope
    connect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<QuestionCreateWithoutSubjectInput, QuestionUncheckedCreateWithoutSubjectInput> | QuestionCreateWithoutSubjectInput[] | QuestionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSubjectInput | QuestionCreateOrConnectWithoutSubjectInput[]
    createMany?: QuestionCreateManySubjectInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type StreamUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<StreamCreateWithoutSubjectsInput, StreamUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: StreamCreateOrConnectWithoutSubjectsInput
    upsert?: StreamUpsertWithoutSubjectsInput
    connect?: StreamWhereUniqueInput
    update?: XOR<XOR<StreamUpdateToOneWithWhereWithoutSubjectsInput, StreamUpdateWithoutSubjectsInput>, StreamUncheckedUpdateWithoutSubjectsInput>
  }

  export type TopicUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TopicCreateWithoutSubjectInput, TopicUncheckedCreateWithoutSubjectInput> | TopicCreateWithoutSubjectInput[] | TopicUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TopicCreateOrConnectWithoutSubjectInput | TopicCreateOrConnectWithoutSubjectInput[]
    upsert?: TopicUpsertWithWhereUniqueWithoutSubjectInput | TopicUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TopicCreateManySubjectInputEnvelope
    set?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    disconnect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    delete?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    connect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    update?: TopicUpdateWithWhereUniqueWithoutSubjectInput | TopicUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TopicUpdateManyWithWhereWithoutSubjectInput | TopicUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TopicScalarWhereInput | TopicScalarWhereInput[]
  }

  export type QuestionUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<QuestionCreateWithoutSubjectInput, QuestionUncheckedCreateWithoutSubjectInput> | QuestionCreateWithoutSubjectInput[] | QuestionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSubjectInput | QuestionCreateOrConnectWithoutSubjectInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSubjectInput | QuestionUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: QuestionCreateManySubjectInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSubjectInput | QuestionUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSubjectInput | QuestionUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type TopicUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TopicCreateWithoutSubjectInput, TopicUncheckedCreateWithoutSubjectInput> | TopicCreateWithoutSubjectInput[] | TopicUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TopicCreateOrConnectWithoutSubjectInput | TopicCreateOrConnectWithoutSubjectInput[]
    upsert?: TopicUpsertWithWhereUniqueWithoutSubjectInput | TopicUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TopicCreateManySubjectInputEnvelope
    set?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    disconnect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    delete?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    connect?: TopicWhereUniqueInput | TopicWhereUniqueInput[]
    update?: TopicUpdateWithWhereUniqueWithoutSubjectInput | TopicUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TopicUpdateManyWithWhereWithoutSubjectInput | TopicUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TopicScalarWhereInput | TopicScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<QuestionCreateWithoutSubjectInput, QuestionUncheckedCreateWithoutSubjectInput> | QuestionCreateWithoutSubjectInput[] | QuestionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSubjectInput | QuestionCreateOrConnectWithoutSubjectInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSubjectInput | QuestionUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: QuestionCreateManySubjectInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSubjectInput | QuestionUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSubjectInput | QuestionUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type SubjectCreateNestedOneWithoutTopicsInput = {
    create?: XOR<SubjectCreateWithoutTopicsInput, SubjectUncheckedCreateWithoutTopicsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTopicsInput
    connect?: SubjectWhereUniqueInput
  }

  export type SubtopicCreateNestedManyWithoutTopicInput = {
    create?: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput> | SubtopicCreateWithoutTopicInput[] | SubtopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: SubtopicCreateOrConnectWithoutTopicInput | SubtopicCreateOrConnectWithoutTopicInput[]
    createMany?: SubtopicCreateManyTopicInputEnvelope
    connect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
  }

  export type QuestionCreateNestedManyWithoutTopicInput = {
    create?: XOR<QuestionCreateWithoutTopicInput, QuestionUncheckedCreateWithoutTopicInput> | QuestionCreateWithoutTopicInput[] | QuestionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTopicInput | QuestionCreateOrConnectWithoutTopicInput[]
    createMany?: QuestionCreateManyTopicInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type SubtopicUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput> | SubtopicCreateWithoutTopicInput[] | SubtopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: SubtopicCreateOrConnectWithoutTopicInput | SubtopicCreateOrConnectWithoutTopicInput[]
    createMany?: SubtopicCreateManyTopicInputEnvelope
    connect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<QuestionCreateWithoutTopicInput, QuestionUncheckedCreateWithoutTopicInput> | QuestionCreateWithoutTopicInput[] | QuestionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTopicInput | QuestionCreateOrConnectWithoutTopicInput[]
    createMany?: QuestionCreateManyTopicInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type SubjectUpdateOneRequiredWithoutTopicsNestedInput = {
    create?: XOR<SubjectCreateWithoutTopicsInput, SubjectUncheckedCreateWithoutTopicsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTopicsInput
    upsert?: SubjectUpsertWithoutTopicsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutTopicsInput, SubjectUpdateWithoutTopicsInput>, SubjectUncheckedUpdateWithoutTopicsInput>
  }

  export type SubtopicUpdateManyWithoutTopicNestedInput = {
    create?: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput> | SubtopicCreateWithoutTopicInput[] | SubtopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: SubtopicCreateOrConnectWithoutTopicInput | SubtopicCreateOrConnectWithoutTopicInput[]
    upsert?: SubtopicUpsertWithWhereUniqueWithoutTopicInput | SubtopicUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: SubtopicCreateManyTopicInputEnvelope
    set?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    disconnect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    delete?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    connect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    update?: SubtopicUpdateWithWhereUniqueWithoutTopicInput | SubtopicUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: SubtopicUpdateManyWithWhereWithoutTopicInput | SubtopicUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: SubtopicScalarWhereInput | SubtopicScalarWhereInput[]
  }

  export type QuestionUpdateManyWithoutTopicNestedInput = {
    create?: XOR<QuestionCreateWithoutTopicInput, QuestionUncheckedCreateWithoutTopicInput> | QuestionCreateWithoutTopicInput[] | QuestionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTopicInput | QuestionCreateOrConnectWithoutTopicInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutTopicInput | QuestionUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: QuestionCreateManyTopicInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutTopicInput | QuestionUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutTopicInput | QuestionUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type SubtopicUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput> | SubtopicCreateWithoutTopicInput[] | SubtopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: SubtopicCreateOrConnectWithoutTopicInput | SubtopicCreateOrConnectWithoutTopicInput[]
    upsert?: SubtopicUpsertWithWhereUniqueWithoutTopicInput | SubtopicUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: SubtopicCreateManyTopicInputEnvelope
    set?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    disconnect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    delete?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    connect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    update?: SubtopicUpdateWithWhereUniqueWithoutTopicInput | SubtopicUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: SubtopicUpdateManyWithWhereWithoutTopicInput | SubtopicUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: SubtopicScalarWhereInput | SubtopicScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<QuestionCreateWithoutTopicInput, QuestionUncheckedCreateWithoutTopicInput> | QuestionCreateWithoutTopicInput[] | QuestionUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTopicInput | QuestionCreateOrConnectWithoutTopicInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutTopicInput | QuestionUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: QuestionCreateManyTopicInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutTopicInput | QuestionUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutTopicInput | QuestionUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type TopicCreateNestedOneWithoutSubtopicsInput = {
    create?: XOR<TopicCreateWithoutSubtopicsInput, TopicUncheckedCreateWithoutSubtopicsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutSubtopicsInput
    connect?: TopicWhereUniqueInput
  }

  export type QuestionCreateNestedManyWithoutSubtopicInput = {
    create?: XOR<QuestionCreateWithoutSubtopicInput, QuestionUncheckedCreateWithoutSubtopicInput> | QuestionCreateWithoutSubtopicInput[] | QuestionUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSubtopicInput | QuestionCreateOrConnectWithoutSubtopicInput[]
    createMany?: QuestionCreateManySubtopicInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutSubtopicInput = {
    create?: XOR<QuestionCreateWithoutSubtopicInput, QuestionUncheckedCreateWithoutSubtopicInput> | QuestionCreateWithoutSubtopicInput[] | QuestionUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSubtopicInput | QuestionCreateOrConnectWithoutSubtopicInput[]
    createMany?: QuestionCreateManySubtopicInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type TopicUpdateOneRequiredWithoutSubtopicsNestedInput = {
    create?: XOR<TopicCreateWithoutSubtopicsInput, TopicUncheckedCreateWithoutSubtopicsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutSubtopicsInput
    upsert?: TopicUpsertWithoutSubtopicsInput
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutSubtopicsInput, TopicUpdateWithoutSubtopicsInput>, TopicUncheckedUpdateWithoutSubtopicsInput>
  }

  export type QuestionUpdateManyWithoutSubtopicNestedInput = {
    create?: XOR<QuestionCreateWithoutSubtopicInput, QuestionUncheckedCreateWithoutSubtopicInput> | QuestionCreateWithoutSubtopicInput[] | QuestionUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSubtopicInput | QuestionCreateOrConnectWithoutSubtopicInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSubtopicInput | QuestionUpsertWithWhereUniqueWithoutSubtopicInput[]
    createMany?: QuestionCreateManySubtopicInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSubtopicInput | QuestionUpdateWithWhereUniqueWithoutSubtopicInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSubtopicInput | QuestionUpdateManyWithWhereWithoutSubtopicInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutSubtopicNestedInput = {
    create?: XOR<QuestionCreateWithoutSubtopicInput, QuestionUncheckedCreateWithoutSubtopicInput> | QuestionCreateWithoutSubtopicInput[] | QuestionUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSubtopicInput | QuestionCreateOrConnectWithoutSubtopicInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSubtopicInput | QuestionUpsertWithWhereUniqueWithoutSubtopicInput[]
    createMany?: QuestionCreateManySubtopicInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSubtopicInput | QuestionUpdateWithWhereUniqueWithoutSubtopicInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSubtopicInput | QuestionUpdateManyWithWhereWithoutSubtopicInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type SubjectCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<SubjectCreateWithoutQuestionsInput, SubjectUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutQuestionsInput
    connect?: SubjectWhereUniqueInput
  }

  export type TopicCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<TopicCreateWithoutQuestionsInput, TopicUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutQuestionsInput
    connect?: TopicWhereUniqueInput
  }

  export type SubtopicCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<SubtopicCreateWithoutQuestionsInput, SubtopicUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SubtopicCreateOrConnectWithoutQuestionsInput
    connect?: SubtopicWhereUniqueInput
  }

  export type QuestionTagCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionTagCreateWithoutQuestionInput, QuestionTagUncheckedCreateWithoutQuestionInput> | QuestionTagCreateWithoutQuestionInput[] | QuestionTagUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionTagCreateOrConnectWithoutQuestionInput | QuestionTagCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionTagCreateManyQuestionInputEnvelope
    connect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
  }

  export type QuestionOptionCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
  }

  export type ExamAnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<ExamAnswerCreateWithoutQuestionInput, ExamAnswerUncheckedCreateWithoutQuestionInput> | ExamAnswerCreateWithoutQuestionInput[] | ExamAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutQuestionInput | ExamAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: ExamAnswerCreateManyQuestionInputEnvelope
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
  }

  export type QuestionReportCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionReportCreateWithoutQuestionInput, QuestionReportUncheckedCreateWithoutQuestionInput> | QuestionReportCreateWithoutQuestionInput[] | QuestionReportUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutQuestionInput | QuestionReportCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionReportCreateManyQuestionInputEnvelope
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
  }

  export type QuestionAlternativeExplanationCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionAlternativeExplanationCreateWithoutQuestionInput, QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput> | QuestionAlternativeExplanationCreateWithoutQuestionInput[] | QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAlternativeExplanationCreateOrConnectWithoutQuestionInput | QuestionAlternativeExplanationCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionAlternativeExplanationCreateManyQuestionInputEnvelope
    connect?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
  }

  export type QuestionTagUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionTagCreateWithoutQuestionInput, QuestionTagUncheckedCreateWithoutQuestionInput> | QuestionTagCreateWithoutQuestionInput[] | QuestionTagUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionTagCreateOrConnectWithoutQuestionInput | QuestionTagCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionTagCreateManyQuestionInputEnvelope
    connect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
  }

  export type QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
  }

  export type ExamAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<ExamAnswerCreateWithoutQuestionInput, ExamAnswerUncheckedCreateWithoutQuestionInput> | ExamAnswerCreateWithoutQuestionInput[] | ExamAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutQuestionInput | ExamAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: ExamAnswerCreateManyQuestionInputEnvelope
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
  }

  export type QuestionReportUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionReportCreateWithoutQuestionInput, QuestionReportUncheckedCreateWithoutQuestionInput> | QuestionReportCreateWithoutQuestionInput[] | QuestionReportUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutQuestionInput | QuestionReportCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionReportCreateManyQuestionInputEnvelope
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
  }

  export type QuestionAlternativeExplanationUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionAlternativeExplanationCreateWithoutQuestionInput, QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput> | QuestionAlternativeExplanationCreateWithoutQuestionInput[] | QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAlternativeExplanationCreateOrConnectWithoutQuestionInput | QuestionAlternativeExplanationCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionAlternativeExplanationCreateManyQuestionInputEnvelope
    connect?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
  }

  export type EnumDifficultyFieldUpdateOperationsInput = {
    set?: $Enums.Difficulty
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubjectUpdateOneWithoutQuestionsNestedInput = {
    create?: XOR<SubjectCreateWithoutQuestionsInput, SubjectUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutQuestionsInput
    upsert?: SubjectUpsertWithoutQuestionsInput
    disconnect?: SubjectWhereInput | boolean
    delete?: SubjectWhereInput | boolean
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutQuestionsInput, SubjectUpdateWithoutQuestionsInput>, SubjectUncheckedUpdateWithoutQuestionsInput>
  }

  export type TopicUpdateOneWithoutQuestionsNestedInput = {
    create?: XOR<TopicCreateWithoutQuestionsInput, TopicUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutQuestionsInput
    upsert?: TopicUpsertWithoutQuestionsInput
    disconnect?: TopicWhereInput | boolean
    delete?: TopicWhereInput | boolean
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutQuestionsInput, TopicUpdateWithoutQuestionsInput>, TopicUncheckedUpdateWithoutQuestionsInput>
  }

  export type SubtopicUpdateOneWithoutQuestionsNestedInput = {
    create?: XOR<SubtopicCreateWithoutQuestionsInput, SubtopicUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SubtopicCreateOrConnectWithoutQuestionsInput
    upsert?: SubtopicUpsertWithoutQuestionsInput
    disconnect?: SubtopicWhereInput | boolean
    delete?: SubtopicWhereInput | boolean
    connect?: SubtopicWhereUniqueInput
    update?: XOR<XOR<SubtopicUpdateToOneWithWhereWithoutQuestionsInput, SubtopicUpdateWithoutQuestionsInput>, SubtopicUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionTagUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionTagCreateWithoutQuestionInput, QuestionTagUncheckedCreateWithoutQuestionInput> | QuestionTagCreateWithoutQuestionInput[] | QuestionTagUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionTagCreateOrConnectWithoutQuestionInput | QuestionTagCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionTagUpsertWithWhereUniqueWithoutQuestionInput | QuestionTagUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionTagCreateManyQuestionInputEnvelope
    set?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    disconnect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    delete?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    connect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    update?: QuestionTagUpdateWithWhereUniqueWithoutQuestionInput | QuestionTagUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionTagUpdateManyWithWhereWithoutQuestionInput | QuestionTagUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionTagScalarWhereInput | QuestionTagScalarWhereInput[]
  }

  export type QuestionOptionUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput | QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    set?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    disconnect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    delete?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    update?: QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput | QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionOptionUpdateManyWithWhereWithoutQuestionInput | QuestionOptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
  }

  export type ExamAnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<ExamAnswerCreateWithoutQuestionInput, ExamAnswerUncheckedCreateWithoutQuestionInput> | ExamAnswerCreateWithoutQuestionInput[] | ExamAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutQuestionInput | ExamAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: ExamAnswerUpsertWithWhereUniqueWithoutQuestionInput | ExamAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: ExamAnswerCreateManyQuestionInputEnvelope
    set?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    disconnect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    delete?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    update?: ExamAnswerUpdateWithWhereUniqueWithoutQuestionInput | ExamAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: ExamAnswerUpdateManyWithWhereWithoutQuestionInput | ExamAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: ExamAnswerScalarWhereInput | ExamAnswerScalarWhereInput[]
  }

  export type QuestionReportUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionReportCreateWithoutQuestionInput, QuestionReportUncheckedCreateWithoutQuestionInput> | QuestionReportCreateWithoutQuestionInput[] | QuestionReportUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutQuestionInput | QuestionReportCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionReportUpsertWithWhereUniqueWithoutQuestionInput | QuestionReportUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionReportCreateManyQuestionInputEnvelope
    set?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    disconnect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    delete?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    update?: QuestionReportUpdateWithWhereUniqueWithoutQuestionInput | QuestionReportUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionReportUpdateManyWithWhereWithoutQuestionInput | QuestionReportUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionReportScalarWhereInput | QuestionReportScalarWhereInput[]
  }

  export type QuestionAlternativeExplanationUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionAlternativeExplanationCreateWithoutQuestionInput, QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput> | QuestionAlternativeExplanationCreateWithoutQuestionInput[] | QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAlternativeExplanationCreateOrConnectWithoutQuestionInput | QuestionAlternativeExplanationCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionAlternativeExplanationUpsertWithWhereUniqueWithoutQuestionInput | QuestionAlternativeExplanationUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionAlternativeExplanationCreateManyQuestionInputEnvelope
    set?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
    disconnect?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
    delete?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
    connect?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
    update?: QuestionAlternativeExplanationUpdateWithWhereUniqueWithoutQuestionInput | QuestionAlternativeExplanationUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionAlternativeExplanationUpdateManyWithWhereWithoutQuestionInput | QuestionAlternativeExplanationUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionAlternativeExplanationScalarWhereInput | QuestionAlternativeExplanationScalarWhereInput[]
  }

  export type QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionTagCreateWithoutQuestionInput, QuestionTagUncheckedCreateWithoutQuestionInput> | QuestionTagCreateWithoutQuestionInput[] | QuestionTagUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionTagCreateOrConnectWithoutQuestionInput | QuestionTagCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionTagUpsertWithWhereUniqueWithoutQuestionInput | QuestionTagUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionTagCreateManyQuestionInputEnvelope
    set?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    disconnect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    delete?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    connect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    update?: QuestionTagUpdateWithWhereUniqueWithoutQuestionInput | QuestionTagUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionTagUpdateManyWithWhereWithoutQuestionInput | QuestionTagUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionTagScalarWhereInput | QuestionTagScalarWhereInput[]
  }

  export type QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput | QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    set?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    disconnect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    delete?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    update?: QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput | QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionOptionUpdateManyWithWhereWithoutQuestionInput | QuestionOptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
  }

  export type ExamAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<ExamAnswerCreateWithoutQuestionInput, ExamAnswerUncheckedCreateWithoutQuestionInput> | ExamAnswerCreateWithoutQuestionInput[] | ExamAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutQuestionInput | ExamAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: ExamAnswerUpsertWithWhereUniqueWithoutQuestionInput | ExamAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: ExamAnswerCreateManyQuestionInputEnvelope
    set?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    disconnect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    delete?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    update?: ExamAnswerUpdateWithWhereUniqueWithoutQuestionInput | ExamAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: ExamAnswerUpdateManyWithWhereWithoutQuestionInput | ExamAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: ExamAnswerScalarWhereInput | ExamAnswerScalarWhereInput[]
  }

  export type QuestionReportUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionReportCreateWithoutQuestionInput, QuestionReportUncheckedCreateWithoutQuestionInput> | QuestionReportCreateWithoutQuestionInput[] | QuestionReportUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionReportCreateOrConnectWithoutQuestionInput | QuestionReportCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionReportUpsertWithWhereUniqueWithoutQuestionInput | QuestionReportUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionReportCreateManyQuestionInputEnvelope
    set?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    disconnect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    delete?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    connect?: QuestionReportWhereUniqueInput | QuestionReportWhereUniqueInput[]
    update?: QuestionReportUpdateWithWhereUniqueWithoutQuestionInput | QuestionReportUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionReportUpdateManyWithWhereWithoutQuestionInput | QuestionReportUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionReportScalarWhereInput | QuestionReportScalarWhereInput[]
  }

  export type QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionAlternativeExplanationCreateWithoutQuestionInput, QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput> | QuestionAlternativeExplanationCreateWithoutQuestionInput[] | QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionAlternativeExplanationCreateOrConnectWithoutQuestionInput | QuestionAlternativeExplanationCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionAlternativeExplanationUpsertWithWhereUniqueWithoutQuestionInput | QuestionAlternativeExplanationUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionAlternativeExplanationCreateManyQuestionInputEnvelope
    set?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
    disconnect?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
    delete?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
    connect?: QuestionAlternativeExplanationWhereUniqueInput | QuestionAlternativeExplanationWhereUniqueInput[]
    update?: QuestionAlternativeExplanationUpdateWithWhereUniqueWithoutQuestionInput | QuestionAlternativeExplanationUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionAlternativeExplanationUpdateManyWithWhereWithoutQuestionInput | QuestionAlternativeExplanationUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionAlternativeExplanationScalarWhereInput | QuestionAlternativeExplanationScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutOptionsInput = {
    create?: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutOptionsInput
    connect?: QuestionWhereUniqueInput
  }

  export type ExamAnswerCreateNestedManyWithoutSelectedOptionInput = {
    create?: XOR<ExamAnswerCreateWithoutSelectedOptionInput, ExamAnswerUncheckedCreateWithoutSelectedOptionInput> | ExamAnswerCreateWithoutSelectedOptionInput[] | ExamAnswerUncheckedCreateWithoutSelectedOptionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutSelectedOptionInput | ExamAnswerCreateOrConnectWithoutSelectedOptionInput[]
    createMany?: ExamAnswerCreateManySelectedOptionInputEnvelope
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
  }

  export type ExamAnswerUncheckedCreateNestedManyWithoutSelectedOptionInput = {
    create?: XOR<ExamAnswerCreateWithoutSelectedOptionInput, ExamAnswerUncheckedCreateWithoutSelectedOptionInput> | ExamAnswerCreateWithoutSelectedOptionInput[] | ExamAnswerUncheckedCreateWithoutSelectedOptionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutSelectedOptionInput | ExamAnswerCreateOrConnectWithoutSelectedOptionInput[]
    createMany?: ExamAnswerCreateManySelectedOptionInputEnvelope
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type QuestionUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutOptionsInput
    upsert?: QuestionUpsertWithoutOptionsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutOptionsInput, QuestionUpdateWithoutOptionsInput>, QuestionUncheckedUpdateWithoutOptionsInput>
  }

  export type ExamAnswerUpdateManyWithoutSelectedOptionNestedInput = {
    create?: XOR<ExamAnswerCreateWithoutSelectedOptionInput, ExamAnswerUncheckedCreateWithoutSelectedOptionInput> | ExamAnswerCreateWithoutSelectedOptionInput[] | ExamAnswerUncheckedCreateWithoutSelectedOptionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutSelectedOptionInput | ExamAnswerCreateOrConnectWithoutSelectedOptionInput[]
    upsert?: ExamAnswerUpsertWithWhereUniqueWithoutSelectedOptionInput | ExamAnswerUpsertWithWhereUniqueWithoutSelectedOptionInput[]
    createMany?: ExamAnswerCreateManySelectedOptionInputEnvelope
    set?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    disconnect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    delete?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    update?: ExamAnswerUpdateWithWhereUniqueWithoutSelectedOptionInput | ExamAnswerUpdateWithWhereUniqueWithoutSelectedOptionInput[]
    updateMany?: ExamAnswerUpdateManyWithWhereWithoutSelectedOptionInput | ExamAnswerUpdateManyWithWhereWithoutSelectedOptionInput[]
    deleteMany?: ExamAnswerScalarWhereInput | ExamAnswerScalarWhereInput[]
  }

  export type ExamAnswerUncheckedUpdateManyWithoutSelectedOptionNestedInput = {
    create?: XOR<ExamAnswerCreateWithoutSelectedOptionInput, ExamAnswerUncheckedCreateWithoutSelectedOptionInput> | ExamAnswerCreateWithoutSelectedOptionInput[] | ExamAnswerUncheckedCreateWithoutSelectedOptionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutSelectedOptionInput | ExamAnswerCreateOrConnectWithoutSelectedOptionInput[]
    upsert?: ExamAnswerUpsertWithWhereUniqueWithoutSelectedOptionInput | ExamAnswerUpsertWithWhereUniqueWithoutSelectedOptionInput[]
    createMany?: ExamAnswerCreateManySelectedOptionInputEnvelope
    set?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    disconnect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    delete?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    update?: ExamAnswerUpdateWithWhereUniqueWithoutSelectedOptionInput | ExamAnswerUpdateWithWhereUniqueWithoutSelectedOptionInput[]
    updateMany?: ExamAnswerUpdateManyWithWhereWithoutSelectedOptionInput | ExamAnswerUpdateManyWithWhereWithoutSelectedOptionInput[]
    deleteMany?: ExamAnswerScalarWhereInput | ExamAnswerScalarWhereInput[]
  }

  export type QuestionTagCreateNestedManyWithoutTagInput = {
    create?: XOR<QuestionTagCreateWithoutTagInput, QuestionTagUncheckedCreateWithoutTagInput> | QuestionTagCreateWithoutTagInput[] | QuestionTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: QuestionTagCreateOrConnectWithoutTagInput | QuestionTagCreateOrConnectWithoutTagInput[]
    createMany?: QuestionTagCreateManyTagInputEnvelope
    connect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
  }

  export type QuestionTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<QuestionTagCreateWithoutTagInput, QuestionTagUncheckedCreateWithoutTagInput> | QuestionTagCreateWithoutTagInput[] | QuestionTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: QuestionTagCreateOrConnectWithoutTagInput | QuestionTagCreateOrConnectWithoutTagInput[]
    createMany?: QuestionTagCreateManyTagInputEnvelope
    connect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
  }

  export type QuestionTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<QuestionTagCreateWithoutTagInput, QuestionTagUncheckedCreateWithoutTagInput> | QuestionTagCreateWithoutTagInput[] | QuestionTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: QuestionTagCreateOrConnectWithoutTagInput | QuestionTagCreateOrConnectWithoutTagInput[]
    upsert?: QuestionTagUpsertWithWhereUniqueWithoutTagInput | QuestionTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: QuestionTagCreateManyTagInputEnvelope
    set?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    disconnect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    delete?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    connect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    update?: QuestionTagUpdateWithWhereUniqueWithoutTagInput | QuestionTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: QuestionTagUpdateManyWithWhereWithoutTagInput | QuestionTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: QuestionTagScalarWhereInput | QuestionTagScalarWhereInput[]
  }

  export type QuestionTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<QuestionTagCreateWithoutTagInput, QuestionTagUncheckedCreateWithoutTagInput> | QuestionTagCreateWithoutTagInput[] | QuestionTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: QuestionTagCreateOrConnectWithoutTagInput | QuestionTagCreateOrConnectWithoutTagInput[]
    upsert?: QuestionTagUpsertWithWhereUniqueWithoutTagInput | QuestionTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: QuestionTagCreateManyTagInputEnvelope
    set?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    disconnect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    delete?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    connect?: QuestionTagWhereUniqueInput | QuestionTagWhereUniqueInput[]
    update?: QuestionTagUpdateWithWhereUniqueWithoutTagInput | QuestionTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: QuestionTagUpdateManyWithWhereWithoutTagInput | QuestionTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: QuestionTagScalarWhereInput | QuestionTagScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutTagsInput = {
    create?: XOR<QuestionCreateWithoutTagsInput, QuestionUncheckedCreateWithoutTagsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutTagsInput
    connect?: QuestionWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<TagCreateWithoutQuestionsInput, TagUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: TagCreateOrConnectWithoutQuestionsInput
    connect?: TagWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<QuestionCreateWithoutTagsInput, QuestionUncheckedCreateWithoutTagsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutTagsInput
    upsert?: QuestionUpsertWithoutTagsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutTagsInput, QuestionUpdateWithoutTagsInput>, QuestionUncheckedUpdateWithoutTagsInput>
  }

  export type TagUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<TagCreateWithoutQuestionsInput, TagUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: TagCreateOrConnectWithoutQuestionsInput
    upsert?: TagUpsertWithoutQuestionsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutQuestionsInput, TagUpdateWithoutQuestionsInput>, TagUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionCreateNestedOneWithoutReportsInput = {
    create?: XOR<QuestionCreateWithoutReportsInput, QuestionUncheckedCreateWithoutReportsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutReportsInput
    connect?: QuestionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionReportsInput = {
    create?: XOR<UserCreateWithoutQuestionReportsInput, UserUncheckedCreateWithoutQuestionReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionReportsInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionReportOptionCreateNestedManyWithoutReportInput = {
    create?: XOR<QuestionReportOptionCreateWithoutReportInput, QuestionReportOptionUncheckedCreateWithoutReportInput> | QuestionReportOptionCreateWithoutReportInput[] | QuestionReportOptionUncheckedCreateWithoutReportInput[]
    connectOrCreate?: QuestionReportOptionCreateOrConnectWithoutReportInput | QuestionReportOptionCreateOrConnectWithoutReportInput[]
    createMany?: QuestionReportOptionCreateManyReportInputEnvelope
    connect?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutReviewedReportsInput = {
    create?: XOR<UserCreateWithoutReviewedReportsInput, UserUncheckedCreateWithoutReviewedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewedReportsInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionReportOptionUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<QuestionReportOptionCreateWithoutReportInput, QuestionReportOptionUncheckedCreateWithoutReportInput> | QuestionReportOptionCreateWithoutReportInput[] | QuestionReportOptionUncheckedCreateWithoutReportInput[]
    connectOrCreate?: QuestionReportOptionCreateOrConnectWithoutReportInput | QuestionReportOptionCreateOrConnectWithoutReportInput[]
    createMany?: QuestionReportOptionCreateManyReportInputEnvelope
    connect?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
  }

  export type EnumQuestionReportTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionReportType
  }

  export type EnumReportStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReportStatus
  }

  export type QuestionUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<QuestionCreateWithoutReportsInput, QuestionUncheckedCreateWithoutReportsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutReportsInput
    upsert?: QuestionUpsertWithoutReportsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutReportsInput, QuestionUpdateWithoutReportsInput>, QuestionUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateOneRequiredWithoutQuestionReportsNestedInput = {
    create?: XOR<UserCreateWithoutQuestionReportsInput, UserUncheckedCreateWithoutQuestionReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionReportsInput
    upsert?: UserUpsertWithoutQuestionReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionReportsInput, UserUpdateWithoutQuestionReportsInput>, UserUncheckedUpdateWithoutQuestionReportsInput>
  }

  export type QuestionReportOptionUpdateManyWithoutReportNestedInput = {
    create?: XOR<QuestionReportOptionCreateWithoutReportInput, QuestionReportOptionUncheckedCreateWithoutReportInput> | QuestionReportOptionCreateWithoutReportInput[] | QuestionReportOptionUncheckedCreateWithoutReportInput[]
    connectOrCreate?: QuestionReportOptionCreateOrConnectWithoutReportInput | QuestionReportOptionCreateOrConnectWithoutReportInput[]
    upsert?: QuestionReportOptionUpsertWithWhereUniqueWithoutReportInput | QuestionReportOptionUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: QuestionReportOptionCreateManyReportInputEnvelope
    set?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
    disconnect?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
    delete?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
    connect?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
    update?: QuestionReportOptionUpdateWithWhereUniqueWithoutReportInput | QuestionReportOptionUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: QuestionReportOptionUpdateManyWithWhereWithoutReportInput | QuestionReportOptionUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: QuestionReportOptionScalarWhereInput | QuestionReportOptionScalarWhereInput[]
  }

  export type UserUpdateOneWithoutReviewedReportsNestedInput = {
    create?: XOR<UserCreateWithoutReviewedReportsInput, UserUncheckedCreateWithoutReviewedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewedReportsInput
    upsert?: UserUpsertWithoutReviewedReportsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewedReportsInput, UserUpdateWithoutReviewedReportsInput>, UserUncheckedUpdateWithoutReviewedReportsInput>
  }

  export type QuestionReportOptionUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<QuestionReportOptionCreateWithoutReportInput, QuestionReportOptionUncheckedCreateWithoutReportInput> | QuestionReportOptionCreateWithoutReportInput[] | QuestionReportOptionUncheckedCreateWithoutReportInput[]
    connectOrCreate?: QuestionReportOptionCreateOrConnectWithoutReportInput | QuestionReportOptionCreateOrConnectWithoutReportInput[]
    upsert?: QuestionReportOptionUpsertWithWhereUniqueWithoutReportInput | QuestionReportOptionUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: QuestionReportOptionCreateManyReportInputEnvelope
    set?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
    disconnect?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
    delete?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
    connect?: QuestionReportOptionWhereUniqueInput | QuestionReportOptionWhereUniqueInput[]
    update?: QuestionReportOptionUpdateWithWhereUniqueWithoutReportInput | QuestionReportOptionUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: QuestionReportOptionUpdateManyWithWhereWithoutReportInput | QuestionReportOptionUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: QuestionReportOptionScalarWhereInput | QuestionReportOptionScalarWhereInput[]
  }

  export type QuestionReportCreateNestedOneWithoutSuggestedOptionsInput = {
    create?: XOR<QuestionReportCreateWithoutSuggestedOptionsInput, QuestionReportUncheckedCreateWithoutSuggestedOptionsInput>
    connectOrCreate?: QuestionReportCreateOrConnectWithoutSuggestedOptionsInput
    connect?: QuestionReportWhereUniqueInput
  }

  export type QuestionReportUpdateOneRequiredWithoutSuggestedOptionsNestedInput = {
    create?: XOR<QuestionReportCreateWithoutSuggestedOptionsInput, QuestionReportUncheckedCreateWithoutSuggestedOptionsInput>
    connectOrCreate?: QuestionReportCreateOrConnectWithoutSuggestedOptionsInput
    upsert?: QuestionReportUpsertWithoutSuggestedOptionsInput
    connect?: QuestionReportWhereUniqueInput
    update?: XOR<XOR<QuestionReportUpdateToOneWithWhereWithoutSuggestedOptionsInput, QuestionReportUpdateWithoutSuggestedOptionsInput>, QuestionReportUncheckedUpdateWithoutSuggestedOptionsInput>
  }

  export type QuestionCreateNestedOneWithoutAlternativeExplanationsInput = {
    create?: XOR<QuestionCreateWithoutAlternativeExplanationsInput, QuestionUncheckedCreateWithoutAlternativeExplanationsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAlternativeExplanationsInput
    connect?: QuestionWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutAlternativeExplanationsNestedInput = {
    create?: XOR<QuestionCreateWithoutAlternativeExplanationsInput, QuestionUncheckedCreateWithoutAlternativeExplanationsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAlternativeExplanationsInput
    upsert?: QuestionUpsertWithoutAlternativeExplanationsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutAlternativeExplanationsInput, QuestionUpdateWithoutAlternativeExplanationsInput>, QuestionUncheckedUpdateWithoutAlternativeExplanationsInput>
  }

  export type ExamPaperCreatesubjectIdsInput = {
    set: string[]
  }

  export type ExamPaperCreatetopicIdsInput = {
    set: string[]
  }

  export type ExamPaperCreatesubtopicIdsInput = {
    set: string[]
  }

  export type ExamPaperCreatequestionIdsInput = {
    set: string[]
  }

  export type ExamSubmissionCreateNestedManyWithoutExamPaperInput = {
    create?: XOR<ExamSubmissionCreateWithoutExamPaperInput, ExamSubmissionUncheckedCreateWithoutExamPaperInput> | ExamSubmissionCreateWithoutExamPaperInput[] | ExamSubmissionUncheckedCreateWithoutExamPaperInput[]
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutExamPaperInput | ExamSubmissionCreateOrConnectWithoutExamPaperInput[]
    createMany?: ExamSubmissionCreateManyExamPaperInputEnvelope
    connect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
  }

  export type ExamSubmissionUncheckedCreateNestedManyWithoutExamPaperInput = {
    create?: XOR<ExamSubmissionCreateWithoutExamPaperInput, ExamSubmissionUncheckedCreateWithoutExamPaperInput> | ExamSubmissionCreateWithoutExamPaperInput[] | ExamSubmissionUncheckedCreateWithoutExamPaperInput[]
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutExamPaperInput | ExamSubmissionCreateOrConnectWithoutExamPaperInput[]
    createMany?: ExamSubmissionCreateManyExamPaperInputEnvelope
    connect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
  }

  export type ExamPaperUpdatesubjectIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ExamPaperUpdatetopicIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ExamPaperUpdatesubtopicIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ExamPaperUpdatequestionIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ExamSubmissionUpdateManyWithoutExamPaperNestedInput = {
    create?: XOR<ExamSubmissionCreateWithoutExamPaperInput, ExamSubmissionUncheckedCreateWithoutExamPaperInput> | ExamSubmissionCreateWithoutExamPaperInput[] | ExamSubmissionUncheckedCreateWithoutExamPaperInput[]
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutExamPaperInput | ExamSubmissionCreateOrConnectWithoutExamPaperInput[]
    upsert?: ExamSubmissionUpsertWithWhereUniqueWithoutExamPaperInput | ExamSubmissionUpsertWithWhereUniqueWithoutExamPaperInput[]
    createMany?: ExamSubmissionCreateManyExamPaperInputEnvelope
    set?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    disconnect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    delete?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    connect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    update?: ExamSubmissionUpdateWithWhereUniqueWithoutExamPaperInput | ExamSubmissionUpdateWithWhereUniqueWithoutExamPaperInput[]
    updateMany?: ExamSubmissionUpdateManyWithWhereWithoutExamPaperInput | ExamSubmissionUpdateManyWithWhereWithoutExamPaperInput[]
    deleteMany?: ExamSubmissionScalarWhereInput | ExamSubmissionScalarWhereInput[]
  }

  export type ExamSubmissionUncheckedUpdateManyWithoutExamPaperNestedInput = {
    create?: XOR<ExamSubmissionCreateWithoutExamPaperInput, ExamSubmissionUncheckedCreateWithoutExamPaperInput> | ExamSubmissionCreateWithoutExamPaperInput[] | ExamSubmissionUncheckedCreateWithoutExamPaperInput[]
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutExamPaperInput | ExamSubmissionCreateOrConnectWithoutExamPaperInput[]
    upsert?: ExamSubmissionUpsertWithWhereUniqueWithoutExamPaperInput | ExamSubmissionUpsertWithWhereUniqueWithoutExamPaperInput[]
    createMany?: ExamSubmissionCreateManyExamPaperInputEnvelope
    set?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    disconnect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    delete?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    connect?: ExamSubmissionWhereUniqueInput | ExamSubmissionWhereUniqueInput[]
    update?: ExamSubmissionUpdateWithWhereUniqueWithoutExamPaperInput | ExamSubmissionUpdateWithWhereUniqueWithoutExamPaperInput[]
    updateMany?: ExamSubmissionUpdateManyWithWhereWithoutExamPaperInput | ExamSubmissionUpdateManyWithWhereWithoutExamPaperInput[]
    deleteMany?: ExamSubmissionScalarWhereInput | ExamSubmissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutExamSubmissionsInput = {
    create?: XOR<UserCreateWithoutExamSubmissionsInput, UserUncheckedCreateWithoutExamSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutExamSubmissionsInput
    connect?: UserWhereUniqueInput
  }

  export type ExamPaperCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<ExamPaperCreateWithoutSubmissionsInput, ExamPaperUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: ExamPaperCreateOrConnectWithoutSubmissionsInput
    connect?: ExamPaperWhereUniqueInput
  }

  export type ExamAnswerCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<ExamAnswerCreateWithoutSubmissionInput, ExamAnswerUncheckedCreateWithoutSubmissionInput> | ExamAnswerCreateWithoutSubmissionInput[] | ExamAnswerUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutSubmissionInput | ExamAnswerCreateOrConnectWithoutSubmissionInput[]
    createMany?: ExamAnswerCreateManySubmissionInputEnvelope
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
  }

  export type ExamAnswerUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<ExamAnswerCreateWithoutSubmissionInput, ExamAnswerUncheckedCreateWithoutSubmissionInput> | ExamAnswerCreateWithoutSubmissionInput[] | ExamAnswerUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutSubmissionInput | ExamAnswerCreateOrConnectWithoutSubmissionInput[]
    createMany?: ExamAnswerCreateManySubmissionInputEnvelope
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutExamSubmissionsNestedInput = {
    create?: XOR<UserCreateWithoutExamSubmissionsInput, UserUncheckedCreateWithoutExamSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutExamSubmissionsInput
    upsert?: UserUpsertWithoutExamSubmissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExamSubmissionsInput, UserUpdateWithoutExamSubmissionsInput>, UserUncheckedUpdateWithoutExamSubmissionsInput>
  }

  export type ExamPaperUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<ExamPaperCreateWithoutSubmissionsInput, ExamPaperUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: ExamPaperCreateOrConnectWithoutSubmissionsInput
    upsert?: ExamPaperUpsertWithoutSubmissionsInput
    connect?: ExamPaperWhereUniqueInput
    update?: XOR<XOR<ExamPaperUpdateToOneWithWhereWithoutSubmissionsInput, ExamPaperUpdateWithoutSubmissionsInput>, ExamPaperUncheckedUpdateWithoutSubmissionsInput>
  }

  export type ExamAnswerUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<ExamAnswerCreateWithoutSubmissionInput, ExamAnswerUncheckedCreateWithoutSubmissionInput> | ExamAnswerCreateWithoutSubmissionInput[] | ExamAnswerUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutSubmissionInput | ExamAnswerCreateOrConnectWithoutSubmissionInput[]
    upsert?: ExamAnswerUpsertWithWhereUniqueWithoutSubmissionInput | ExamAnswerUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: ExamAnswerCreateManySubmissionInputEnvelope
    set?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    disconnect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    delete?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    update?: ExamAnswerUpdateWithWhereUniqueWithoutSubmissionInput | ExamAnswerUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: ExamAnswerUpdateManyWithWhereWithoutSubmissionInput | ExamAnswerUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: ExamAnswerScalarWhereInput | ExamAnswerScalarWhereInput[]
  }

  export type ExamAnswerUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<ExamAnswerCreateWithoutSubmissionInput, ExamAnswerUncheckedCreateWithoutSubmissionInput> | ExamAnswerCreateWithoutSubmissionInput[] | ExamAnswerUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: ExamAnswerCreateOrConnectWithoutSubmissionInput | ExamAnswerCreateOrConnectWithoutSubmissionInput[]
    upsert?: ExamAnswerUpsertWithWhereUniqueWithoutSubmissionInput | ExamAnswerUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: ExamAnswerCreateManySubmissionInputEnvelope
    set?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    disconnect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    delete?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    connect?: ExamAnswerWhereUniqueInput | ExamAnswerWhereUniqueInput[]
    update?: ExamAnswerUpdateWithWhereUniqueWithoutSubmissionInput | ExamAnswerUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: ExamAnswerUpdateManyWithWhereWithoutSubmissionInput | ExamAnswerUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: ExamAnswerScalarWhereInput | ExamAnswerScalarWhereInput[]
  }

  export type ExamSubmissionCreateNestedOneWithoutAnswersInput = {
    create?: XOR<ExamSubmissionCreateWithoutAnswersInput, ExamSubmissionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutAnswersInput
    connect?: ExamSubmissionWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutAnswersInput = {
    create?: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswersInput
    connect?: QuestionWhereUniqueInput
  }

  export type QuestionOptionCreateNestedOneWithoutSelectedByAnswersInput = {
    create?: XOR<QuestionOptionCreateWithoutSelectedByAnswersInput, QuestionOptionUncheckedCreateWithoutSelectedByAnswersInput>
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutSelectedByAnswersInput
    connect?: QuestionOptionWhereUniqueInput
  }

  export type ExamSubmissionUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<ExamSubmissionCreateWithoutAnswersInput, ExamSubmissionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: ExamSubmissionCreateOrConnectWithoutAnswersInput
    upsert?: ExamSubmissionUpsertWithoutAnswersInput
    connect?: ExamSubmissionWhereUniqueInput
    update?: XOR<XOR<ExamSubmissionUpdateToOneWithWhereWithoutAnswersInput, ExamSubmissionUpdateWithoutAnswersInput>, ExamSubmissionUncheckedUpdateWithoutAnswersInput>
  }

  export type QuestionUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswersInput
    upsert?: QuestionUpsertWithoutAnswersInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutAnswersInput, QuestionUpdateWithoutAnswersInput>, QuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type QuestionOptionUpdateOneWithoutSelectedByAnswersNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutSelectedByAnswersInput, QuestionOptionUncheckedCreateWithoutSelectedByAnswersInput>
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutSelectedByAnswersInput
    upsert?: QuestionOptionUpsertWithoutSelectedByAnswersInput
    disconnect?: QuestionOptionWhereInput | boolean
    delete?: QuestionOptionWhereInput | boolean
    connect?: QuestionOptionWhereUniqueInput
    update?: XOR<XOR<QuestionOptionUpdateToOneWithWhereWithoutSelectedByAnswersInput, QuestionOptionUpdateWithoutSelectedByAnswersInput>, QuestionOptionUncheckedUpdateWithoutSelectedByAnswersInput>
  }

  export type SubscriptionCreateNestedManyWithoutPlanInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type EnumPlanIntervalFieldUpdateOperationsInput = {
    set?: $Enums.PlanInterval
  }

  export type EnumPlanTypeFieldUpdateOperationsInput = {
    set?: $Enums.PlanType
  }

  export type SubscriptionUpdateManyWithoutPlanNestedInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutPlanInput | SubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutPlanInput | SubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutPlanInput | SubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutPlanInput | SubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutPlanInput | SubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutPlanInput | SubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type PlanCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<PlanCreateWithoutSubscriptionsInput, PlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutSubscriptionsInput
    connect?: PlanWhereUniqueInput
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionStatus
  }

  export type UserUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    upsert?: UserUpsertWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionsInput, UserUpdateWithoutSubscriptionsInput>, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type PlanUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<PlanCreateWithoutSubscriptionsInput, PlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutSubscriptionsInput
    upsert?: PlanUpsertWithoutSubscriptionsInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutSubscriptionsInput, PlanUpdateWithoutSubscriptionsInput>, PlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserCreateNestedOneWithoutOtpsInput = {
    create?: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumOtpTypeFieldUpdateOperationsInput = {
    set?: $Enums.OtpType
  }

  export type UserUpdateOneRequiredWithoutOtpsNestedInput = {
    create?: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpsInput
    upsert?: UserUpsertWithoutOtpsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOtpsInput, UserUpdateWithoutOtpsInput>, UserUncheckedUpdateWithoutOtpsInput>
  }

  export type UserCreateNestedOneWithoutReferralCodeInput = {
    create?: XOR<UserCreateWithoutReferralCodeInput, UserUncheckedCreateWithoutReferralCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralCodeInput
    connect?: UserWhereUniqueInput
  }

  export type ReferralCreateNestedManyWithoutReferralCodeInput = {
    create?: XOR<ReferralCreateWithoutReferralCodeInput, ReferralUncheckedCreateWithoutReferralCodeInput> | ReferralCreateWithoutReferralCodeInput[] | ReferralUncheckedCreateWithoutReferralCodeInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferralCodeInput | ReferralCreateOrConnectWithoutReferralCodeInput[]
    createMany?: ReferralCreateManyReferralCodeInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type ReferralUncheckedCreateNestedManyWithoutReferralCodeInput = {
    create?: XOR<ReferralCreateWithoutReferralCodeInput, ReferralUncheckedCreateWithoutReferralCodeInput> | ReferralCreateWithoutReferralCodeInput[] | ReferralUncheckedCreateWithoutReferralCodeInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferralCodeInput | ReferralCreateOrConnectWithoutReferralCodeInput[]
    createMany?: ReferralCreateManyReferralCodeInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutReferralCodeNestedInput = {
    create?: XOR<UserCreateWithoutReferralCodeInput, UserUncheckedCreateWithoutReferralCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralCodeInput
    upsert?: UserUpsertWithoutReferralCodeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferralCodeInput, UserUpdateWithoutReferralCodeInput>, UserUncheckedUpdateWithoutReferralCodeInput>
  }

  export type ReferralUpdateManyWithoutReferralCodeNestedInput = {
    create?: XOR<ReferralCreateWithoutReferralCodeInput, ReferralUncheckedCreateWithoutReferralCodeInput> | ReferralCreateWithoutReferralCodeInput[] | ReferralUncheckedCreateWithoutReferralCodeInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferralCodeInput | ReferralCreateOrConnectWithoutReferralCodeInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutReferralCodeInput | ReferralUpsertWithWhereUniqueWithoutReferralCodeInput[]
    createMany?: ReferralCreateManyReferralCodeInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutReferralCodeInput | ReferralUpdateWithWhereUniqueWithoutReferralCodeInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutReferralCodeInput | ReferralUpdateManyWithWhereWithoutReferralCodeInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type ReferralUncheckedUpdateManyWithoutReferralCodeNestedInput = {
    create?: XOR<ReferralCreateWithoutReferralCodeInput, ReferralUncheckedCreateWithoutReferralCodeInput> | ReferralCreateWithoutReferralCodeInput[] | ReferralUncheckedCreateWithoutReferralCodeInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferralCodeInput | ReferralCreateOrConnectWithoutReferralCodeInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutReferralCodeInput | ReferralUpsertWithWhereUniqueWithoutReferralCodeInput[]
    createMany?: ReferralCreateManyReferralCodeInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutReferralCodeInput | ReferralUpdateWithWhereUniqueWithoutReferralCodeInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutReferralCodeInput | ReferralUpdateManyWithWhereWithoutReferralCodeInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReferralsMadeInput = {
    create?: XOR<UserCreateWithoutReferralsMadeInput, UserUncheckedCreateWithoutReferralsMadeInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsMadeInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReferralReceivedInput = {
    create?: XOR<UserCreateWithoutReferralReceivedInput, UserUncheckedCreateWithoutReferralReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type ReferralCodeCreateNestedOneWithoutReferralsInput = {
    create?: XOR<ReferralCodeCreateWithoutReferralsInput, ReferralCodeUncheckedCreateWithoutReferralsInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutReferralsInput
    connect?: ReferralCodeWhereUniqueInput
  }

  export type ReferralRewardCreateNestedManyWithoutReferralInput = {
    create?: XOR<ReferralRewardCreateWithoutReferralInput, ReferralRewardUncheckedCreateWithoutReferralInput> | ReferralRewardCreateWithoutReferralInput[] | ReferralRewardUncheckedCreateWithoutReferralInput[]
    connectOrCreate?: ReferralRewardCreateOrConnectWithoutReferralInput | ReferralRewardCreateOrConnectWithoutReferralInput[]
    createMany?: ReferralRewardCreateManyReferralInputEnvelope
    connect?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
  }

  export type ReferralRewardUncheckedCreateNestedManyWithoutReferralInput = {
    create?: XOR<ReferralRewardCreateWithoutReferralInput, ReferralRewardUncheckedCreateWithoutReferralInput> | ReferralRewardCreateWithoutReferralInput[] | ReferralRewardUncheckedCreateWithoutReferralInput[]
    connectOrCreate?: ReferralRewardCreateOrConnectWithoutReferralInput | ReferralRewardCreateOrConnectWithoutReferralInput[]
    createMany?: ReferralRewardCreateManyReferralInputEnvelope
    connect?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
  }

  export type EnumReferralStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReferralStatus
  }

  export type UserUpdateOneRequiredWithoutReferralsMadeNestedInput = {
    create?: XOR<UserCreateWithoutReferralsMadeInput, UserUncheckedCreateWithoutReferralsMadeInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsMadeInput
    upsert?: UserUpsertWithoutReferralsMadeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferralsMadeInput, UserUpdateWithoutReferralsMadeInput>, UserUncheckedUpdateWithoutReferralsMadeInput>
  }

  export type UserUpdateOneRequiredWithoutReferralReceivedNestedInput = {
    create?: XOR<UserCreateWithoutReferralReceivedInput, UserUncheckedCreateWithoutReferralReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralReceivedInput
    upsert?: UserUpsertWithoutReferralReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferralReceivedInput, UserUpdateWithoutReferralReceivedInput>, UserUncheckedUpdateWithoutReferralReceivedInput>
  }

  export type ReferralCodeUpdateOneRequiredWithoutReferralsNestedInput = {
    create?: XOR<ReferralCodeCreateWithoutReferralsInput, ReferralCodeUncheckedCreateWithoutReferralsInput>
    connectOrCreate?: ReferralCodeCreateOrConnectWithoutReferralsInput
    upsert?: ReferralCodeUpsertWithoutReferralsInput
    connect?: ReferralCodeWhereUniqueInput
    update?: XOR<XOR<ReferralCodeUpdateToOneWithWhereWithoutReferralsInput, ReferralCodeUpdateWithoutReferralsInput>, ReferralCodeUncheckedUpdateWithoutReferralsInput>
  }

  export type ReferralRewardUpdateManyWithoutReferralNestedInput = {
    create?: XOR<ReferralRewardCreateWithoutReferralInput, ReferralRewardUncheckedCreateWithoutReferralInput> | ReferralRewardCreateWithoutReferralInput[] | ReferralRewardUncheckedCreateWithoutReferralInput[]
    connectOrCreate?: ReferralRewardCreateOrConnectWithoutReferralInput | ReferralRewardCreateOrConnectWithoutReferralInput[]
    upsert?: ReferralRewardUpsertWithWhereUniqueWithoutReferralInput | ReferralRewardUpsertWithWhereUniqueWithoutReferralInput[]
    createMany?: ReferralRewardCreateManyReferralInputEnvelope
    set?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
    disconnect?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
    delete?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
    connect?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
    update?: ReferralRewardUpdateWithWhereUniqueWithoutReferralInput | ReferralRewardUpdateWithWhereUniqueWithoutReferralInput[]
    updateMany?: ReferralRewardUpdateManyWithWhereWithoutReferralInput | ReferralRewardUpdateManyWithWhereWithoutReferralInput[]
    deleteMany?: ReferralRewardScalarWhereInput | ReferralRewardScalarWhereInput[]
  }

  export type ReferralRewardUncheckedUpdateManyWithoutReferralNestedInput = {
    create?: XOR<ReferralRewardCreateWithoutReferralInput, ReferralRewardUncheckedCreateWithoutReferralInput> | ReferralRewardCreateWithoutReferralInput[] | ReferralRewardUncheckedCreateWithoutReferralInput[]
    connectOrCreate?: ReferralRewardCreateOrConnectWithoutReferralInput | ReferralRewardCreateOrConnectWithoutReferralInput[]
    upsert?: ReferralRewardUpsertWithWhereUniqueWithoutReferralInput | ReferralRewardUpsertWithWhereUniqueWithoutReferralInput[]
    createMany?: ReferralRewardCreateManyReferralInputEnvelope
    set?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
    disconnect?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
    delete?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
    connect?: ReferralRewardWhereUniqueInput | ReferralRewardWhereUniqueInput[]
    update?: ReferralRewardUpdateWithWhereUniqueWithoutReferralInput | ReferralRewardUpdateWithWhereUniqueWithoutReferralInput[]
    updateMany?: ReferralRewardUpdateManyWithWhereWithoutReferralInput | ReferralRewardUpdateManyWithWhereWithoutReferralInput[]
    deleteMany?: ReferralRewardScalarWhereInput | ReferralRewardScalarWhereInput[]
  }

  export type ReferralCreateNestedOneWithoutRewardsInput = {
    create?: XOR<ReferralCreateWithoutRewardsInput, ReferralUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutRewardsInput
    connect?: ReferralWhereUniqueInput
  }

  export type EnumRewardTypeFieldUpdateOperationsInput = {
    set?: $Enums.RewardType
  }

  export type ReferralUpdateOneRequiredWithoutRewardsNestedInput = {
    create?: XOR<ReferralCreateWithoutRewardsInput, ReferralUncheckedCreateWithoutRewardsInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutRewardsInput
    upsert?: ReferralUpsertWithoutRewardsInput
    connect?: ReferralWhereUniqueInput
    update?: XOR<XOR<ReferralUpdateToOneWithWhereWithoutRewardsInput, ReferralUpdateWithoutRewardsInput>, ReferralUncheckedUpdateWithoutRewardsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type NestedEnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumQuestionReportTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionReportType | EnumQuestionReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionReportType[] | ListEnumQuestionReportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionReportType[] | ListEnumQuestionReportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionReportTypeFilter<$PrismaModel> | $Enums.QuestionReportType
  }

  export type NestedEnumReportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportStatus | EnumReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportStatus[] | ListEnumReportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportStatus[] | ListEnumReportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReportStatusFilter<$PrismaModel> | $Enums.ReportStatus
  }

  export type NestedEnumQuestionReportTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionReportType | EnumQuestionReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionReportType[] | ListEnumQuestionReportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionReportType[] | ListEnumQuestionReportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionReportTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionReportType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionReportTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionReportTypeFilter<$PrismaModel>
  }

  export type NestedEnumReportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportStatus | EnumReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReportStatus[] | ListEnumReportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportStatus[] | ListEnumReportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReportStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportStatusFilter<$PrismaModel>
    _max?: NestedEnumReportStatusFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumPlanIntervalFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanInterval | EnumPlanIntervalFieldRefInput<$PrismaModel>
    in?: $Enums.PlanInterval[] | ListEnumPlanIntervalFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanInterval[] | ListEnumPlanIntervalFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanIntervalFilter<$PrismaModel> | $Enums.PlanInterval
  }

  export type NestedEnumPlanTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeFilter<$PrismaModel> | $Enums.PlanType
  }

  export type NestedEnumPlanIntervalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanInterval | EnumPlanIntervalFieldRefInput<$PrismaModel>
    in?: $Enums.PlanInterval[] | ListEnumPlanIntervalFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanInterval[] | ListEnumPlanIntervalFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanIntervalWithAggregatesFilter<$PrismaModel> | $Enums.PlanInterval
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanIntervalFilter<$PrismaModel>
    _max?: NestedEnumPlanIntervalFilter<$PrismaModel>
  }

  export type NestedEnumPlanTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlanType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanTypeFilter<$PrismaModel>
    _max?: NestedEnumPlanTypeFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type NestedEnumOtpTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OtpType | EnumOtpTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OtpType[] | ListEnumOtpTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OtpType[] | ListEnumOtpTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOtpTypeFilter<$PrismaModel> | $Enums.OtpType
  }

  export type NestedEnumOtpTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OtpType | EnumOtpTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OtpType[] | ListEnumOtpTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OtpType[] | ListEnumOtpTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOtpTypeWithAggregatesFilter<$PrismaModel> | $Enums.OtpType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOtpTypeFilter<$PrismaModel>
    _max?: NestedEnumOtpTypeFilter<$PrismaModel>
  }

  export type NestedEnumReferralStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralStatus | EnumReferralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralStatusFilter<$PrismaModel> | $Enums.ReferralStatus
  }

  export type NestedEnumReferralStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralStatus | EnumReferralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReferralStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReferralStatusFilter<$PrismaModel>
    _max?: NestedEnumReferralStatusFilter<$PrismaModel>
  }

  export type NestedEnumRewardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeFilter<$PrismaModel> | $Enums.RewardType
  }

  export type NestedEnumRewardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardTypeFilter<$PrismaModel>
  }

  export type StreamCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: SubjectCreateNestedManyWithoutStreamInput
  }

  export type StreamUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: SubjectUncheckedCreateNestedManyWithoutStreamInput
  }

  export type StreamCreateOrConnectWithoutUsersInput = {
    where: StreamWhereUniqueInput
    create: XOR<StreamCreateWithoutUsersInput, StreamUncheckedCreateWithoutUsersInput>
  }

  export type SubscriptionCreateWithoutUserInput = {
    id?: string
    status?: $Enums.SubscriptionStatus
    startedAt?: Date | string
    endsAt?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubId?: string | null
    stripeStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    plan: PlanCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    planId: string
    status?: $Enums.SubscriptionStatus
    startedAt?: Date | string
    endsAt?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubId?: string | null
    stripeStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionCreateManyUserInputEnvelope = {
    data: SubscriptionCreateManyUserInput | SubscriptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ExamSubmissionCreateWithoutUserInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
    examPaper: ExamPaperCreateNestedOneWithoutSubmissionsInput
    answers?: ExamAnswerCreateNestedManyWithoutSubmissionInput
  }

  export type ExamSubmissionUncheckedCreateWithoutUserInput = {
    id?: string
    examPaperId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type ExamSubmissionCreateOrConnectWithoutUserInput = {
    where: ExamSubmissionWhereUniqueInput
    create: XOR<ExamSubmissionCreateWithoutUserInput, ExamSubmissionUncheckedCreateWithoutUserInput>
  }

  export type ExamSubmissionCreateManyUserInputEnvelope = {
    data: ExamSubmissionCreateManyUserInput | ExamSubmissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OtpCreateWithoutUserInput = {
    id?: string
    code: string
    type: $Enums.OtpType
    target: string
    expiresAt: Date | string
    consumed?: boolean
    createdAt?: Date | string
  }

  export type OtpUncheckedCreateWithoutUserInput = {
    id?: string
    code: string
    type: $Enums.OtpType
    target: string
    expiresAt: Date | string
    consumed?: boolean
    createdAt?: Date | string
  }

  export type OtpCreateOrConnectWithoutUserInput = {
    where: OtpWhereUniqueInput
    create: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput>
  }

  export type OtpCreateManyUserInputEnvelope = {
    data: OtpCreateManyUserInput | OtpCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReferralCodeCreateWithoutUserInput = {
    id?: string
    code: string
    isActive?: boolean
    usageCount?: number
    maxUsage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referrals?: ReferralCreateNestedManyWithoutReferralCodeInput
  }

  export type ReferralCodeUncheckedCreateWithoutUserInput = {
    id?: string
    code: string
    isActive?: boolean
    usageCount?: number
    maxUsage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referrals?: ReferralUncheckedCreateNestedManyWithoutReferralCodeInput
  }

  export type ReferralCodeCreateOrConnectWithoutUserInput = {
    where: ReferralCodeWhereUniqueInput
    create: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput>
  }

  export type ReferralCreateWithoutReferrerInput = {
    id?: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referee: UserCreateNestedOneWithoutReferralReceivedInput
    referralCode: ReferralCodeCreateNestedOneWithoutReferralsInput
    rewards?: ReferralRewardCreateNestedManyWithoutReferralInput
  }

  export type ReferralUncheckedCreateWithoutReferrerInput = {
    id?: string
    refereeId: string
    referralCodeId: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rewards?: ReferralRewardUncheckedCreateNestedManyWithoutReferralInput
  }

  export type ReferralCreateOrConnectWithoutReferrerInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutReferrerInput, ReferralUncheckedCreateWithoutReferrerInput>
  }

  export type ReferralCreateManyReferrerInputEnvelope = {
    data: ReferralCreateManyReferrerInput | ReferralCreateManyReferrerInput[]
    skipDuplicates?: boolean
  }

  export type ReferralCreateWithoutRefereeInput = {
    id?: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referrer: UserCreateNestedOneWithoutReferralsMadeInput
    referralCode: ReferralCodeCreateNestedOneWithoutReferralsInput
    rewards?: ReferralRewardCreateNestedManyWithoutReferralInput
  }

  export type ReferralUncheckedCreateWithoutRefereeInput = {
    id?: string
    referrerId: string
    referralCodeId: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rewards?: ReferralRewardUncheckedCreateNestedManyWithoutReferralInput
  }

  export type ReferralCreateOrConnectWithoutRefereeInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutRefereeInput, ReferralUncheckedCreateWithoutRefereeInput>
  }

  export type QuestionReportCreateWithoutUserInput = {
    id?: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    question: QuestionCreateNestedOneWithoutReportsInput
    suggestedOptions?: QuestionReportOptionCreateNestedManyWithoutReportInput
    reviewedBy?: UserCreateNestedOneWithoutReviewedReportsInput
  }

  export type QuestionReportUncheckedCreateWithoutUserInput = {
    id?: string
    questionId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedById?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    suggestedOptions?: QuestionReportOptionUncheckedCreateNestedManyWithoutReportInput
  }

  export type QuestionReportCreateOrConnectWithoutUserInput = {
    where: QuestionReportWhereUniqueInput
    create: XOR<QuestionReportCreateWithoutUserInput, QuestionReportUncheckedCreateWithoutUserInput>
  }

  export type QuestionReportCreateManyUserInputEnvelope = {
    data: QuestionReportCreateManyUserInput | QuestionReportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionReportCreateWithoutReviewedByInput = {
    id?: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    question: QuestionCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutQuestionReportsInput
    suggestedOptions?: QuestionReportOptionCreateNestedManyWithoutReportInput
  }

  export type QuestionReportUncheckedCreateWithoutReviewedByInput = {
    id?: string
    questionId: string
    userId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    suggestedOptions?: QuestionReportOptionUncheckedCreateNestedManyWithoutReportInput
  }

  export type QuestionReportCreateOrConnectWithoutReviewedByInput = {
    where: QuestionReportWhereUniqueInput
    create: XOR<QuestionReportCreateWithoutReviewedByInput, QuestionReportUncheckedCreateWithoutReviewedByInput>
  }

  export type QuestionReportCreateManyReviewedByInputEnvelope = {
    data: QuestionReportCreateManyReviewedByInput | QuestionReportCreateManyReviewedByInput[]
    skipDuplicates?: boolean
  }

  export type StreamUpsertWithoutUsersInput = {
    update: XOR<StreamUpdateWithoutUsersInput, StreamUncheckedUpdateWithoutUsersInput>
    create: XOR<StreamCreateWithoutUsersInput, StreamUncheckedCreateWithoutUsersInput>
    where?: StreamWhereInput
  }

  export type StreamUpdateToOneWithWhereWithoutUsersInput = {
    where?: StreamWhereInput
    data: XOR<StreamUpdateWithoutUsersInput, StreamUncheckedUpdateWithoutUsersInput>
  }

  export type StreamUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUpdateManyWithoutStreamNestedInput
  }

  export type StreamUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUncheckedUpdateManyWithoutStreamNestedInput
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutUserInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: StringFilter<"Subscription"> | string
    userId?: StringFilter<"Subscription"> | string
    planId?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    startedAt?: DateTimeFilter<"Subscription"> | Date | string
    endsAt?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    stripeCustomerId?: StringNullableFilter<"Subscription"> | string | null
    stripeSubId?: StringNullableFilter<"Subscription"> | string | null
    stripeStatus?: StringNullableFilter<"Subscription"> | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
  }

  export type ExamSubmissionUpsertWithWhereUniqueWithoutUserInput = {
    where: ExamSubmissionWhereUniqueInput
    update: XOR<ExamSubmissionUpdateWithoutUserInput, ExamSubmissionUncheckedUpdateWithoutUserInput>
    create: XOR<ExamSubmissionCreateWithoutUserInput, ExamSubmissionUncheckedCreateWithoutUserInput>
  }

  export type ExamSubmissionUpdateWithWhereUniqueWithoutUserInput = {
    where: ExamSubmissionWhereUniqueInput
    data: XOR<ExamSubmissionUpdateWithoutUserInput, ExamSubmissionUncheckedUpdateWithoutUserInput>
  }

  export type ExamSubmissionUpdateManyWithWhereWithoutUserInput = {
    where: ExamSubmissionScalarWhereInput
    data: XOR<ExamSubmissionUpdateManyMutationInput, ExamSubmissionUncheckedUpdateManyWithoutUserInput>
  }

  export type ExamSubmissionScalarWhereInput = {
    AND?: ExamSubmissionScalarWhereInput | ExamSubmissionScalarWhereInput[]
    OR?: ExamSubmissionScalarWhereInput[]
    NOT?: ExamSubmissionScalarWhereInput | ExamSubmissionScalarWhereInput[]
    id?: StringFilter<"ExamSubmission"> | string
    userId?: StringFilter<"ExamSubmission"> | string
    examPaperId?: StringFilter<"ExamSubmission"> | string
    startedAt?: DateTimeFilter<"ExamSubmission"> | Date | string
    submittedAt?: DateTimeNullableFilter<"ExamSubmission"> | Date | string | null
    totalQuestions?: IntFilter<"ExamSubmission"> | number
    correctCount?: IntFilter<"ExamSubmission"> | number
    scorePercent?: FloatNullableFilter<"ExamSubmission"> | number | null
  }

  export type OtpUpsertWithWhereUniqueWithoutUserInput = {
    where: OtpWhereUniqueInput
    update: XOR<OtpUpdateWithoutUserInput, OtpUncheckedUpdateWithoutUserInput>
    create: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput>
  }

  export type OtpUpdateWithWhereUniqueWithoutUserInput = {
    where: OtpWhereUniqueInput
    data: XOR<OtpUpdateWithoutUserInput, OtpUncheckedUpdateWithoutUserInput>
  }

  export type OtpUpdateManyWithWhereWithoutUserInput = {
    where: OtpScalarWhereInput
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyWithoutUserInput>
  }

  export type OtpScalarWhereInput = {
    AND?: OtpScalarWhereInput | OtpScalarWhereInput[]
    OR?: OtpScalarWhereInput[]
    NOT?: OtpScalarWhereInput | OtpScalarWhereInput[]
    id?: StringFilter<"Otp"> | string
    userId?: StringFilter<"Otp"> | string
    code?: StringFilter<"Otp"> | string
    type?: EnumOtpTypeFilter<"Otp"> | $Enums.OtpType
    target?: StringFilter<"Otp"> | string
    expiresAt?: DateTimeFilter<"Otp"> | Date | string
    consumed?: BoolFilter<"Otp"> | boolean
    createdAt?: DateTimeFilter<"Otp"> | Date | string
  }

  export type ReferralCodeUpsertWithoutUserInput = {
    update: XOR<ReferralCodeUpdateWithoutUserInput, ReferralCodeUncheckedUpdateWithoutUserInput>
    create: XOR<ReferralCodeCreateWithoutUserInput, ReferralCodeUncheckedCreateWithoutUserInput>
    where?: ReferralCodeWhereInput
  }

  export type ReferralCodeUpdateToOneWithWhereWithoutUserInput = {
    where?: ReferralCodeWhereInput
    data: XOR<ReferralCodeUpdateWithoutUserInput, ReferralCodeUncheckedUpdateWithoutUserInput>
  }

  export type ReferralCodeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    maxUsage?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referrals?: ReferralUpdateManyWithoutReferralCodeNestedInput
  }

  export type ReferralCodeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    maxUsage?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referrals?: ReferralUncheckedUpdateManyWithoutReferralCodeNestedInput
  }

  export type ReferralUpsertWithWhereUniqueWithoutReferrerInput = {
    where: ReferralWhereUniqueInput
    update: XOR<ReferralUpdateWithoutReferrerInput, ReferralUncheckedUpdateWithoutReferrerInput>
    create: XOR<ReferralCreateWithoutReferrerInput, ReferralUncheckedCreateWithoutReferrerInput>
  }

  export type ReferralUpdateWithWhereUniqueWithoutReferrerInput = {
    where: ReferralWhereUniqueInput
    data: XOR<ReferralUpdateWithoutReferrerInput, ReferralUncheckedUpdateWithoutReferrerInput>
  }

  export type ReferralUpdateManyWithWhereWithoutReferrerInput = {
    where: ReferralScalarWhereInput
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyWithoutReferrerInput>
  }

  export type ReferralScalarWhereInput = {
    AND?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
    OR?: ReferralScalarWhereInput[]
    NOT?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
    id?: StringFilter<"Referral"> | string
    referrerId?: StringFilter<"Referral"> | string
    refereeId?: StringFilter<"Referral"> | string
    referralCodeId?: StringFilter<"Referral"> | string
    status?: EnumReferralStatusFilter<"Referral"> | $Enums.ReferralStatus
    completedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
    createdAt?: DateTimeFilter<"Referral"> | Date | string
    updatedAt?: DateTimeFilter<"Referral"> | Date | string
  }

  export type ReferralUpsertWithoutRefereeInput = {
    update: XOR<ReferralUpdateWithoutRefereeInput, ReferralUncheckedUpdateWithoutRefereeInput>
    create: XOR<ReferralCreateWithoutRefereeInput, ReferralUncheckedCreateWithoutRefereeInput>
    where?: ReferralWhereInput
  }

  export type ReferralUpdateToOneWithWhereWithoutRefereeInput = {
    where?: ReferralWhereInput
    data: XOR<ReferralUpdateWithoutRefereeInput, ReferralUncheckedUpdateWithoutRefereeInput>
  }

  export type ReferralUpdateWithoutRefereeInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referrer?: UserUpdateOneRequiredWithoutReferralsMadeNestedInput
    referralCode?: ReferralCodeUpdateOneRequiredWithoutReferralsNestedInput
    rewards?: ReferralRewardUpdateManyWithoutReferralNestedInput
  }

  export type ReferralUncheckedUpdateWithoutRefereeInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    referralCodeId?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rewards?: ReferralRewardUncheckedUpdateManyWithoutReferralNestedInput
  }

  export type QuestionReportUpsertWithWhereUniqueWithoutUserInput = {
    where: QuestionReportWhereUniqueInput
    update: XOR<QuestionReportUpdateWithoutUserInput, QuestionReportUncheckedUpdateWithoutUserInput>
    create: XOR<QuestionReportCreateWithoutUserInput, QuestionReportUncheckedCreateWithoutUserInput>
  }

  export type QuestionReportUpdateWithWhereUniqueWithoutUserInput = {
    where: QuestionReportWhereUniqueInput
    data: XOR<QuestionReportUpdateWithoutUserInput, QuestionReportUncheckedUpdateWithoutUserInput>
  }

  export type QuestionReportUpdateManyWithWhereWithoutUserInput = {
    where: QuestionReportScalarWhereInput
    data: XOR<QuestionReportUpdateManyMutationInput, QuestionReportUncheckedUpdateManyWithoutUserInput>
  }

  export type QuestionReportScalarWhereInput = {
    AND?: QuestionReportScalarWhereInput | QuestionReportScalarWhereInput[]
    OR?: QuestionReportScalarWhereInput[]
    NOT?: QuestionReportScalarWhereInput | QuestionReportScalarWhereInput[]
    id?: StringFilter<"QuestionReport"> | string
    questionId?: StringFilter<"QuestionReport"> | string
    userId?: StringFilter<"QuestionReport"> | string
    reportType?: EnumQuestionReportTypeFilter<"QuestionReport"> | $Enums.QuestionReportType
    reason?: StringFilter<"QuestionReport"> | string
    description?: StringNullableFilter<"QuestionReport"> | string | null
    status?: EnumReportStatusFilter<"QuestionReport"> | $Enums.ReportStatus
    alternativeExplanation?: StringNullableFilter<"QuestionReport"> | string | null
    suggestedAnswer?: StringNullableFilter<"QuestionReport"> | string | null
    reviewedById?: StringNullableFilter<"QuestionReport"> | string | null
    reviewedAt?: DateTimeNullableFilter<"QuestionReport"> | Date | string | null
    reviewNotes?: StringNullableFilter<"QuestionReport"> | string | null
    createdAt?: DateTimeFilter<"QuestionReport"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionReport"> | Date | string
  }

  export type QuestionReportUpsertWithWhereUniqueWithoutReviewedByInput = {
    where: QuestionReportWhereUniqueInput
    update: XOR<QuestionReportUpdateWithoutReviewedByInput, QuestionReportUncheckedUpdateWithoutReviewedByInput>
    create: XOR<QuestionReportCreateWithoutReviewedByInput, QuestionReportUncheckedCreateWithoutReviewedByInput>
  }

  export type QuestionReportUpdateWithWhereUniqueWithoutReviewedByInput = {
    where: QuestionReportWhereUniqueInput
    data: XOR<QuestionReportUpdateWithoutReviewedByInput, QuestionReportUncheckedUpdateWithoutReviewedByInput>
  }

  export type QuestionReportUpdateManyWithWhereWithoutReviewedByInput = {
    where: QuestionReportScalarWhereInput
    data: XOR<QuestionReportUpdateManyMutationInput, QuestionReportUncheckedUpdateManyWithoutReviewedByInput>
  }

  export type SubjectCreateWithoutStreamInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicCreateNestedManyWithoutSubjectInput
    questions?: QuestionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutStreamInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutSubjectInput
    questions?: QuestionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutStreamInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutStreamInput, SubjectUncheckedCreateWithoutStreamInput>
  }

  export type SubjectCreateManyStreamInputEnvelope = {
    data: SubjectCreateManyStreamInput | SubjectCreateManyStreamInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStreamInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionCreateNestedManyWithoutUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeCreateNestedOneWithoutUserInput
    referralsMade?: ReferralCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportCreateNestedManyWithoutReviewedByInput
  }

  export type UserUncheckedCreateWithoutStreamInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionUncheckedCreateNestedManyWithoutUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeUncheckedCreateNestedOneWithoutUserInput
    referralsMade?: ReferralUncheckedCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralUncheckedCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportUncheckedCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput
  }

  export type UserCreateOrConnectWithoutStreamInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput>
  }

  export type UserCreateManyStreamInputEnvelope = {
    data: UserCreateManyStreamInput | UserCreateManyStreamInput[]
    skipDuplicates?: boolean
  }

  export type SubjectUpsertWithWhereUniqueWithoutStreamInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutStreamInput, SubjectUncheckedUpdateWithoutStreamInput>
    create: XOR<SubjectCreateWithoutStreamInput, SubjectUncheckedCreateWithoutStreamInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutStreamInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutStreamInput, SubjectUncheckedUpdateWithoutStreamInput>
  }

  export type SubjectUpdateManyWithWhereWithoutStreamInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutStreamInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    OR?: SubjectScalarWhereInput[]
    NOT?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    id?: StringFilter<"Subject"> | string
    name?: StringFilter<"Subject"> | string
    description?: StringNullableFilter<"Subject"> | string | null
    streamId?: StringFilter<"Subject"> | string
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutStreamInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStreamInput, UserUncheckedUpdateWithoutStreamInput>
    create: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStreamInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStreamInput, UserUncheckedUpdateWithoutStreamInput>
  }

  export type UserUpdateManyWithWhereWithoutStreamInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStreamInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    phoneVerified?: BoolFilter<"User"> | boolean
    hashedPassword?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    streamId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    trialStartedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    trialEndsAt?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type StreamCreateWithoutSubjectsInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutStreamInput
  }

  export type StreamUncheckedCreateWithoutSubjectsInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutStreamInput
  }

  export type StreamCreateOrConnectWithoutSubjectsInput = {
    where: StreamWhereUniqueInput
    create: XOR<StreamCreateWithoutSubjectsInput, StreamUncheckedCreateWithoutSubjectsInput>
  }

  export type TopicCreateWithoutSubjectInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopics?: SubtopicCreateNestedManyWithoutTopicInput
    questions?: QuestionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutSubjectInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopics?: SubtopicUncheckedCreateNestedManyWithoutTopicInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutSubjectInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutSubjectInput, TopicUncheckedCreateWithoutSubjectInput>
  }

  export type TopicCreateManySubjectInputEnvelope = {
    data: TopicCreateManySubjectInput | TopicCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type QuestionCreateWithoutSubjectInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topic?: TopicCreateNestedOneWithoutQuestionsInput
    subtopic?: SubtopicCreateNestedOneWithoutQuestionsInput
    tags?: QuestionTagCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutSubjectInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    topicId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: QuestionTagUncheckedCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportUncheckedCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutSubjectInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutSubjectInput, QuestionUncheckedCreateWithoutSubjectInput>
  }

  export type QuestionCreateManySubjectInputEnvelope = {
    data: QuestionCreateManySubjectInput | QuestionCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type StreamUpsertWithoutSubjectsInput = {
    update: XOR<StreamUpdateWithoutSubjectsInput, StreamUncheckedUpdateWithoutSubjectsInput>
    create: XOR<StreamCreateWithoutSubjectsInput, StreamUncheckedCreateWithoutSubjectsInput>
    where?: StreamWhereInput
  }

  export type StreamUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: StreamWhereInput
    data: XOR<StreamUpdateWithoutSubjectsInput, StreamUncheckedUpdateWithoutSubjectsInput>
  }

  export type StreamUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutStreamNestedInput
  }

  export type StreamUncheckedUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutStreamNestedInput
  }

  export type TopicUpsertWithWhereUniqueWithoutSubjectInput = {
    where: TopicWhereUniqueInput
    update: XOR<TopicUpdateWithoutSubjectInput, TopicUncheckedUpdateWithoutSubjectInput>
    create: XOR<TopicCreateWithoutSubjectInput, TopicUncheckedCreateWithoutSubjectInput>
  }

  export type TopicUpdateWithWhereUniqueWithoutSubjectInput = {
    where: TopicWhereUniqueInput
    data: XOR<TopicUpdateWithoutSubjectInput, TopicUncheckedUpdateWithoutSubjectInput>
  }

  export type TopicUpdateManyWithWhereWithoutSubjectInput = {
    where: TopicScalarWhereInput
    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyWithoutSubjectInput>
  }

  export type TopicScalarWhereInput = {
    AND?: TopicScalarWhereInput | TopicScalarWhereInput[]
    OR?: TopicScalarWhereInput[]
    NOT?: TopicScalarWhereInput | TopicScalarWhereInput[]
    id?: StringFilter<"Topic"> | string
    name?: StringFilter<"Topic"> | string
    description?: StringNullableFilter<"Topic"> | string | null
    subjectId?: StringFilter<"Topic"> | string
    createdAt?: DateTimeFilter<"Topic"> | Date | string
    updatedAt?: DateTimeFilter<"Topic"> | Date | string
  }

  export type QuestionUpsertWithWhereUniqueWithoutSubjectInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutSubjectInput, QuestionUncheckedUpdateWithoutSubjectInput>
    create: XOR<QuestionCreateWithoutSubjectInput, QuestionUncheckedCreateWithoutSubjectInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutSubjectInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutSubjectInput, QuestionUncheckedUpdateWithoutSubjectInput>
  }

  export type QuestionUpdateManyWithWhereWithoutSubjectInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutSubjectInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    stem?: StringFilter<"Question"> | string
    explanation?: StringNullableFilter<"Question"> | string | null
    difficulty?: EnumDifficultyFilter<"Question"> | $Enums.Difficulty
    yearAppeared?: IntNullableFilter<"Question"> | number | null
    isPreviousYear?: BoolFilter<"Question"> | boolean
    isAIGenerated?: BoolFilter<"Question"> | boolean
    aiPrompt?: StringNullableFilter<"Question"> | string | null
    subjectId?: StringNullableFilter<"Question"> | string | null
    topicId?: StringNullableFilter<"Question"> | string | null
    subtopicId?: StringNullableFilter<"Question"> | string | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
  }

  export type SubjectCreateWithoutTopicsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stream: StreamCreateNestedOneWithoutSubjectsInput
    questions?: QuestionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutTopicsInput = {
    id?: string
    name: string
    description?: string | null
    streamId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutTopicsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutTopicsInput, SubjectUncheckedCreateWithoutTopicsInput>
  }

  export type SubtopicCreateWithoutTopicInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicUncheckedCreateWithoutTopicInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicCreateOrConnectWithoutTopicInput = {
    where: SubtopicWhereUniqueInput
    create: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput>
  }

  export type SubtopicCreateManyTopicInputEnvelope = {
    data: SubtopicCreateManyTopicInput | SubtopicCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type QuestionCreateWithoutTopicInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject?: SubjectCreateNestedOneWithoutQuestionsInput
    subtopic?: SubtopicCreateNestedOneWithoutQuestionsInput
    tags?: QuestionTagCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutTopicInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: QuestionTagUncheckedCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportUncheckedCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutTopicInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutTopicInput, QuestionUncheckedCreateWithoutTopicInput>
  }

  export type QuestionCreateManyTopicInputEnvelope = {
    data: QuestionCreateManyTopicInput | QuestionCreateManyTopicInput[]
    skipDuplicates?: boolean
  }

  export type SubjectUpsertWithoutTopicsInput = {
    update: XOR<SubjectUpdateWithoutTopicsInput, SubjectUncheckedUpdateWithoutTopicsInput>
    create: XOR<SubjectCreateWithoutTopicsInput, SubjectUncheckedCreateWithoutTopicsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutTopicsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutTopicsInput, SubjectUncheckedUpdateWithoutTopicsInput>
  }

  export type SubjectUpdateWithoutTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stream?: StreamUpdateOneRequiredWithoutSubjectsNestedInput
    questions?: QuestionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    streamId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubtopicUpsertWithWhereUniqueWithoutTopicInput = {
    where: SubtopicWhereUniqueInput
    update: XOR<SubtopicUpdateWithoutTopicInput, SubtopicUncheckedUpdateWithoutTopicInput>
    create: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput>
  }

  export type SubtopicUpdateWithWhereUniqueWithoutTopicInput = {
    where: SubtopicWhereUniqueInput
    data: XOR<SubtopicUpdateWithoutTopicInput, SubtopicUncheckedUpdateWithoutTopicInput>
  }

  export type SubtopicUpdateManyWithWhereWithoutTopicInput = {
    where: SubtopicScalarWhereInput
    data: XOR<SubtopicUpdateManyMutationInput, SubtopicUncheckedUpdateManyWithoutTopicInput>
  }

  export type SubtopicScalarWhereInput = {
    AND?: SubtopicScalarWhereInput | SubtopicScalarWhereInput[]
    OR?: SubtopicScalarWhereInput[]
    NOT?: SubtopicScalarWhereInput | SubtopicScalarWhereInput[]
    id?: StringFilter<"Subtopic"> | string
    name?: StringFilter<"Subtopic"> | string
    description?: StringNullableFilter<"Subtopic"> | string | null
    topicId?: StringFilter<"Subtopic"> | string
    createdAt?: DateTimeFilter<"Subtopic"> | Date | string
    updatedAt?: DateTimeFilter<"Subtopic"> | Date | string
  }

  export type QuestionUpsertWithWhereUniqueWithoutTopicInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutTopicInput, QuestionUncheckedUpdateWithoutTopicInput>
    create: XOR<QuestionCreateWithoutTopicInput, QuestionUncheckedCreateWithoutTopicInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutTopicInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutTopicInput, QuestionUncheckedUpdateWithoutTopicInput>
  }

  export type QuestionUpdateManyWithWhereWithoutTopicInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutTopicInput>
  }

  export type TopicCreateWithoutSubtopicsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutTopicsInput
    questions?: QuestionCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutSubtopicsInput = {
    id?: string
    name: string
    description?: string | null
    subjectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutSubtopicsInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutSubtopicsInput, TopicUncheckedCreateWithoutSubtopicsInput>
  }

  export type QuestionCreateWithoutSubtopicInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject?: SubjectCreateNestedOneWithoutQuestionsInput
    topic?: TopicCreateNestedOneWithoutQuestionsInput
    tags?: QuestionTagCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutSubtopicInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    topicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: QuestionTagUncheckedCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportUncheckedCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutSubtopicInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutSubtopicInput, QuestionUncheckedCreateWithoutSubtopicInput>
  }

  export type QuestionCreateManySubtopicInputEnvelope = {
    data: QuestionCreateManySubtopicInput | QuestionCreateManySubtopicInput[]
    skipDuplicates?: boolean
  }

  export type TopicUpsertWithoutSubtopicsInput = {
    update: XOR<TopicUpdateWithoutSubtopicsInput, TopicUncheckedUpdateWithoutSubtopicsInput>
    create: XOR<TopicCreateWithoutSubtopicsInput, TopicUncheckedCreateWithoutSubtopicsInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutSubtopicsInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutSubtopicsInput, TopicUncheckedUpdateWithoutSubtopicsInput>
  }

  export type TopicUpdateWithoutSubtopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutTopicsNestedInput
    questions?: QuestionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutSubtopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type QuestionUpsertWithWhereUniqueWithoutSubtopicInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutSubtopicInput, QuestionUncheckedUpdateWithoutSubtopicInput>
    create: XOR<QuestionCreateWithoutSubtopicInput, QuestionUncheckedCreateWithoutSubtopicInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutSubtopicInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutSubtopicInput, QuestionUncheckedUpdateWithoutSubtopicInput>
  }

  export type QuestionUpdateManyWithWhereWithoutSubtopicInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutSubtopicInput>
  }

  export type SubjectCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stream: StreamCreateNestedOneWithoutSubjectsInput
    topics?: TopicCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    streamId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    topics?: TopicUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutQuestionsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutQuestionsInput, SubjectUncheckedCreateWithoutQuestionsInput>
  }

  export type TopicCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutTopicsInput
    subtopics?: SubtopicCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    subjectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopics?: SubtopicUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutQuestionsInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutQuestionsInput, TopicUncheckedCreateWithoutQuestionsInput>
  }

  export type SubtopicCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topic: TopicCreateNestedOneWithoutSubtopicsInput
  }

  export type SubtopicUncheckedCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    topicId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubtopicCreateOrConnectWithoutQuestionsInput = {
    where: SubtopicWhereUniqueInput
    create: XOR<SubtopicCreateWithoutQuestionsInput, SubtopicUncheckedCreateWithoutQuestionsInput>
  }

  export type QuestionTagCreateWithoutQuestionInput = {
    tag: TagCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionTagUncheckedCreateWithoutQuestionInput = {
    tagId: string
  }

  export type QuestionTagCreateOrConnectWithoutQuestionInput = {
    where: QuestionTagWhereUniqueInput
    create: XOR<QuestionTagCreateWithoutQuestionInput, QuestionTagUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionTagCreateManyQuestionInputEnvelope = {
    data: QuestionTagCreateManyQuestionInput | QuestionTagCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionOptionCreateWithoutQuestionInput = {
    id?: string
    text: string
    isCorrect?: boolean
    order?: number
    selectedByAnswers?: ExamAnswerCreateNestedManyWithoutSelectedOptionInput
  }

  export type QuestionOptionUncheckedCreateWithoutQuestionInput = {
    id?: string
    text: string
    isCorrect?: boolean
    order?: number
    selectedByAnswers?: ExamAnswerUncheckedCreateNestedManyWithoutSelectedOptionInput
  }

  export type QuestionOptionCreateOrConnectWithoutQuestionInput = {
    where: QuestionOptionWhereUniqueInput
    create: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionOptionCreateManyQuestionInputEnvelope = {
    data: QuestionOptionCreateManyQuestionInput | QuestionOptionCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type ExamAnswerCreateWithoutQuestionInput = {
    id?: string
    isCorrect?: boolean
    submission: ExamSubmissionCreateNestedOneWithoutAnswersInput
    selectedOption?: QuestionOptionCreateNestedOneWithoutSelectedByAnswersInput
  }

  export type ExamAnswerUncheckedCreateWithoutQuestionInput = {
    id?: string
    submissionId: string
    selectedOptionId?: string | null
    isCorrect?: boolean
  }

  export type ExamAnswerCreateOrConnectWithoutQuestionInput = {
    where: ExamAnswerWhereUniqueInput
    create: XOR<ExamAnswerCreateWithoutQuestionInput, ExamAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type ExamAnswerCreateManyQuestionInputEnvelope = {
    data: ExamAnswerCreateManyQuestionInput | ExamAnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionReportCreateWithoutQuestionInput = {
    id?: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutQuestionReportsInput
    suggestedOptions?: QuestionReportOptionCreateNestedManyWithoutReportInput
    reviewedBy?: UserCreateNestedOneWithoutReviewedReportsInput
  }

  export type QuestionReportUncheckedCreateWithoutQuestionInput = {
    id?: string
    userId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedById?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    suggestedOptions?: QuestionReportOptionUncheckedCreateNestedManyWithoutReportInput
  }

  export type QuestionReportCreateOrConnectWithoutQuestionInput = {
    where: QuestionReportWhereUniqueInput
    create: XOR<QuestionReportCreateWithoutQuestionInput, QuestionReportUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionReportCreateManyQuestionInputEnvelope = {
    data: QuestionReportCreateManyQuestionInput | QuestionReportCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionAlternativeExplanationCreateWithoutQuestionInput = {
    id?: string
    explanation: string
    source: string
    reportId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput = {
    id?: string
    explanation: string
    source: string
    reportId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionAlternativeExplanationCreateOrConnectWithoutQuestionInput = {
    where: QuestionAlternativeExplanationWhereUniqueInput
    create: XOR<QuestionAlternativeExplanationCreateWithoutQuestionInput, QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionAlternativeExplanationCreateManyQuestionInputEnvelope = {
    data: QuestionAlternativeExplanationCreateManyQuestionInput | QuestionAlternativeExplanationCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type SubjectUpsertWithoutQuestionsInput = {
    update: XOR<SubjectUpdateWithoutQuestionsInput, SubjectUncheckedUpdateWithoutQuestionsInput>
    create: XOR<SubjectCreateWithoutQuestionsInput, SubjectUncheckedCreateWithoutQuestionsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutQuestionsInput, SubjectUncheckedUpdateWithoutQuestionsInput>
  }

  export type SubjectUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stream?: StreamUpdateOneRequiredWithoutSubjectsNestedInput
    topics?: TopicUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    streamId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type TopicUpsertWithoutQuestionsInput = {
    update: XOR<TopicUpdateWithoutQuestionsInput, TopicUncheckedUpdateWithoutQuestionsInput>
    create: XOR<TopicCreateWithoutQuestionsInput, TopicUncheckedCreateWithoutQuestionsInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutQuestionsInput, TopicUncheckedUpdateWithoutQuestionsInput>
  }

  export type TopicUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutTopicsNestedInput
    subtopics?: SubtopicUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopics?: SubtopicUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type SubtopicUpsertWithoutQuestionsInput = {
    update: XOR<SubtopicUpdateWithoutQuestionsInput, SubtopicUncheckedUpdateWithoutQuestionsInput>
    create: XOR<SubtopicCreateWithoutQuestionsInput, SubtopicUncheckedCreateWithoutQuestionsInput>
    where?: SubtopicWhereInput
  }

  export type SubtopicUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: SubtopicWhereInput
    data: XOR<SubtopicUpdateWithoutQuestionsInput, SubtopicUncheckedUpdateWithoutQuestionsInput>
  }

  export type SubtopicUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutSubtopicsNestedInput
  }

  export type SubtopicUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionTagUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionTagWhereUniqueInput
    update: XOR<QuestionTagUpdateWithoutQuestionInput, QuestionTagUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionTagCreateWithoutQuestionInput, QuestionTagUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionTagUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionTagWhereUniqueInput
    data: XOR<QuestionTagUpdateWithoutQuestionInput, QuestionTagUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionTagUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionTagScalarWhereInput
    data: XOR<QuestionTagUpdateManyMutationInput, QuestionTagUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionTagScalarWhereInput = {
    AND?: QuestionTagScalarWhereInput | QuestionTagScalarWhereInput[]
    OR?: QuestionTagScalarWhereInput[]
    NOT?: QuestionTagScalarWhereInput | QuestionTagScalarWhereInput[]
    questionId?: StringFilter<"QuestionTag"> | string
    tagId?: StringFilter<"QuestionTag"> | string
  }

  export type QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionOptionWhereUniqueInput
    update: XOR<QuestionOptionUpdateWithoutQuestionInput, QuestionOptionUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionOptionWhereUniqueInput
    data: XOR<QuestionOptionUpdateWithoutQuestionInput, QuestionOptionUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionOptionUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionOptionScalarWhereInput
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionOptionScalarWhereInput = {
    AND?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
    OR?: QuestionOptionScalarWhereInput[]
    NOT?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
    id?: StringFilter<"QuestionOption"> | string
    questionId?: StringFilter<"QuestionOption"> | string
    text?: StringFilter<"QuestionOption"> | string
    isCorrect?: BoolFilter<"QuestionOption"> | boolean
    order?: IntFilter<"QuestionOption"> | number
  }

  export type ExamAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: ExamAnswerWhereUniqueInput
    update: XOR<ExamAnswerUpdateWithoutQuestionInput, ExamAnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<ExamAnswerCreateWithoutQuestionInput, ExamAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type ExamAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: ExamAnswerWhereUniqueInput
    data: XOR<ExamAnswerUpdateWithoutQuestionInput, ExamAnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type ExamAnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: ExamAnswerScalarWhereInput
    data: XOR<ExamAnswerUpdateManyMutationInput, ExamAnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type ExamAnswerScalarWhereInput = {
    AND?: ExamAnswerScalarWhereInput | ExamAnswerScalarWhereInput[]
    OR?: ExamAnswerScalarWhereInput[]
    NOT?: ExamAnswerScalarWhereInput | ExamAnswerScalarWhereInput[]
    id?: StringFilter<"ExamAnswer"> | string
    submissionId?: StringFilter<"ExamAnswer"> | string
    questionId?: StringFilter<"ExamAnswer"> | string
    selectedOptionId?: StringNullableFilter<"ExamAnswer"> | string | null
    isCorrect?: BoolFilter<"ExamAnswer"> | boolean
  }

  export type QuestionReportUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionReportWhereUniqueInput
    update: XOR<QuestionReportUpdateWithoutQuestionInput, QuestionReportUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionReportCreateWithoutQuestionInput, QuestionReportUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionReportUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionReportWhereUniqueInput
    data: XOR<QuestionReportUpdateWithoutQuestionInput, QuestionReportUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionReportUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionReportScalarWhereInput
    data: XOR<QuestionReportUpdateManyMutationInput, QuestionReportUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionAlternativeExplanationUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionAlternativeExplanationWhereUniqueInput
    update: XOR<QuestionAlternativeExplanationUpdateWithoutQuestionInput, QuestionAlternativeExplanationUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionAlternativeExplanationCreateWithoutQuestionInput, QuestionAlternativeExplanationUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionAlternativeExplanationUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionAlternativeExplanationWhereUniqueInput
    data: XOR<QuestionAlternativeExplanationUpdateWithoutQuestionInput, QuestionAlternativeExplanationUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionAlternativeExplanationUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionAlternativeExplanationScalarWhereInput
    data: XOR<QuestionAlternativeExplanationUpdateManyMutationInput, QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionAlternativeExplanationScalarWhereInput = {
    AND?: QuestionAlternativeExplanationScalarWhereInput | QuestionAlternativeExplanationScalarWhereInput[]
    OR?: QuestionAlternativeExplanationScalarWhereInput[]
    NOT?: QuestionAlternativeExplanationScalarWhereInput | QuestionAlternativeExplanationScalarWhereInput[]
    id?: StringFilter<"QuestionAlternativeExplanation"> | string
    questionId?: StringFilter<"QuestionAlternativeExplanation"> | string
    explanation?: StringFilter<"QuestionAlternativeExplanation"> | string
    source?: StringFilter<"QuestionAlternativeExplanation"> | string
    reportId?: StringNullableFilter<"QuestionAlternativeExplanation"> | string | null
    createdAt?: DateTimeFilter<"QuestionAlternativeExplanation"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionAlternativeExplanation"> | Date | string
  }

  export type QuestionCreateWithoutOptionsInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject?: SubjectCreateNestedOneWithoutQuestionsInput
    topic?: TopicCreateNestedOneWithoutQuestionsInput
    subtopic?: SubtopicCreateNestedOneWithoutQuestionsInput
    tags?: QuestionTagCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutOptionsInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    topicId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: QuestionTagUncheckedCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportUncheckedCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutOptionsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
  }

  export type ExamAnswerCreateWithoutSelectedOptionInput = {
    id?: string
    isCorrect?: boolean
    submission: ExamSubmissionCreateNestedOneWithoutAnswersInput
    question: QuestionCreateNestedOneWithoutAnswersInput
  }

  export type ExamAnswerUncheckedCreateWithoutSelectedOptionInput = {
    id?: string
    submissionId: string
    questionId: string
    isCorrect?: boolean
  }

  export type ExamAnswerCreateOrConnectWithoutSelectedOptionInput = {
    where: ExamAnswerWhereUniqueInput
    create: XOR<ExamAnswerCreateWithoutSelectedOptionInput, ExamAnswerUncheckedCreateWithoutSelectedOptionInput>
  }

  export type ExamAnswerCreateManySelectedOptionInputEnvelope = {
    data: ExamAnswerCreateManySelectedOptionInput | ExamAnswerCreateManySelectedOptionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionUpsertWithoutOptionsInput = {
    update: XOR<QuestionUpdateWithoutOptionsInput, QuestionUncheckedUpdateWithoutOptionsInput>
    create: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutOptionsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutOptionsInput, QuestionUncheckedUpdateWithoutOptionsInput>
  }

  export type QuestionUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneWithoutQuestionsNestedInput
    topic?: TopicUpdateOneWithoutQuestionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutQuestionsNestedInput
    tags?: QuestionTagUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUncheckedUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type ExamAnswerUpsertWithWhereUniqueWithoutSelectedOptionInput = {
    where: ExamAnswerWhereUniqueInput
    update: XOR<ExamAnswerUpdateWithoutSelectedOptionInput, ExamAnswerUncheckedUpdateWithoutSelectedOptionInput>
    create: XOR<ExamAnswerCreateWithoutSelectedOptionInput, ExamAnswerUncheckedCreateWithoutSelectedOptionInput>
  }

  export type ExamAnswerUpdateWithWhereUniqueWithoutSelectedOptionInput = {
    where: ExamAnswerWhereUniqueInput
    data: XOR<ExamAnswerUpdateWithoutSelectedOptionInput, ExamAnswerUncheckedUpdateWithoutSelectedOptionInput>
  }

  export type ExamAnswerUpdateManyWithWhereWithoutSelectedOptionInput = {
    where: ExamAnswerScalarWhereInput
    data: XOR<ExamAnswerUpdateManyMutationInput, ExamAnswerUncheckedUpdateManyWithoutSelectedOptionInput>
  }

  export type QuestionTagCreateWithoutTagInput = {
    question: QuestionCreateNestedOneWithoutTagsInput
  }

  export type QuestionTagUncheckedCreateWithoutTagInput = {
    questionId: string
  }

  export type QuestionTagCreateOrConnectWithoutTagInput = {
    where: QuestionTagWhereUniqueInput
    create: XOR<QuestionTagCreateWithoutTagInput, QuestionTagUncheckedCreateWithoutTagInput>
  }

  export type QuestionTagCreateManyTagInputEnvelope = {
    data: QuestionTagCreateManyTagInput | QuestionTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type QuestionTagUpsertWithWhereUniqueWithoutTagInput = {
    where: QuestionTagWhereUniqueInput
    update: XOR<QuestionTagUpdateWithoutTagInput, QuestionTagUncheckedUpdateWithoutTagInput>
    create: XOR<QuestionTagCreateWithoutTagInput, QuestionTagUncheckedCreateWithoutTagInput>
  }

  export type QuestionTagUpdateWithWhereUniqueWithoutTagInput = {
    where: QuestionTagWhereUniqueInput
    data: XOR<QuestionTagUpdateWithoutTagInput, QuestionTagUncheckedUpdateWithoutTagInput>
  }

  export type QuestionTagUpdateManyWithWhereWithoutTagInput = {
    where: QuestionTagScalarWhereInput
    data: XOR<QuestionTagUpdateManyMutationInput, QuestionTagUncheckedUpdateManyWithoutTagInput>
  }

  export type QuestionCreateWithoutTagsInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject?: SubjectCreateNestedOneWithoutQuestionsInput
    topic?: TopicCreateNestedOneWithoutQuestionsInput
    subtopic?: SubtopicCreateNestedOneWithoutQuestionsInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutTagsInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    topicId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportUncheckedCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutTagsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutTagsInput, QuestionUncheckedCreateWithoutTagsInput>
  }

  export type TagCreateWithoutQuestionsInput = {
    id?: string
    name: string
  }

  export type TagUncheckedCreateWithoutQuestionsInput = {
    id?: string
    name: string
  }

  export type TagCreateOrConnectWithoutQuestionsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutQuestionsInput, TagUncheckedCreateWithoutQuestionsInput>
  }

  export type QuestionUpsertWithoutTagsInput = {
    update: XOR<QuestionUpdateWithoutTagsInput, QuestionUncheckedUpdateWithoutTagsInput>
    create: XOR<QuestionCreateWithoutTagsInput, QuestionUncheckedCreateWithoutTagsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutTagsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutTagsInput, QuestionUncheckedUpdateWithoutTagsInput>
  }

  export type QuestionUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneWithoutQuestionsNestedInput
    topic?: TopicUpdateOneWithoutQuestionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutQuestionsNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUncheckedUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type TagUpsertWithoutQuestionsInput = {
    update: XOR<TagUpdateWithoutQuestionsInput, TagUncheckedUpdateWithoutQuestionsInput>
    create: XOR<TagCreateWithoutQuestionsInput, TagUncheckedCreateWithoutQuestionsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutQuestionsInput, TagUncheckedUpdateWithoutQuestionsInput>
  }

  export type TagUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateWithoutReportsInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject?: SubjectCreateNestedOneWithoutQuestionsInput
    topic?: TopicCreateNestedOneWithoutQuestionsInput
    subtopic?: SubtopicCreateNestedOneWithoutQuestionsInput
    tags?: QuestionTagCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutReportsInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    topicId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: QuestionTagUncheckedCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutReportsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutReportsInput, QuestionUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutQuestionReportsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    stream?: StreamCreateNestedOneWithoutUsersInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionCreateNestedManyWithoutUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeCreateNestedOneWithoutUserInput
    referralsMade?: ReferralCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralCreateNestedOneWithoutRefereeInput
    reviewedReports?: QuestionReportCreateNestedManyWithoutReviewedByInput
  }

  export type UserUncheckedCreateWithoutQuestionReportsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionUncheckedCreateNestedManyWithoutUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeUncheckedCreateNestedOneWithoutUserInput
    referralsMade?: ReferralUncheckedCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralUncheckedCreateNestedOneWithoutRefereeInput
    reviewedReports?: QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput
  }

  export type UserCreateOrConnectWithoutQuestionReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionReportsInput, UserUncheckedCreateWithoutQuestionReportsInput>
  }

  export type QuestionReportOptionCreateWithoutReportInput = {
    id?: string
    text: string
    isCorrect?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionReportOptionUncheckedCreateWithoutReportInput = {
    id?: string
    text: string
    isCorrect?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionReportOptionCreateOrConnectWithoutReportInput = {
    where: QuestionReportOptionWhereUniqueInput
    create: XOR<QuestionReportOptionCreateWithoutReportInput, QuestionReportOptionUncheckedCreateWithoutReportInput>
  }

  export type QuestionReportOptionCreateManyReportInputEnvelope = {
    data: QuestionReportOptionCreateManyReportInput | QuestionReportOptionCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutReviewedReportsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    stream?: StreamCreateNestedOneWithoutUsersInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionCreateNestedManyWithoutUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeCreateNestedOneWithoutUserInput
    referralsMade?: ReferralCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewedReportsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionUncheckedCreateNestedManyWithoutUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeUncheckedCreateNestedOneWithoutUserInput
    referralsMade?: ReferralUncheckedCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralUncheckedCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewedReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewedReportsInput, UserUncheckedCreateWithoutReviewedReportsInput>
  }

  export type QuestionUpsertWithoutReportsInput = {
    update: XOR<QuestionUpdateWithoutReportsInput, QuestionUncheckedUpdateWithoutReportsInput>
    create: XOR<QuestionCreateWithoutReportsInput, QuestionUncheckedCreateWithoutReportsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutReportsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutReportsInput, QuestionUncheckedUpdateWithoutReportsInput>
  }

  export type QuestionUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneWithoutQuestionsNestedInput
    topic?: TopicUpdateOneWithoutQuestionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutQuestionsNestedInput
    tags?: QuestionTagUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type UserUpsertWithoutQuestionReportsInput = {
    update: XOR<UserUpdateWithoutQuestionReportsInput, UserUncheckedUpdateWithoutQuestionReportsInput>
    create: XOR<UserCreateWithoutQuestionReportsInput, UserUncheckedCreateWithoutQuestionReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionReportsInput, UserUncheckedUpdateWithoutQuestionReportsInput>
  }

  export type UserUpdateWithoutQuestionReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stream?: StreamUpdateOneWithoutUsersNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUpdateManyWithoutUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUpdateOneWithoutRefereeNestedInput
    reviewedReports?: QuestionReportUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUncheckedUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUncheckedUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUncheckedUpdateOneWithoutRefereeNestedInput
    reviewedReports?: QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput
  }

  export type QuestionReportOptionUpsertWithWhereUniqueWithoutReportInput = {
    where: QuestionReportOptionWhereUniqueInput
    update: XOR<QuestionReportOptionUpdateWithoutReportInput, QuestionReportOptionUncheckedUpdateWithoutReportInput>
    create: XOR<QuestionReportOptionCreateWithoutReportInput, QuestionReportOptionUncheckedCreateWithoutReportInput>
  }

  export type QuestionReportOptionUpdateWithWhereUniqueWithoutReportInput = {
    where: QuestionReportOptionWhereUniqueInput
    data: XOR<QuestionReportOptionUpdateWithoutReportInput, QuestionReportOptionUncheckedUpdateWithoutReportInput>
  }

  export type QuestionReportOptionUpdateManyWithWhereWithoutReportInput = {
    where: QuestionReportOptionScalarWhereInput
    data: XOR<QuestionReportOptionUpdateManyMutationInput, QuestionReportOptionUncheckedUpdateManyWithoutReportInput>
  }

  export type QuestionReportOptionScalarWhereInput = {
    AND?: QuestionReportOptionScalarWhereInput | QuestionReportOptionScalarWhereInput[]
    OR?: QuestionReportOptionScalarWhereInput[]
    NOT?: QuestionReportOptionScalarWhereInput | QuestionReportOptionScalarWhereInput[]
    id?: StringFilter<"QuestionReportOption"> | string
    reportId?: StringFilter<"QuestionReportOption"> | string
    text?: StringFilter<"QuestionReportOption"> | string
    isCorrect?: BoolFilter<"QuestionReportOption"> | boolean
    order?: IntFilter<"QuestionReportOption"> | number
    createdAt?: DateTimeFilter<"QuestionReportOption"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionReportOption"> | Date | string
  }

  export type UserUpsertWithoutReviewedReportsInput = {
    update: XOR<UserUpdateWithoutReviewedReportsInput, UserUncheckedUpdateWithoutReviewedReportsInput>
    create: XOR<UserCreateWithoutReviewedReportsInput, UserUncheckedCreateWithoutReviewedReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewedReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewedReportsInput, UserUncheckedUpdateWithoutReviewedReportsInput>
  }

  export type UserUpdateWithoutReviewedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stream?: StreamUpdateOneWithoutUsersNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUpdateManyWithoutUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUncheckedUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUncheckedUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUncheckedUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionReportCreateWithoutSuggestedOptionsInput = {
    id?: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    question: QuestionCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutQuestionReportsInput
    reviewedBy?: UserCreateNestedOneWithoutReviewedReportsInput
  }

  export type QuestionReportUncheckedCreateWithoutSuggestedOptionsInput = {
    id?: string
    questionId: string
    userId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedById?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionReportCreateOrConnectWithoutSuggestedOptionsInput = {
    where: QuestionReportWhereUniqueInput
    create: XOR<QuestionReportCreateWithoutSuggestedOptionsInput, QuestionReportUncheckedCreateWithoutSuggestedOptionsInput>
  }

  export type QuestionReportUpsertWithoutSuggestedOptionsInput = {
    update: XOR<QuestionReportUpdateWithoutSuggestedOptionsInput, QuestionReportUncheckedUpdateWithoutSuggestedOptionsInput>
    create: XOR<QuestionReportCreateWithoutSuggestedOptionsInput, QuestionReportUncheckedCreateWithoutSuggestedOptionsInput>
    where?: QuestionReportWhereInput
  }

  export type QuestionReportUpdateToOneWithWhereWithoutSuggestedOptionsInput = {
    where?: QuestionReportWhereInput
    data: XOR<QuestionReportUpdateWithoutSuggestedOptionsInput, QuestionReportUncheckedUpdateWithoutSuggestedOptionsInput>
  }

  export type QuestionReportUpdateWithoutSuggestedOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionReportsNestedInput
    reviewedBy?: UserUpdateOneWithoutReviewedReportsNestedInput
  }

  export type QuestionReportUncheckedUpdateWithoutSuggestedOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateWithoutAlternativeExplanationsInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject?: SubjectCreateNestedOneWithoutQuestionsInput
    topic?: TopicCreateNestedOneWithoutQuestionsInput
    subtopic?: SubtopicCreateNestedOneWithoutQuestionsInput
    tags?: QuestionTagCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutAlternativeExplanationsInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    topicId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: QuestionTagUncheckedCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutAlternativeExplanationsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutAlternativeExplanationsInput, QuestionUncheckedCreateWithoutAlternativeExplanationsInput>
  }

  export type QuestionUpsertWithoutAlternativeExplanationsInput = {
    update: XOR<QuestionUpdateWithoutAlternativeExplanationsInput, QuestionUncheckedUpdateWithoutAlternativeExplanationsInput>
    create: XOR<QuestionCreateWithoutAlternativeExplanationsInput, QuestionUncheckedCreateWithoutAlternativeExplanationsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutAlternativeExplanationsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutAlternativeExplanationsInput, QuestionUncheckedUpdateWithoutAlternativeExplanationsInput>
  }

  export type QuestionUpdateWithoutAlternativeExplanationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneWithoutQuestionsNestedInput
    topic?: TopicUpdateOneWithoutQuestionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutQuestionsNestedInput
    tags?: QuestionTagUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutAlternativeExplanationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type ExamSubmissionCreateWithoutExamPaperInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
    user: UserCreateNestedOneWithoutExamSubmissionsInput
    answers?: ExamAnswerCreateNestedManyWithoutSubmissionInput
  }

  export type ExamSubmissionUncheckedCreateWithoutExamPaperInput = {
    id?: string
    userId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
    answers?: ExamAnswerUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type ExamSubmissionCreateOrConnectWithoutExamPaperInput = {
    where: ExamSubmissionWhereUniqueInput
    create: XOR<ExamSubmissionCreateWithoutExamPaperInput, ExamSubmissionUncheckedCreateWithoutExamPaperInput>
  }

  export type ExamSubmissionCreateManyExamPaperInputEnvelope = {
    data: ExamSubmissionCreateManyExamPaperInput | ExamSubmissionCreateManyExamPaperInput[]
    skipDuplicates?: boolean
  }

  export type ExamSubmissionUpsertWithWhereUniqueWithoutExamPaperInput = {
    where: ExamSubmissionWhereUniqueInput
    update: XOR<ExamSubmissionUpdateWithoutExamPaperInput, ExamSubmissionUncheckedUpdateWithoutExamPaperInput>
    create: XOR<ExamSubmissionCreateWithoutExamPaperInput, ExamSubmissionUncheckedCreateWithoutExamPaperInput>
  }

  export type ExamSubmissionUpdateWithWhereUniqueWithoutExamPaperInput = {
    where: ExamSubmissionWhereUniqueInput
    data: XOR<ExamSubmissionUpdateWithoutExamPaperInput, ExamSubmissionUncheckedUpdateWithoutExamPaperInput>
  }

  export type ExamSubmissionUpdateManyWithWhereWithoutExamPaperInput = {
    where: ExamSubmissionScalarWhereInput
    data: XOR<ExamSubmissionUpdateManyMutationInput, ExamSubmissionUncheckedUpdateManyWithoutExamPaperInput>
  }

  export type UserCreateWithoutExamSubmissionsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    stream?: StreamCreateNestedOneWithoutUsersInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeCreateNestedOneWithoutUserInput
    referralsMade?: ReferralCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportCreateNestedManyWithoutReviewedByInput
  }

  export type UserUncheckedCreateWithoutExamSubmissionsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeUncheckedCreateNestedOneWithoutUserInput
    referralsMade?: ReferralUncheckedCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralUncheckedCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportUncheckedCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput
  }

  export type UserCreateOrConnectWithoutExamSubmissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExamSubmissionsInput, UserUncheckedCreateWithoutExamSubmissionsInput>
  }

  export type ExamPaperCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    description?: string | null
    subjectIds?: ExamPaperCreatesubjectIdsInput | string[]
    topicIds?: ExamPaperCreatetopicIdsInput | string[]
    subtopicIds?: ExamPaperCreatesubtopicIdsInput | string[]
    questionIds?: ExamPaperCreatequestionIdsInput | string[]
    timeLimitMin?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamPaperUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    description?: string | null
    subjectIds?: ExamPaperCreatesubjectIdsInput | string[]
    topicIds?: ExamPaperCreatetopicIdsInput | string[]
    subtopicIds?: ExamPaperCreatesubtopicIdsInput | string[]
    questionIds?: ExamPaperCreatequestionIdsInput | string[]
    timeLimitMin?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamPaperCreateOrConnectWithoutSubmissionsInput = {
    where: ExamPaperWhereUniqueInput
    create: XOR<ExamPaperCreateWithoutSubmissionsInput, ExamPaperUncheckedCreateWithoutSubmissionsInput>
  }

  export type ExamAnswerCreateWithoutSubmissionInput = {
    id?: string
    isCorrect?: boolean
    question: QuestionCreateNestedOneWithoutAnswersInput
    selectedOption?: QuestionOptionCreateNestedOneWithoutSelectedByAnswersInput
  }

  export type ExamAnswerUncheckedCreateWithoutSubmissionInput = {
    id?: string
    questionId: string
    selectedOptionId?: string | null
    isCorrect?: boolean
  }

  export type ExamAnswerCreateOrConnectWithoutSubmissionInput = {
    where: ExamAnswerWhereUniqueInput
    create: XOR<ExamAnswerCreateWithoutSubmissionInput, ExamAnswerUncheckedCreateWithoutSubmissionInput>
  }

  export type ExamAnswerCreateManySubmissionInputEnvelope = {
    data: ExamAnswerCreateManySubmissionInput | ExamAnswerCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutExamSubmissionsInput = {
    update: XOR<UserUpdateWithoutExamSubmissionsInput, UserUncheckedUpdateWithoutExamSubmissionsInput>
    create: XOR<UserCreateWithoutExamSubmissionsInput, UserUncheckedCreateWithoutExamSubmissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExamSubmissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExamSubmissionsInput, UserUncheckedUpdateWithoutExamSubmissionsInput>
  }

  export type UserUpdateWithoutExamSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stream?: StreamUpdateOneWithoutUsersNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateWithoutExamSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUncheckedUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUncheckedUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUncheckedUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUncheckedUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput
  }

  export type ExamPaperUpsertWithoutSubmissionsInput = {
    update: XOR<ExamPaperUpdateWithoutSubmissionsInput, ExamPaperUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<ExamPaperCreateWithoutSubmissionsInput, ExamPaperUncheckedCreateWithoutSubmissionsInput>
    where?: ExamPaperWhereInput
  }

  export type ExamPaperUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: ExamPaperWhereInput
    data: XOR<ExamPaperUpdateWithoutSubmissionsInput, ExamPaperUncheckedUpdateWithoutSubmissionsInput>
  }

  export type ExamPaperUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectIds?: ExamPaperUpdatesubjectIdsInput | string[]
    topicIds?: ExamPaperUpdatetopicIdsInput | string[]
    subtopicIds?: ExamPaperUpdatesubtopicIdsInput | string[]
    questionIds?: ExamPaperUpdatequestionIdsInput | string[]
    timeLimitMin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamPaperUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subjectIds?: ExamPaperUpdatesubjectIdsInput | string[]
    topicIds?: ExamPaperUpdatetopicIdsInput | string[]
    subtopicIds?: ExamPaperUpdatesubtopicIdsInput | string[]
    questionIds?: ExamPaperUpdatequestionIdsInput | string[]
    timeLimitMin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamAnswerUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: ExamAnswerWhereUniqueInput
    update: XOR<ExamAnswerUpdateWithoutSubmissionInput, ExamAnswerUncheckedUpdateWithoutSubmissionInput>
    create: XOR<ExamAnswerCreateWithoutSubmissionInput, ExamAnswerUncheckedCreateWithoutSubmissionInput>
  }

  export type ExamAnswerUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: ExamAnswerWhereUniqueInput
    data: XOR<ExamAnswerUpdateWithoutSubmissionInput, ExamAnswerUncheckedUpdateWithoutSubmissionInput>
  }

  export type ExamAnswerUpdateManyWithWhereWithoutSubmissionInput = {
    where: ExamAnswerScalarWhereInput
    data: XOR<ExamAnswerUpdateManyMutationInput, ExamAnswerUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type ExamSubmissionCreateWithoutAnswersInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
    user: UserCreateNestedOneWithoutExamSubmissionsInput
    examPaper: ExamPaperCreateNestedOneWithoutSubmissionsInput
  }

  export type ExamSubmissionUncheckedCreateWithoutAnswersInput = {
    id?: string
    userId: string
    examPaperId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
  }

  export type ExamSubmissionCreateOrConnectWithoutAnswersInput = {
    where: ExamSubmissionWhereUniqueInput
    create: XOR<ExamSubmissionCreateWithoutAnswersInput, ExamSubmissionUncheckedCreateWithoutAnswersInput>
  }

  export type QuestionCreateWithoutAnswersInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subject?: SubjectCreateNestedOneWithoutQuestionsInput
    topic?: TopicCreateNestedOneWithoutQuestionsInput
    subtopic?: SubtopicCreateNestedOneWithoutQuestionsInput
    tags?: QuestionTagCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutAnswersInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    topicId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: QuestionTagUncheckedCreateNestedManyWithoutQuestionInput
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    reports?: QuestionReportUncheckedCreateNestedManyWithoutQuestionInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutAnswersInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
  }

  export type QuestionOptionCreateWithoutSelectedByAnswersInput = {
    id?: string
    text: string
    isCorrect?: boolean
    order?: number
    question: QuestionCreateNestedOneWithoutOptionsInput
  }

  export type QuestionOptionUncheckedCreateWithoutSelectedByAnswersInput = {
    id?: string
    questionId: string
    text: string
    isCorrect?: boolean
    order?: number
  }

  export type QuestionOptionCreateOrConnectWithoutSelectedByAnswersInput = {
    where: QuestionOptionWhereUniqueInput
    create: XOR<QuestionOptionCreateWithoutSelectedByAnswersInput, QuestionOptionUncheckedCreateWithoutSelectedByAnswersInput>
  }

  export type ExamSubmissionUpsertWithoutAnswersInput = {
    update: XOR<ExamSubmissionUpdateWithoutAnswersInput, ExamSubmissionUncheckedUpdateWithoutAnswersInput>
    create: XOR<ExamSubmissionCreateWithoutAnswersInput, ExamSubmissionUncheckedCreateWithoutAnswersInput>
    where?: ExamSubmissionWhereInput
  }

  export type ExamSubmissionUpdateToOneWithWhereWithoutAnswersInput = {
    where?: ExamSubmissionWhereInput
    data: XOR<ExamSubmissionUpdateWithoutAnswersInput, ExamSubmissionUncheckedUpdateWithoutAnswersInput>
  }

  export type ExamSubmissionUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutExamSubmissionsNestedInput
    examPaper?: ExamPaperUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type ExamSubmissionUncheckedUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    examPaperId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type QuestionUpsertWithoutAnswersInput = {
    update: XOR<QuestionUpdateWithoutAnswersInput, QuestionUncheckedUpdateWithoutAnswersInput>
    create: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutAnswersInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutAnswersInput, QuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type QuestionUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneWithoutQuestionsNestedInput
    topic?: TopicUpdateOneWithoutQuestionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutQuestionsNestedInput
    tags?: QuestionTagUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUncheckedUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionOptionUpsertWithoutSelectedByAnswersInput = {
    update: XOR<QuestionOptionUpdateWithoutSelectedByAnswersInput, QuestionOptionUncheckedUpdateWithoutSelectedByAnswersInput>
    create: XOR<QuestionOptionCreateWithoutSelectedByAnswersInput, QuestionOptionUncheckedCreateWithoutSelectedByAnswersInput>
    where?: QuestionOptionWhereInput
  }

  export type QuestionOptionUpdateToOneWithWhereWithoutSelectedByAnswersInput = {
    where?: QuestionOptionWhereInput
    data: XOR<QuestionOptionUpdateWithoutSelectedByAnswersInput, QuestionOptionUncheckedUpdateWithoutSelectedByAnswersInput>
  }

  export type QuestionOptionUpdateWithoutSelectedByAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    question?: QuestionUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type QuestionOptionUncheckedUpdateWithoutSelectedByAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
  }

  export type SubscriptionCreateWithoutPlanInput = {
    id?: string
    status?: $Enums.SubscriptionStatus
    startedAt?: Date | string
    endsAt?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubId?: string | null
    stripeStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutPlanInput = {
    id?: string
    userId: string
    status?: $Enums.SubscriptionStatus
    startedAt?: Date | string
    endsAt?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubId?: string | null
    stripeStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutPlanInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type SubscriptionCreateManyPlanInputEnvelope = {
    data: SubscriptionCreateManyPlanInput | SubscriptionCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutPlanInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutPlanInput, SubscriptionUncheckedUpdateWithoutPlanInput>
    create: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutPlanInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutPlanInput, SubscriptionUncheckedUpdateWithoutPlanInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutPlanInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutPlanInput>
  }

  export type UserCreateWithoutSubscriptionsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    stream?: StreamCreateNestedOneWithoutUsersInput
    examSubmissions?: ExamSubmissionCreateNestedManyWithoutUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeCreateNestedOneWithoutUserInput
    referralsMade?: ReferralCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportCreateNestedManyWithoutReviewedByInput
  }

  export type UserUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    examSubmissions?: ExamSubmissionUncheckedCreateNestedManyWithoutUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeUncheckedCreateNestedOneWithoutUserInput
    referralsMade?: ReferralUncheckedCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralUncheckedCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportUncheckedCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput
  }

  export type UserCreateOrConnectWithoutSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
  }

  export type PlanCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    description?: string | null
    priceCents: number
    currency?: string
    interval?: $Enums.PlanInterval
    planType?: $Enums.PlanType
    stripePriceId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlanUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    description?: string | null
    priceCents: number
    currency?: string
    interval?: $Enums.PlanInterval
    planType?: $Enums.PlanType
    stripePriceId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlanCreateOrConnectWithoutSubscriptionsInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutSubscriptionsInput, PlanUncheckedCreateWithoutSubscriptionsInput>
  }

  export type UserUpsertWithoutSubscriptionsInput = {
    update: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stream?: StreamUpdateOneWithoutUsersNestedInput
    examSubmissions?: ExamSubmissionUpdateManyWithoutUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examSubmissions?: ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUncheckedUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUncheckedUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUncheckedUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUncheckedUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput
  }

  export type PlanUpsertWithoutSubscriptionsInput = {
    update: XOR<PlanUpdateWithoutSubscriptionsInput, PlanUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<PlanCreateWithoutSubscriptionsInput, PlanUncheckedCreateWithoutSubscriptionsInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutSubscriptionsInput, PlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type PlanUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: EnumPlanIntervalFieldUpdateOperationsInput | $Enums.PlanInterval
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priceCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    interval?: EnumPlanIntervalFieldUpdateOperationsInput | $Enums.PlanInterval
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripePriceId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutOtpsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    stream?: StreamCreateNestedOneWithoutUsersInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeCreateNestedOneWithoutUserInput
    referralsMade?: ReferralCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportCreateNestedManyWithoutReviewedByInput
  }

  export type UserUncheckedCreateWithoutOtpsInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionUncheckedCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeUncheckedCreateNestedOneWithoutUserInput
    referralsMade?: ReferralUncheckedCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralUncheckedCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportUncheckedCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput
  }

  export type UserCreateOrConnectWithoutOtpsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
  }

  export type UserUpsertWithoutOtpsInput = {
    update: XOR<UserUpdateWithoutOtpsInput, UserUncheckedUpdateWithoutOtpsInput>
    create: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOtpsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOtpsInput, UserUncheckedUpdateWithoutOtpsInput>
  }

  export type UserUpdateWithoutOtpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stream?: StreamUpdateOneWithoutUsersNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateWithoutOtpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUncheckedUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUncheckedUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUncheckedUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUncheckedUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput
  }

  export type UserCreateWithoutReferralCodeInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    stream?: StreamCreateNestedOneWithoutUsersInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionCreateNestedManyWithoutUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
    referralsMade?: ReferralCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportCreateNestedManyWithoutReviewedByInput
  }

  export type UserUncheckedCreateWithoutReferralCodeInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionUncheckedCreateNestedManyWithoutUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
    referralsMade?: ReferralUncheckedCreateNestedManyWithoutReferrerInput
    referralReceived?: ReferralUncheckedCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportUncheckedCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput
  }

  export type UserCreateOrConnectWithoutReferralCodeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralCodeInput, UserUncheckedCreateWithoutReferralCodeInput>
  }

  export type ReferralCreateWithoutReferralCodeInput = {
    id?: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referrer: UserCreateNestedOneWithoutReferralsMadeInput
    referee: UserCreateNestedOneWithoutReferralReceivedInput
    rewards?: ReferralRewardCreateNestedManyWithoutReferralInput
  }

  export type ReferralUncheckedCreateWithoutReferralCodeInput = {
    id?: string
    referrerId: string
    refereeId: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rewards?: ReferralRewardUncheckedCreateNestedManyWithoutReferralInput
  }

  export type ReferralCreateOrConnectWithoutReferralCodeInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutReferralCodeInput, ReferralUncheckedCreateWithoutReferralCodeInput>
  }

  export type ReferralCreateManyReferralCodeInputEnvelope = {
    data: ReferralCreateManyReferralCodeInput | ReferralCreateManyReferralCodeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutReferralCodeInput = {
    update: XOR<UserUpdateWithoutReferralCodeInput, UserUncheckedUpdateWithoutReferralCodeInput>
    create: XOR<UserCreateWithoutReferralCodeInput, UserUncheckedCreateWithoutReferralCodeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferralCodeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferralCodeInput, UserUncheckedUpdateWithoutReferralCodeInput>
  }

  export type UserUpdateWithoutReferralCodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stream?: StreamUpdateOneWithoutUsersNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUpdateManyWithoutUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
    referralsMade?: ReferralUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralCodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
    referralsMade?: ReferralUncheckedUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUncheckedUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUncheckedUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput
  }

  export type ReferralUpsertWithWhereUniqueWithoutReferralCodeInput = {
    where: ReferralWhereUniqueInput
    update: XOR<ReferralUpdateWithoutReferralCodeInput, ReferralUncheckedUpdateWithoutReferralCodeInput>
    create: XOR<ReferralCreateWithoutReferralCodeInput, ReferralUncheckedCreateWithoutReferralCodeInput>
  }

  export type ReferralUpdateWithWhereUniqueWithoutReferralCodeInput = {
    where: ReferralWhereUniqueInput
    data: XOR<ReferralUpdateWithoutReferralCodeInput, ReferralUncheckedUpdateWithoutReferralCodeInput>
  }

  export type ReferralUpdateManyWithWhereWithoutReferralCodeInput = {
    where: ReferralScalarWhereInput
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyWithoutReferralCodeInput>
  }

  export type UserCreateWithoutReferralsMadeInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    stream?: StreamCreateNestedOneWithoutUsersInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionCreateNestedManyWithoutUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeCreateNestedOneWithoutUserInput
    referralReceived?: ReferralCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportCreateNestedManyWithoutReviewedByInput
  }

  export type UserUncheckedCreateWithoutReferralsMadeInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionUncheckedCreateNestedManyWithoutUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeUncheckedCreateNestedOneWithoutUserInput
    referralReceived?: ReferralUncheckedCreateNestedOneWithoutRefereeInput
    questionReports?: QuestionReportUncheckedCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput
  }

  export type UserCreateOrConnectWithoutReferralsMadeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralsMadeInput, UserUncheckedCreateWithoutReferralsMadeInput>
  }

  export type UserCreateWithoutReferralReceivedInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    stream?: StreamCreateNestedOneWithoutUsersInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionCreateNestedManyWithoutUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeCreateNestedOneWithoutUserInput
    referralsMade?: ReferralCreateNestedManyWithoutReferrerInput
    questionReports?: QuestionReportCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportCreateNestedManyWithoutReviewedByInput
  }

  export type UserUncheckedCreateWithoutReferralReceivedInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    streamId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    examSubmissions?: ExamSubmissionUncheckedCreateNestedManyWithoutUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
    referralCode?: ReferralCodeUncheckedCreateNestedOneWithoutUserInput
    referralsMade?: ReferralUncheckedCreateNestedManyWithoutReferrerInput
    questionReports?: QuestionReportUncheckedCreateNestedManyWithoutUserInput
    reviewedReports?: QuestionReportUncheckedCreateNestedManyWithoutReviewedByInput
  }

  export type UserCreateOrConnectWithoutReferralReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralReceivedInput, UserUncheckedCreateWithoutReferralReceivedInput>
  }

  export type ReferralCodeCreateWithoutReferralsInput = {
    id?: string
    code: string
    isActive?: boolean
    usageCount?: number
    maxUsage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReferralCodeInput
  }

  export type ReferralCodeUncheckedCreateWithoutReferralsInput = {
    id?: string
    userId: string
    code: string
    isActive?: boolean
    usageCount?: number
    maxUsage?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralCodeCreateOrConnectWithoutReferralsInput = {
    where: ReferralCodeWhereUniqueInput
    create: XOR<ReferralCodeCreateWithoutReferralsInput, ReferralCodeUncheckedCreateWithoutReferralsInput>
  }

  export type ReferralRewardCreateWithoutReferralInput = {
    id?: string
    type: $Enums.RewardType
    amount: number
    currency?: string | null
    description: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralRewardUncheckedCreateWithoutReferralInput = {
    id?: string
    type: $Enums.RewardType
    amount: number
    currency?: string | null
    description: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralRewardCreateOrConnectWithoutReferralInput = {
    where: ReferralRewardWhereUniqueInput
    create: XOR<ReferralRewardCreateWithoutReferralInput, ReferralRewardUncheckedCreateWithoutReferralInput>
  }

  export type ReferralRewardCreateManyReferralInputEnvelope = {
    data: ReferralRewardCreateManyReferralInput | ReferralRewardCreateManyReferralInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutReferralsMadeInput = {
    update: XOR<UserUpdateWithoutReferralsMadeInput, UserUncheckedUpdateWithoutReferralsMadeInput>
    create: XOR<UserCreateWithoutReferralsMadeInput, UserUncheckedCreateWithoutReferralsMadeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferralsMadeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferralsMadeInput, UserUncheckedUpdateWithoutReferralsMadeInput>
  }

  export type UserUpdateWithoutReferralsMadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stream?: StreamUpdateOneWithoutUsersNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUpdateManyWithoutUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUpdateOneWithoutUserNestedInput
    referralReceived?: ReferralUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralsMadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUncheckedUpdateOneWithoutUserNestedInput
    referralReceived?: ReferralUncheckedUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUncheckedUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUpsertWithoutReferralReceivedInput = {
    update: XOR<UserUpdateWithoutReferralReceivedInput, UserUncheckedUpdateWithoutReferralReceivedInput>
    create: XOR<UserCreateWithoutReferralReceivedInput, UserUncheckedCreateWithoutReferralReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferralReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferralReceivedInput, UserUncheckedUpdateWithoutReferralReceivedInput>
  }

  export type UserUpdateWithoutReferralReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stream?: StreamUpdateOneWithoutUsersNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUpdateManyWithoutUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUpdateManyWithoutReferrerNestedInput
    questionReports?: QuestionReportUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUncheckedUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUncheckedUpdateManyWithoutReferrerNestedInput
    questionReports?: QuestionReportUncheckedUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput
  }

  export type ReferralCodeUpsertWithoutReferralsInput = {
    update: XOR<ReferralCodeUpdateWithoutReferralsInput, ReferralCodeUncheckedUpdateWithoutReferralsInput>
    create: XOR<ReferralCodeCreateWithoutReferralsInput, ReferralCodeUncheckedCreateWithoutReferralsInput>
    where?: ReferralCodeWhereInput
  }

  export type ReferralCodeUpdateToOneWithWhereWithoutReferralsInput = {
    where?: ReferralCodeWhereInput
    data: XOR<ReferralCodeUpdateWithoutReferralsInput, ReferralCodeUncheckedUpdateWithoutReferralsInput>
  }

  export type ReferralCodeUpdateWithoutReferralsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    maxUsage?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReferralCodeNestedInput
  }

  export type ReferralCodeUncheckedUpdateWithoutReferralsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    maxUsage?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralRewardUpsertWithWhereUniqueWithoutReferralInput = {
    where: ReferralRewardWhereUniqueInput
    update: XOR<ReferralRewardUpdateWithoutReferralInput, ReferralRewardUncheckedUpdateWithoutReferralInput>
    create: XOR<ReferralRewardCreateWithoutReferralInput, ReferralRewardUncheckedCreateWithoutReferralInput>
  }

  export type ReferralRewardUpdateWithWhereUniqueWithoutReferralInput = {
    where: ReferralRewardWhereUniqueInput
    data: XOR<ReferralRewardUpdateWithoutReferralInput, ReferralRewardUncheckedUpdateWithoutReferralInput>
  }

  export type ReferralRewardUpdateManyWithWhereWithoutReferralInput = {
    where: ReferralRewardScalarWhereInput
    data: XOR<ReferralRewardUpdateManyMutationInput, ReferralRewardUncheckedUpdateManyWithoutReferralInput>
  }

  export type ReferralRewardScalarWhereInput = {
    AND?: ReferralRewardScalarWhereInput | ReferralRewardScalarWhereInput[]
    OR?: ReferralRewardScalarWhereInput[]
    NOT?: ReferralRewardScalarWhereInput | ReferralRewardScalarWhereInput[]
    id?: StringFilter<"ReferralReward"> | string
    referralId?: StringFilter<"ReferralReward"> | string
    type?: EnumRewardTypeFilter<"ReferralReward"> | $Enums.RewardType
    amount?: IntFilter<"ReferralReward"> | number
    currency?: StringNullableFilter<"ReferralReward"> | string | null
    description?: StringFilter<"ReferralReward"> | string
    isClaimed?: BoolFilter<"ReferralReward"> | boolean
    claimedAt?: DateTimeNullableFilter<"ReferralReward"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"ReferralReward"> | Date | string | null
    createdAt?: DateTimeFilter<"ReferralReward"> | Date | string
    updatedAt?: DateTimeFilter<"ReferralReward"> | Date | string
  }

  export type ReferralCreateWithoutRewardsInput = {
    id?: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    referrer: UserCreateNestedOneWithoutReferralsMadeInput
    referee: UserCreateNestedOneWithoutReferralReceivedInput
    referralCode: ReferralCodeCreateNestedOneWithoutReferralsInput
  }

  export type ReferralUncheckedCreateWithoutRewardsInput = {
    id?: string
    referrerId: string
    refereeId: string
    referralCodeId: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralCreateOrConnectWithoutRewardsInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutRewardsInput, ReferralUncheckedCreateWithoutRewardsInput>
  }

  export type ReferralUpsertWithoutRewardsInput = {
    update: XOR<ReferralUpdateWithoutRewardsInput, ReferralUncheckedUpdateWithoutRewardsInput>
    create: XOR<ReferralCreateWithoutRewardsInput, ReferralUncheckedCreateWithoutRewardsInput>
    where?: ReferralWhereInput
  }

  export type ReferralUpdateToOneWithWhereWithoutRewardsInput = {
    where?: ReferralWhereInput
    data: XOR<ReferralUpdateWithoutRewardsInput, ReferralUncheckedUpdateWithoutRewardsInput>
  }

  export type ReferralUpdateWithoutRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referrer?: UserUpdateOneRequiredWithoutReferralsMadeNestedInput
    referee?: UserUpdateOneRequiredWithoutReferralReceivedNestedInput
    referralCode?: ReferralCodeUpdateOneRequiredWithoutReferralsNestedInput
  }

  export type ReferralUncheckedUpdateWithoutRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralCodeId?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManyUserInput = {
    id?: string
    planId: string
    status?: $Enums.SubscriptionStatus
    startedAt?: Date | string
    endsAt?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubId?: string | null
    stripeStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExamSubmissionCreateManyUserInput = {
    id?: string
    examPaperId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
  }

  export type OtpCreateManyUserInput = {
    id?: string
    code: string
    type: $Enums.OtpType
    target: string
    expiresAt: Date | string
    consumed?: boolean
    createdAt?: Date | string
  }

  export type ReferralCreateManyReferrerInput = {
    id?: string
    refereeId: string
    referralCodeId: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionReportCreateManyUserInput = {
    id?: string
    questionId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedById?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionReportCreateManyReviewedByInput = {
    id?: string
    questionId: string
    userId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PlanUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamSubmissionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    examPaper?: ExamPaperUpdateOneRequiredWithoutSubmissionsNestedInput
    answers?: ExamAnswerUpdateManyWithoutSubmissionNestedInput
  }

  export type ExamSubmissionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    examPaperId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: ExamAnswerUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type ExamSubmissionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    examPaperId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type OtpUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumOtpTypeFieldUpdateOperationsInput | $Enums.OtpType
    target?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumOtpTypeFieldUpdateOperationsInput | $Enums.OtpType
    target?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: EnumOtpTypeFieldUpdateOperationsInput | $Enums.OtpType
    target?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consumed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralUpdateWithoutReferrerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referee?: UserUpdateOneRequiredWithoutReferralReceivedNestedInput
    referralCode?: ReferralCodeUpdateOneRequiredWithoutReferralsNestedInput
    rewards?: ReferralRewardUpdateManyWithoutReferralNestedInput
  }

  export type ReferralUncheckedUpdateWithoutReferrerInput = {
    id?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralCodeId?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rewards?: ReferralRewardUncheckedUpdateManyWithoutReferralNestedInput
  }

  export type ReferralUncheckedUpdateManyWithoutReferrerInput = {
    id?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralCodeId?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionReportUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutReportsNestedInput
    suggestedOptions?: QuestionReportOptionUpdateManyWithoutReportNestedInput
    reviewedBy?: UserUpdateOneWithoutReviewedReportsNestedInput
  }

  export type QuestionReportUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestedOptions?: QuestionReportOptionUncheckedUpdateManyWithoutReportNestedInput
  }

  export type QuestionReportUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionReportUpdateWithoutReviewedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionReportsNestedInput
    suggestedOptions?: QuestionReportOptionUpdateManyWithoutReportNestedInput
  }

  export type QuestionReportUncheckedUpdateWithoutReviewedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestedOptions?: QuestionReportOptionUncheckedUpdateManyWithoutReportNestedInput
  }

  export type QuestionReportUncheckedUpdateManyWithoutReviewedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectCreateManyStreamInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyStreamInput = {
    id?: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    phoneVerified?: boolean
    hashedPassword: string
    fullName: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    trialStartedAt?: Date | string | null
    trialEndsAt?: Date | string | null
  }

  export type SubjectUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUpdateManyWithoutSubjectNestedInput
    questions?: QuestionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topics?: TopicUncheckedUpdateManyWithoutSubjectNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUpdateManyWithoutUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    examSubmissions?: ExamSubmissionUncheckedUpdateManyWithoutUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
    referralCode?: ReferralCodeUncheckedUpdateOneWithoutUserNestedInput
    referralsMade?: ReferralUncheckedUpdateManyWithoutReferrerNestedInput
    referralReceived?: ReferralUncheckedUpdateOneWithoutRefereeNestedInput
    questionReports?: QuestionReportUncheckedUpdateManyWithoutUserNestedInput
    reviewedReports?: QuestionReportUncheckedUpdateManyWithoutReviewedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    hashedPassword?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trialStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TopicCreateManySubjectInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionCreateManySubjectInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    topicId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TopicUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopics?: SubtopicUpdateManyWithoutTopicNestedInput
    questions?: QuestionUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopics?: SubtopicUncheckedUpdateManyWithoutTopicNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateManyWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneWithoutQuestionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutQuestionsNestedInput
    tags?: QuestionTagUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUncheckedUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubtopicCreateManyTopicInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionCreateManyTopicInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    subtopicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubtopicUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneWithoutQuestionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutQuestionsNestedInput
    tags?: QuestionTagUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUncheckedUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateManySubtopicInput = {
    id?: string
    stem: string
    explanation?: string | null
    difficulty?: $Enums.Difficulty
    yearAppeared?: number | null
    isPreviousYear?: boolean
    isAIGenerated?: boolean
    aiPrompt?: string | null
    subjectId?: string | null
    topicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneWithoutQuestionsNestedInput
    topic?: TopicUpdateOneWithoutQuestionsNestedInput
    tags?: QuestionTagUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    answers?: ExamAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    reports?: QuestionReportUncheckedUpdateManyWithoutQuestionNestedInput
    alternativeExplanations?: QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    stem?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    yearAppeared?: NullableIntFieldUpdateOperationsInput | number | null
    isPreviousYear?: BoolFieldUpdateOperationsInput | boolean
    isAIGenerated?: BoolFieldUpdateOperationsInput | boolean
    aiPrompt?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: NullableStringFieldUpdateOperationsInput | string | null
    topicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionTagCreateManyQuestionInput = {
    tagId: string
  }

  export type QuestionOptionCreateManyQuestionInput = {
    id?: string
    text: string
    isCorrect?: boolean
    order?: number
  }

  export type ExamAnswerCreateManyQuestionInput = {
    id?: string
    submissionId: string
    selectedOptionId?: string | null
    isCorrect?: boolean
  }

  export type QuestionReportCreateManyQuestionInput = {
    id?: string
    userId: string
    reportType: $Enums.QuestionReportType
    reason: string
    description?: string | null
    status?: $Enums.ReportStatus
    alternativeExplanation?: string | null
    suggestedAnswer?: string | null
    reviewedById?: string | null
    reviewedAt?: Date | string | null
    reviewNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionAlternativeExplanationCreateManyQuestionInput = {
    id?: string
    explanation: string
    source: string
    reportId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionTagUpdateWithoutQuestionInput = {
    tag?: TagUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionTagUncheckedUpdateWithoutQuestionInput = {
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionTagUncheckedUpdateManyWithoutQuestionInput = {
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionOptionUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    selectedByAnswers?: ExamAnswerUpdateManyWithoutSelectedOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    selectedByAnswers?: ExamAnswerUncheckedUpdateManyWithoutSelectedOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ExamAnswerUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submission?: ExamSubmissionUpdateOneRequiredWithoutAnswersNestedInput
    selectedOption?: QuestionOptionUpdateOneWithoutSelectedByAnswersNestedInput
  }

  export type ExamAnswerUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    selectedOptionId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExamAnswerUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    selectedOptionId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionReportUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionReportsNestedInput
    suggestedOptions?: QuestionReportOptionUpdateManyWithoutReportNestedInput
    reviewedBy?: UserUpdateOneWithoutReviewedReportsNestedInput
  }

  export type QuestionReportUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggestedOptions?: QuestionReportOptionUncheckedUpdateManyWithoutReportNestedInput
  }

  export type QuestionReportUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reportType?: EnumQuestionReportTypeFieldUpdateOperationsInput | $Enums.QuestionReportType
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
    alternativeExplanation?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAlternativeExplanationUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAlternativeExplanationUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionAlternativeExplanationUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    explanation?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamAnswerCreateManySelectedOptionInput = {
    id?: string
    submissionId: string
    questionId: string
    isCorrect?: boolean
  }

  export type ExamAnswerUpdateWithoutSelectedOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submission?: ExamSubmissionUpdateOneRequiredWithoutAnswersNestedInput
    question?: QuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type ExamAnswerUncheckedUpdateWithoutSelectedOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExamAnswerUncheckedUpdateManyWithoutSelectedOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionTagCreateManyTagInput = {
    questionId: string
  }

  export type QuestionTagUpdateWithoutTagInput = {
    question?: QuestionUpdateOneRequiredWithoutTagsNestedInput
  }

  export type QuestionTagUncheckedUpdateWithoutTagInput = {
    questionId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionTagUncheckedUpdateManyWithoutTagInput = {
    questionId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionReportOptionCreateManyReportInput = {
    id?: string
    text: string
    isCorrect?: boolean
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionReportOptionUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionReportOptionUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionReportOptionUncheckedUpdateManyWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamSubmissionCreateManyExamPaperInput = {
    id?: string
    userId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    totalQuestions: number
    correctCount?: number
    scorePercent?: number | null
  }

  export type ExamSubmissionUpdateWithoutExamPaperInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutExamSubmissionsNestedInput
    answers?: ExamAnswerUpdateManyWithoutSubmissionNestedInput
  }

  export type ExamSubmissionUncheckedUpdateWithoutExamPaperInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: ExamAnswerUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type ExamSubmissionUncheckedUpdateManyWithoutExamPaperInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalQuestions?: IntFieldUpdateOperationsInput | number
    correctCount?: IntFieldUpdateOperationsInput | number
    scorePercent?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ExamAnswerCreateManySubmissionInput = {
    id?: string
    questionId: string
    selectedOptionId?: string | null
    isCorrect?: boolean
  }

  export type ExamAnswerUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    question?: QuestionUpdateOneRequiredWithoutAnswersNestedInput
    selectedOption?: QuestionOptionUpdateOneWithoutSelectedByAnswersNestedInput
  }

  export type ExamAnswerUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    selectedOptionId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExamAnswerUncheckedUpdateManyWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    selectedOptionId?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubscriptionCreateManyPlanInput = {
    id?: string
    userId: string
    status?: $Enums.SubscriptionStatus
    startedAt?: Date | string
    endsAt?: Date | string | null
    stripeCustomerId?: string | null
    stripeSubId?: string | null
    stripeStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralCreateManyReferralCodeInput = {
    id?: string
    referrerId: string
    refereeId: string
    status?: $Enums.ReferralStatus
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralUpdateWithoutReferralCodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referrer?: UserUpdateOneRequiredWithoutReferralsMadeNestedInput
    referee?: UserUpdateOneRequiredWithoutReferralReceivedNestedInput
    rewards?: ReferralRewardUpdateManyWithoutReferralNestedInput
  }

  export type ReferralUncheckedUpdateWithoutReferralCodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rewards?: ReferralRewardUncheckedUpdateManyWithoutReferralNestedInput
  }

  export type ReferralUncheckedUpdateManyWithoutReferralCodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralRewardCreateManyReferralInput = {
    id?: string
    type: $Enums.RewardType
    amount: number
    currency?: string | null
    description: string
    isClaimed?: boolean
    claimedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReferralRewardUpdateWithoutReferralInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralRewardUncheckedUpdateWithoutReferralInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralRewardUncheckedUpdateManyWithoutReferralInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: IntFieldUpdateOperationsInput | number
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isClaimed?: BoolFieldUpdateOperationsInput | boolean
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}