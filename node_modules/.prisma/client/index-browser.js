
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  hashedPassword: 'hashedPassword',
  fullName: 'fullName',
  role: 'role',
  streamId: 'streamId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  trialStartedAt: 'trialStartedAt',
  trialEndsAt: 'trialEndsAt',
  aiTestsUsed: 'aiTestsUsed',
  aiTestsLimit: 'aiTestsLimit',
  lastAiResetAt: 'lastAiResetAt'
};

exports.Prisma.StreamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  code: 'code',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  streamId: 'streamId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  subjectId: 'subjectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubtopicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  topicId: 'topicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  stem: 'stem',
  explanation: 'explanation',
  difficulty: 'difficulty',
  yearAppeared: 'yearAppeared',
  isPreviousYear: 'isPreviousYear',
  isAIGenerated: 'isAIGenerated',
  aiPrompt: 'aiPrompt',
  subjectId: 'subjectId',
  topicId: 'topicId',
  subtopicId: 'subtopicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionOptionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  text: 'text',
  isCorrect: 'isCorrect',
  order: 'order'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.QuestionTagScalarFieldEnum = {
  questionId: 'questionId',
  tagId: 'tagId'
};

exports.Prisma.QuestionReportScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  userId: 'userId',
  reportType: 'reportType',
  reason: 'reason',
  description: 'description',
  status: 'status',
  alternativeExplanation: 'alternativeExplanation',
  suggestedAnswer: 'suggestedAnswer',
  reviewedById: 'reviewedById',
  reviewedAt: 'reviewedAt',
  reviewNotes: 'reviewNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionReportOptionScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  text: 'text',
  isCorrect: 'isCorrect',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionAlternativeExplanationScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  explanation: 'explanation',
  source: 'source',
  reportId: 'reportId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamPaperScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  subjectIds: 'subjectIds',
  topicIds: 'topicIds',
  subtopicIds: 'subtopicIds',
  questionIds: 'questionIds',
  timeLimitMin: 'timeLimitMin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamSubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  examPaperId: 'examPaperId',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt',
  totalQuestions: 'totalQuestions',
  correctCount: 'correctCount',
  scorePercent: 'scorePercent'
};

exports.Prisma.ExamAnswerScalarFieldEnum = {
  id: 'id',
  submissionId: 'submissionId',
  questionId: 'questionId',
  selectedOptionId: 'selectedOptionId',
  isCorrect: 'isCorrect'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  priceCents: 'priceCents',
  currency: 'currency',
  interval: 'interval',
  planType: 'planType',
  stripePriceId: 'stripePriceId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  status: 'status',
  startedAt: 'startedAt',
  endsAt: 'endsAt',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubId: 'stripeSubId',
  stripeStatus: 'stripeStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  type: 'type',
  target: 'target',
  expiresAt: 'expiresAt',
  consumed: 'consumed',
  createdAt: 'createdAt'
};

exports.Prisma.ReferralCodeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  isActive: 'isActive',
  usageCount: 'usageCount',
  maxUsage: 'maxUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referrerId: 'referrerId',
  refereeId: 'refereeId',
  referralCodeId: 'referralCodeId',
  status: 'status',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralRewardScalarFieldEnum = {
  id: 'id',
  referralId: 'referralId',
  type: 'type',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  isClaimed: 'isClaimed',
  claimedAt: 'claimedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  siteTitle: 'siteTitle',
  siteDescription: 'siteDescription',
  siteKeywords: 'siteKeywords',
  logoUrl: 'logoUrl',
  faviconUrl: 'faviconUrl',
  ogImageUrl: 'ogImageUrl',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  address: 'address',
  facebookUrl: 'facebookUrl',
  twitterUrl: 'twitterUrl',
  linkedinUrl: 'linkedinUrl',
  instagramUrl: 'instagramUrl',
  youtubeUrl: 'youtubeUrl',
  googleAnalyticsId: 'googleAnalyticsId',
  facebookPixelId: 'facebookPixelId',
  customCss: 'customCss',
  customJs: 'customJs',
  maintenanceMode: 'maintenanceMode',
  maintenanceMessage: 'maintenanceMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  STUDENT: 'STUDENT',
  EXPERT: 'EXPERT'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

exports.QuestionReportType = exports.$Enums.QuestionReportType = {
  INCORRECT_ANSWER: 'INCORRECT_ANSWER',
  INCORRECT_EXPLANATION: 'INCORRECT_EXPLANATION',
  SUGGESTED_EXPLANATION: 'SUGGESTED_EXPLANATION',
  GRAMMATICAL_ERROR: 'GRAMMATICAL_ERROR',
  TECHNICAL_ERROR: 'TECHNICAL_ERROR',
  OTHER: 'OTHER'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.PlanInterval = exports.$Enums.PlanInterval = {
  MONTH: 'MONTH',
  YEAR: 'YEAR'
};

exports.PlanType = exports.$Enums.PlanType = {
  MANUAL: 'MANUAL',
  AI_ENABLED: 'AI_ENABLED'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  EXPIRED: 'EXPIRED'
};

exports.OtpType = exports.$Enums.OtpType = {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE'
};

exports.ReferralStatus = exports.$Enums.ReferralStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.RewardType = exports.$Enums.RewardType = {
  SUBSCRIPTION_DAYS: 'SUBSCRIPTION_DAYS',
  MONETARY_CREDIT: 'MONETARY_CREDIT',
  FEATURE_ACCESS: 'FEATURE_ACCESS',
  DISCOUNT_PERCENT: 'DISCOUNT_PERCENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Stream: 'Stream',
  Subject: 'Subject',
  Topic: 'Topic',
  Subtopic: 'Subtopic',
  Question: 'Question',
  QuestionOption: 'QuestionOption',
  Tag: 'Tag',
  QuestionTag: 'QuestionTag',
  QuestionReport: 'QuestionReport',
  QuestionReportOption: 'QuestionReportOption',
  QuestionAlternativeExplanation: 'QuestionAlternativeExplanation',
  ExamPaper: 'ExamPaper',
  ExamSubmission: 'ExamSubmission',
  ExamAnswer: 'ExamAnswer',
  Plan: 'Plan',
  Subscription: 'Subscription',
  Otp: 'Otp',
  ReferralCode: 'ReferralCode',
  Referral: 'Referral',
  ReferralReward: 'ReferralReward',
  SystemSettings: 'SystemSettings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
