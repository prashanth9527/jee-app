// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

// Use PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Disable prepared statements
  directUrl = env("DATABASE_URL")
}

// -------------------------------------------
// Core Users & Auth
// -------------------------------------------
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  phone          String?  @unique
  emailVerified  Boolean  @default(false)
  phoneVerified  Boolean  @default(false)
  hashedPassword String?
  fullName       String
  role           UserRole @default(STUDENT)
  stream         Stream?  @relation(fields: [streamId], references: [id])
  streamId       String?
  
  // Google Auth fields
  googleId       String?  @unique
  profilePicture String?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // trial & subscription
  trialStartedAt DateTime?
  trialEndsAt    DateTime?
  subscriptions  Subscription[]
  
  // AI usage tracking
  aiTestsUsed    Int       @default(0)
  aiTestsLimit   Int       @default(0)
  lastAiResetAt  DateTime? // Track when AI usage was last reset

  // exams
  examSubmissions ExamSubmission[]

  // OTPs
  otps Otp[]

  // Referral system
  referralCode   ReferralCode?
  referralsMade  Referral[]     @relation("Referrer")
  referralReceived Referral?    @relation("Referee")
  
  // Question reports
  questionReports QuestionReport[]
  reviewedReports QuestionReport[] @relation("ReportReviewer")
  
  // Bookmarks
  bookmarks Bookmark[]
}

enum UserRole {
  ADMIN
  STUDENT
  EXPERT
}

// -------------------------------------------
// Streams & Subjects
// -------------------------------------------
model Stream {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  code        String     @unique // JEE, NEET, CLAT, etc.
  isActive    Boolean    @default(true)
  subjects    Subject[]
  users       User[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// -------------------------------------------
// Content Hierarchy: Subject -> Topic -> Subtopic
// -------------------------------------------
model Subject {
  id          String     @id @default(cuid())
  name        String
  description String?
  stream      Stream     @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId    String
  topics      Topic[]
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([streamId, name])
}

model Topic {
  id          String     @id @default(cuid())
  name        String
  description String?
  subject     Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   String
  subtopics   Subtopic[]
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([subjectId, name])
}

model Subtopic {
  id          String     @id @default(cuid())
  name        String
  description String?
  topic       Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([topicId, name])
}

// -------------------------------------------
// Questions & Tags
// -------------------------------------------
model Question {
  id             String     @id @default(cuid())
  stem           String
  explanation    String?
  tip_formula    String?    // Tips and formulas to help solve the question
  difficulty     Difficulty @default(MEDIUM)
  yearAppeared   Int?
  isPreviousYear Boolean    @default(false)
  isAIGenerated  Boolean    @default(false)
  aiPrompt       String?    // Store the prompt used to generate this question

  subject    Subject?  @relation(fields: [subjectId], references: [id])
  subjectId  String?
  topic      Topic?    @relation(fields: [topicId], references: [id])
  topicId    String?
  subtopic   Subtopic? @relation(fields: [subtopicId], references: [id])
  subtopicId String?

  tags    QuestionTag[]
  options QuestionOption[]
  answers ExamAnswer[]
  reports QuestionReport[]
  alternativeExplanations QuestionAlternativeExplanation[]
  bookmarks Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model QuestionOption {
  id                String       @id @default(cuid())
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId        String
  text              String
  isCorrect         Boolean      @default(false)
  order             Int          @default(0)
  // back relation for selected answers
  selectedByAnswers ExamAnswer[] @relation("SelectedOption")
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  questions QuestionTag[]
}

model QuestionTag {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String

  @@id([questionId, tagId])
}

// -------------------------------------------
// Question Reports & Alternative Explanations
// -------------------------------------------
model QuestionReport {
  id          String           @id @default(cuid())
  question    Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  reportType  QuestionReportType
  reason      String
  description String?
  status      ReportStatus     @default(PENDING)
  
  // For alternative explanations
  alternativeExplanation String?
  
  // For answer corrections
  suggestedAnswer String?
  suggestedOptions QuestionReportOption[]
  
  // Admin/Expert review
  reviewedBy   User?   @relation("ReportReviewer", fields: [reviewedById], references: [id])
  reviewedById String?
  reviewedAt   DateTime?
  reviewNotes  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionReportOption {
  id                String         @id @default(cuid())
  report            QuestionReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId          String
  text              String
  isCorrect         Boolean        @default(false)
  order             Int            @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionReportType {
  INCORRECT_ANSWER
  INCORRECT_EXPLANATION
  SUGGESTED_EXPLANATION
  GRAMMATICAL_ERROR
  TECHNICAL_ERROR
  OTHER
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

model QuestionAlternativeExplanation {
  id          String   @id @default(cuid())
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  explanation String
  source      String   // "ORIGINAL" or "REPORT_APPROVED"
  reportId    String?  // Reference to the approved report if from report
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------------------------------
// Exams (Practice Papers) & Submissions
// -------------------------------------------
model ExamPaper {
  id           String   @id @default(cuid())
  title        String
  description  String?
  // optional scoping for practice generation
  subjectIds   String[] @default([])
  topicIds     String[] @default([])
  subtopicIds  String[] @default([])
  questionIds  String[] @default([])
  timeLimitMin Int? // optional time limit

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions ExamSubmission[]
}

model ExamSubmission {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  examPaper   ExamPaper @relation(fields: [examPaperId], references: [id], onDelete: Cascade)
  examPaperId String

  startedAt      DateTime  @default(now())
  submittedAt    DateTime?
  totalQuestions Int
  correctCount   Int       @default(0)
  scorePercent   Float? // computed

  answers ExamAnswer[]
}

model ExamAnswer {
  id               String          @id @default(cuid())
  submission       ExamSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId     String
  question         Question        @relation(fields: [questionId], references: [id])
  questionId       String
  selectedOption   QuestionOption? @relation("SelectedOption", fields: [selectedOptionId], references: [id])
  selectedOptionId String?
  isCorrect        Boolean         @default(false)

  @@unique([submissionId, questionId])
}

// -------------------------------------------
// Subscriptions & Plans
// -------------------------------------------
model Plan {
  id            String       @id @default(cuid())
  name          String       @unique
  description   String?
  priceCents    Int // price in cents
  currency      String       @default("usd")
  interval      PlanInterval @default(MONTH)
  planType      PlanType     @default(MANUAL)
  stripePriceId String?      @unique
  isActive      Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]
}

enum PlanType {
  MANUAL
  AI_ENABLED
}

enum PlanInterval {
  MONTH
  YEAR
}

model Subscription {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  plan   Plan   @relation(fields: [planId], references: [id])
  planId String

  status    SubscriptionStatus @default(ACTIVE)
  startedAt DateTime           @default(now())
  endsAt    DateTime?

  stripeCustomerId String?
  stripeSubId      String?
  stripeStatus     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

model Otp {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  code      String
  type      OtpType
  target    String // email or phone value used
  expiresAt DateTime
  consumed  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, type])
}

enum OtpType {
  EMAIL
  PHONE
}

// -------------------------------------------
// Referral System
// -------------------------------------------
model ReferralCode {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  code      String   @unique
  isActive  Boolean  @default(true)
  usageCount Int     @default(0)
  maxUsage  Int?     // null means unlimited
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referrals Referral[]
}

model Referral {
  id              String        @id @default(cuid())
  referrer        User          @relation("Referrer", fields: [referrerId], references: [id])
  referrerId      String
  referee         User          @relation("Referee", fields: [refereeId], references: [id])
  refereeId       String        @unique // One referral per user
  referralCode    ReferralCode  @relation(fields: [referralCodeId], references: [id])
  referralCodeId  String
  status          ReferralStatus @default(PENDING)
  rewards         ReferralReward[]
  completedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([referrerId, refereeId])
}

enum ReferralStatus {
  PENDING    // Referral made but not completed
  COMPLETED  // Referee completed signup/subscription
  EXPIRED    // Referral expired
  CANCELLED  // Referral cancelled
}

model ReferralReward {
  id          String           @id @default(cuid())
  referral    Referral         @relation(fields: [referralId], references: [id])
  referralId  String
  type        RewardType
  amount      Int              // Amount in cents or days
  currency    String?          // For monetary rewards
  description String
  isClaimed   Boolean          @default(false)
  claimedAt   DateTime?
  expiresAt   DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum RewardType {
  SUBSCRIPTION_DAYS  // Free subscription days
  MONETARY_CREDIT    // Money credit
  FEATURE_ACCESS     // Access to premium features
  DISCOUNT_PERCENT   // Percentage discount
}

// -------------------------------------------
// System Settings
// -------------------------------------------
model SystemSettings {
  id                String   @id @default(cuid())
  siteTitle         String   @default("JEE App")
  siteDescription   String?  @db.Text
  siteKeywords      String?  @db.Text
  logoUrl           String?
  faviconUrl        String?
  ogImageUrl        String?  // Open Graph image for social media
  contactEmail      String?
  contactPhone      String?
  address           String?  @db.Text
  facebookUrl       String?
  twitterUrl        String?
  linkedinUrl       String?
  instagramUrl      String?
  youtubeUrl        String?
  googleAnalyticsId String?
  facebookPixelId   String?
  customCss         String?  @db.Text
  customJs          String?  @db.Text
  maintenanceMode   Boolean  @default(false)
  maintenanceMessage String? @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("system_settings")
}

// -------------------------------------------
// Bookmark System
// -------------------------------------------
model Bookmark {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, questionId])
  @@map("bookmarks")
}

// -------------------------------------------
// Formula Bank
// -------------------------------------------
model Formula {
  id          String   @id @default(cuid())
  title       String
  formula     String
  description String?
  subject     String?
  tags        String[] @default([])
  topicId     String?
  subtopicId  String?
  targetRole  UserRole @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("formulas")
}

// -------------------------------------------
// Notifications
// -------------------------------------------
model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String?  @db.Text
  link        String?  // Optional link for the notification
  validFrom   DateTime
  validUntil  DateTime
  isActive    Boolean  @default(true)
  priority    NotificationPriority @default(NORMAL)
  targetRole  UserRole @default(STUDENT) // Which user role this notification is for
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notifications")
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// -------------------------------------------
// OAuth State Management
// -------------------------------------------
model OAuthState {
  id        String   @id @default(cuid())
  state     String   @unique
  provider  String   // 'google', 'facebook', etc.
  redirectUri String?
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("oauth_states")
}