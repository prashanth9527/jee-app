// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Use PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------
// Core Users & Auth
// -------------------------------------------
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  phone          String?  @unique
  emailVerified  Boolean  @default(false)
  phoneVerified  Boolean  @default(false)
  hashedPassword String
  fullName       String
  role           UserRole @default(STUDENT)
  stream         Stream?  @relation(fields: [streamId], references: [id])
  streamId       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // trial & subscription
  trialStartedAt DateTime?
  trialEndsAt    DateTime?
  subscriptions  Subscription[]
  
  // AI usage tracking
  aiTestsUsed    Int       @default(0)
  aiTestsLimit   Int       @default(0)
  lastAiResetAt  DateTime? // Track when AI usage was last reset

  // exams
  examSubmissions ExamSubmission[]

  // OTPs
  otps Otp[]

  // Referral system
  referralCode   ReferralCode?
  referralsMade  Referral[]     @relation("Referrer")
  referralReceived Referral?    @relation("Referee")
  
  // Question reports
  questionReports QuestionReport[]
  reviewedReports QuestionReport[] @relation("ReportReviewer")
}

enum UserRole {
  ADMIN
  STUDENT
  EXPERT
}

// -------------------------------------------
// Streams & Subjects
// -------------------------------------------
model Stream {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  code        String     @unique // JEE, NEET, CLAT, etc.
  isActive    Boolean    @default(true)
  subjects    Subject[]
  users       User[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// -------------------------------------------
// Content Hierarchy: Subject -> Topic -> Subtopic
// -------------------------------------------
model Subject {
  id          String     @id @default(cuid())
  name        String
  description String?
  stream      Stream     @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId    String
  topics      Topic[]
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([streamId, name])
}

model Topic {
  id          String     @id @default(cuid())
  name        String
  description String?
  subject     Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   String
  subtopics   Subtopic[]
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([subjectId, name])
}

model Subtopic {
  id          String     @id @default(cuid())
  name        String
  description String?
  topic       Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([topicId, name])
}

// -------------------------------------------
// Questions & Tags
// -------------------------------------------
model Question {
  id             String     @id @default(cuid())
  stem           String
  explanation    String?
  tip_formula    String?    // Tips and formulas to help solve the question
  difficulty     Difficulty @default(MEDIUM)
  yearAppeared   Int?
  isPreviousYear Boolean    @default(false)
  isAIGenerated  Boolean    @default(false)
  aiPrompt       String?    // Store the prompt used to generate this question

  subject    Subject?  @relation(fields: [subjectId], references: [id])
  subjectId  String?
  topic      Topic?    @relation(fields: [topicId], references: [id])
  topicId    String?
  subtopic   Subtopic? @relation(fields: [subtopicId], references: [id])
  subtopicId String?

  tags    QuestionTag[]
  options QuestionOption[]
  answers ExamAnswer[]
  reports QuestionReport[]
  alternativeExplanations QuestionAlternativeExplanation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model QuestionOption {
  id                String       @id @default(cuid())
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId        String
  text              String
  isCorrect         Boolean      @default(false)
  order             Int          @default(0)
  // back relation for selected answers
  selectedByAnswers ExamAnswer[] @relation("SelectedOption")
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  questions QuestionTag[]
}

model QuestionTag {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String

  @@id([questionId, tagId])
}

// -------------------------------------------
// Question Reports & Alternative Explanations
// -------------------------------------------
model QuestionReport {
  id          String           @id @default(cuid())
  question    Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  reportType  QuestionReportType
  reason      String
  description String?
  status      ReportStatus     @default(PENDING)
  
  // For alternative explanations
  alternativeExplanation String?
  
  // For answer corrections
  suggestedAnswer String?
  suggestedOptions QuestionReportOption[]
  
  // Admin/Expert review
  reviewedBy   User?   @relation("ReportReviewer", fields: [reviewedById], references: [id])
  reviewedById String?
  reviewedAt   DateTime?
  reviewNotes  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionReportOption {
  id                String         @id @default(cuid())
  report            QuestionReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId          String
  text              String
  isCorrect         Boolean        @default(false)
  order             Int            @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionReportType {
  INCORRECT_ANSWER
  INCORRECT_EXPLANATION
  SUGGESTED_EXPLANATION
  GRAMMATICAL_ERROR
  TECHNICAL_ERROR
  OTHER
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

model QuestionAlternativeExplanation {
  id          String   @id @default(cuid())
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  explanation String
  source      String   // "ORIGINAL" or "REPORT_APPROVED"
  reportId    String?  // Reference to the approved report if from report
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------------------------------
// Exams (Practice Papers) & Submissions
// -------------------------------------------
model ExamPaper {
  id           String   @id @default(cuid())
  title        String
  description  String?
  // optional scoping for practice generation
  subjectIds   String[] @default([])
  topicIds     String[] @default([])
  subtopicIds  String[] @default([])
  questionIds  String[] @default([])
  timeLimitMin Int? // optional time limit

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions ExamSubmission[]
}

model ExamSubmission {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  examPaper   ExamPaper @relation(fields: [examPaperId], references: [id], onDelete: Cascade)
  examPaperId String

  startedAt      DateTime  @default(now())
  submittedAt    DateTime?
  totalQuestions Int
  correctCount   Int       @default(0)
  scorePercent   Float? // computed

  answers ExamAnswer[]
}

model ExamAnswer {
  id               String          @id @default(cuid())
  submission       ExamSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId     String
  question         Question        @relation(fields: [questionId], references: [id])
  questionId       String
  selectedOption   QuestionOption? @relation("SelectedOption", fields: [selectedOptionId], references: [id])
  selectedOptionId String?
  isCorrect        Boolean         @default(false)

  @@unique([submissionId, questionId])
}

// -------------------------------------------
// Subscriptions & Plans
// -------------------------------------------
model Plan {
  id            String       @id @default(cuid())
  name          String       @unique
  description   String?
  priceCents    Int // price in cents
  currency      String       @default("usd")
  interval      PlanInterval @default(MONTH)
  planType      PlanType     @default(MANUAL)
  stripePriceId String?      @unique
  isActive      Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]
}

enum PlanType {
  MANUAL
  AI_ENABLED
}

enum PlanInterval {
  MONTH
  YEAR
}

model Subscription {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  plan   Plan   @relation(fields: [planId], references: [id])
  planId String

  status    SubscriptionStatus @default(ACTIVE)
  startedAt DateTime           @default(now())
  endsAt    DateTime?

  stripeCustomerId String?
  stripeSubId      String?
  stripeStatus     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

model Otp {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  code      String
  type      OtpType
  target    String // email or phone value used
  expiresAt DateTime
  consumed  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, type])
}

enum OtpType {
  EMAIL
  PHONE
}

// -------------------------------------------
// Referral System
// -------------------------------------------
model ReferralCode {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  code      String   @unique
  isActive  Boolean  @default(true)
  usageCount Int     @default(0)
  maxUsage  Int?     // null means unlimited
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referrals Referral[]
}

model Referral {
  id              String        @id @default(cuid())
  referrer        User          @relation("Referrer", fields: [referrerId], references: [id])
  referrerId      String
  referee         User          @relation("Referee", fields: [refereeId], references: [id])
  refereeId       String        @unique // One referral per user
  referralCode    ReferralCode  @relation(fields: [referralCodeId], references: [id])
  referralCodeId  String
  status          ReferralStatus @default(PENDING)
  rewards         ReferralReward[]
  completedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([referrerId, refereeId])
}

enum ReferralStatus {
  PENDING    // Referral made but not completed
  COMPLETED  // Referee completed signup/subscription
  EXPIRED    // Referral expired
  CANCELLED  // Referral cancelled
}

model ReferralReward {
  id          String           @id @default(cuid())
  referral    Referral         @relation(fields: [referralId], references: [id])
  referralId  String
  type        RewardType
  amount      Int              // Amount in cents or days
  currency    String?          // For monetary rewards
  description String
  isClaimed   Boolean          @default(false)
  claimedAt   DateTime?
  expiresAt   DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum RewardType {
  SUBSCRIPTION_DAYS  // Free subscription days
  MONETARY_CREDIT    // Money credit
  FEATURE_ACCESS     // Access to premium features
  DISCOUNT_PERCENT   // Percentage discount
}

// -------------------------------------------
// System Settings
// -------------------------------------------
model SystemSettings {
  id                String   @id @default(cuid())
  siteTitle         String   @default("JEE App")
  siteDescription   String?  @db.Text
  siteKeywords      String?  @db.Text
  logoUrl           String?
  faviconUrl        String?
  ogImageUrl        String?  // Open Graph image for social media
  contactEmail      String?
  contactPhone      String?
  address           String?  @db.Text
  facebookUrl       String?
  twitterUrl        String?
  linkedinUrl       String?
  instagramUrl      String?
  youtubeUrl        String?
  googleAnalyticsId String?
  facebookPixelId   String?
  customCss         String?  @db.Text
  customJs          String?  @db.Text
  maintenanceMode   Boolean  @default(false)
  maintenanceMessage String? @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("system_settings")
}
 
  
 / /   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
 / /   L e a r n i n g   M a n a g e m e n t   S y s t e m   ( L M S )  
 / /   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
  
 / /   L M S   C o n t e n t   T y p e s  
 e n u m   C o n t e n t T y p e   {  
     H 5 P                       / /   H 5 P   i n t e r a c t i v e   c o n t e n t  
     S C O R M                   / /   S C O R M   p a c k a g e s  
     F I L E                     / /   P D F ,   D O C ,   P P T ,   e t c .  
     U R L                       / /   E x t e r n a l   l i n k s  
     I F R A M E                 / /   E m b e d d e d   i f r a m e   c o n t e n t  
     Y O U T U B E               / /   Y o u T u b e   v i d e o s  
     T E X T                     / /   R i c h   t e x t   c o n t e n t  
     V I D E O                   / /   D i r e c t   v i d e o   f i l e s  
     A U D I O                   / /   A u d i o   f i l e s  
     I M A G E                   / /   I m a g e   f i l e s  
     Q U I Z                     / /   I n t e r a c t i v e   q u i z z e s  
     A S S I G N M E N T         / /   A s s i g n m e n t s  
 }  
  
 / /   L M S   C o n t e n t   S t a t u s  
 e n u m   C o n t e n t S t a t u s   {  
     D R A F T  
     P U B L I S H E D  
     A R C H I V E D  
     S C H E D U L E D  
 }  
  
 / /   L M S   A c c e s s   C o n t r o l  
 e n u m   A c c e s s T y p e   {  
     F R E E                       / /   F r e e   f o r   a l l   u s e r s  
     S U B S C R I P T I O N       / /   R e q u i r e s   a c t i v e   s u b s c r i p t i o n  
     P R E M I U M                 / /   P r e m i u m   c o n t e n t   o n l y  
     T R I A L                     / /   A v a i l a b l e   d u r i n g   t r i a l  
 }  
  
 / /   L M S   C o n t e n t   M o d e l  
 m o d e l   L M S C o n t e n t   {  
     i d                     S t r i n g                 @ i d   @ d e f a u l t ( c u i d ( ) )  
     t i t l e               S t r i n g  
     d e s c r i p t i o n   S t r i n g ?               @ d b . T e x t  
     c o n t e n t T y p e   C o n t e n t T y p e  
     s t a t u s             C o n t e n t S t a t u s   @ d e f a u l t ( D R A F T )  
     a c c e s s T y p e     A c c e s s T y p e         @ d e f a u l t ( F R E E )  
      
     / /   C o n t e n t - s p e c i f i c   f i e l d s  
     c o n t e n t D a t a   J s o n ?                   / /   F l e x i b l e   J S O N   f o r   c o n t e n t - s p e c i f i c   d a t a  
      
     / /   F i l e / U R L   c o n t e n t  
     f i l e U r l           S t r i n g ?               / /   A W S   S 3   U R L   f o r   f i l e s  
     f i l e S i z e         I n t ?                     / /   F i l e   s i z e   i n   b y t e s  
     f i l e T y p e         S t r i n g ?               / /   M I M E   t y p e  
     o r i g i n a l F i l e N a m e   S t r i n g ?     / /   O r i g i n a l   f i l e n a m e  
      
     / /   U R L / I f r a m e   c o n t e n t  
     e x t e r n a l U r l   S t r i n g ?               / /   E x t e r n a l   U R L  
     i f r a m e C o d e     S t r i n g ?               / /   I f r a m e   e m b e d   c o d e  
      
     / /   Y o u T u b e   c o n t e n t  
     y o u t u b e I d       S t r i n g ?               / /   Y o u T u b e   v i d e o   I D  
     y o u t u b e U r l     S t r i n g ?               / /   F u l l   Y o u T u b e   U R L  
      
     / /   H 5 P / S C O R M   c o n t e n t  
     h 5 p C o n t e n t     J s o n ?                   / /   H 5 P   c o n t e n t   d a t a  
     s c o r m D a t a       J s o n ?                   / /   S C O R M   p a c k a g e   d a t a  
      
     / /   O r g a n i z a t i o n  
     s u b j e c t           S u b j e c t ?             @ r e l a t i o n ( f i e l d s :   [ s u b j e c t I d ] ,   r e f e r e n c e s :   [ i d ] )  
     s u b j e c t I d       S t r i n g ?  
     t o p i c               T o p i c ?                 @ r e l a t i o n ( f i e l d s :   [ t o p i c I d ] ,   r e f e r e n c e s :   [ i d ] )  
     t o p i c I d           S t r i n g ?  
     s u b t o p i c         S u b t o p i c ?           @ r e l a t i o n ( f i e l d s :   [ s u b t o p i c I d ] ,   r e f e r e n c e s :   [ i d ] )  
     s u b t o p i c I d     S t r i n g ?  
      
     / /   D r i p   c o n t e n t   s e t t i n g s  
     i s D r i p C o n t e n t   B o o l e a n           @ d e f a u l t ( f a l s e )  
     d r i p D e l a y           I n t ?                 / /   D e l a y   i n   d a y s   f r o m   c o u r s e   s t a r t  
     d r i p D a t e             D a t e T i m e ?       / /   S p e c i f i c   d a t e   t o   r e l e a s e  
      
     / /   C o n t e n t   m e t a d a t a  
     d u r a t i o n           I n t ?                   / /   D u r a t i o n   i n   m i n u t e s  
     d i f f i c u l t y       D i f f i c u l t y ?     / /   C o n t e n t   d i f f i c u l t y   l e v e l  
     t a g s                   S t r i n g [ ]           / /   C o n t e n t   t a g s  
      
     / /   O r d e r i n g   a n d   s t r u c t u r e  
     o r d e r                 I n t                     @ d e f a u l t ( 0 )  
     p a r e n t I d           S t r i n g ?             / /   F o r   n e s t e d   c o n t e n t  
     p a r e n t               L M S C o n t e n t ?     @ r e l a t i o n ( " C o n t e n t H i e r a r c h y " ,   f i e l d s :   [ p a r e n t I d ] ,   r e f e r e n c e s :   [ i d ] )  
     c h i l d r e n           L M S C o n t e n t [ ]   @ r e l a t i o n ( " C o n t e n t H i e r a r c h y " )  
      
     / /   P r o g r e s s   t r a c k i n g  
     p r o g r e s s           L M S P r o g r e s s [ ]  
      
     / /   A n a l y t i c s  
     v i e w s                 I n t                     @ d e f a u l t ( 0 )  
     c o m p l e t i o n s     I n t                     @ d e f a u l t ( 0 )  
      
     c r e a t e d A t         D a t e T i m e           @ d e f a u l t ( n o w ( ) )  
     u p d a t e d A t         D a t e T i m e           @ u p d a t e d A t  
      
     @ @ m a p ( " l m s _ c o n t e n t " )  
 }  
  
 / /   P r o g r e s s   S t a t u s  
 e n u m   P r o g r e s s S t a t u s   {  
     N O T _ S T A R T E D  
     I N _ P R O G R E S S  
     C O M P L E T E D  
     F A I L E D  
 }  
  
 / /   C o n t e n t   P r o g r e s s   T r a c k i n g  
 m o d e l   L M S P r o g r e s s   {  
     i d                 S t r i n g           @ i d   @ d e f a u l t ( c u i d ( ) )  
     u s e r             U s e r               @ r e l a t i o n ( f i e l d s :   [ u s e r I d ] ,   r e f e r e n c e s :   [ i d ] ,   o n D e l e t e :   C a s c a d e )  
     u s e r I d         S t r i n g  
     c o n t e n t       L M S C o n t e n t   @ r e l a t i o n ( f i e l d s :   [ c o n t e n t I d ] ,   r e f e r e n c e s :   [ i d ] ,   o n D e l e t e :   C a s c a d e )  
     c o n t e n t I d   S t r i n g  
      
     / /   P r o g r e s s   d e t a i l s  
     s t a t u s         P r o g r e s s S t a t u s   @ d e f a u l t ( N O T _ S T A R T E D )  
     p r o g r e s s     F l o a t                     @ d e f a u l t ( 0 )   / /   P r o g r e s s   p e r c e n t a g e   ( 0 - 1 0 0 )  
     t i m e S p e n t   I n t                         @ d e f a u l t ( 0 )   / /   T i m e   s p e n t   i n   s e c o n d s  
      
     / /   C o m p l e t i o n   t r a c k i n g  
     s t a r t e d A t       D a t e T i m e ?  
     c o m p l e t e d A t   D a t e T i m e ?  
     l a s t A c c e s s e d A t   D a t e T i m e ?  
      
     / /   S C O R M / H 5 P   s p e c i f i c   d a t a  
     s c o r e             F l o a t ?           / /   S c o r e   i f   a p p l i c a b l e  
     a t t e m p t s       I n t                 @ d e f a u l t ( 0 )  
     d a t a               J s o n ?             / /   A d d i t i o n a l   p r o g r e s s   d a t a  
      
     @ @ u n i q u e ( [ u s e r I d ,   c o n t e n t I d ] )  
     @ @ m a p ( " l m s _ p r o g r e s s " )  
 }  
 