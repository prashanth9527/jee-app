generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  phone             String?          @unique
  pendingPhone      String?
  emailVerified     Boolean          @default(false)
  phoneVerified     Boolean          @default(false)
  hashedPassword    String?
  fullName          String
  role              UserRole         @default(STUDENT)
  streamId          String?
  googleId          String?          @unique
  profilePicture    String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  trialStartedAt    DateTime?
  trialEndsAt       DateTime?
  aiTestsUsed       Int              @default(0)
  aiTestsLimit      Int              @default(0)
  lastAiResetAt     DateTime?
  createdExamPapers ExamPaper[]      @relation("ExamPaperCreator")
  examSubmissions   ExamSubmission[]
  otps              Otp[]
  paymentOrders     PaymentOrder[]
  createdQuestions  Question[]       @relation("QuestionCreator")
  reviewedReports   QuestionReport[] @relation("ReportReviewer")
  questionReports   QuestionReport[]
  referralReceived  Referral?        @relation("Referee")
  referralsMade     Referral[]       @relation("Referrer")
  referralCode      ReferralCode?
  subscriptions     Subscription[]
  stream            Stream?          @relation(fields: [streamId], references: [id])
  blogBookmarks     BlogBookmark[]
  blogComments      BlogComment[]
  blogLikes         BlogLike[]
  blogs             Blog[]
  bookmarks         Bookmark[]
  contactTickets    ContactTicket[]
  lmsProgress       LMSProgress[]
  ticketResponses   TicketResponse[]
  sessions          UserSession[]
}

model Stream {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  code        String       @unique
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  subjects    Subject[]
  users       User[]
  blogs       Blog[]
  lmsContent  LMSContent[]
}

model Subject {
  id          String       @id @default(cuid())
  name        String
  description String?
  streamId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   Question[]
  stream      Stream       @relation(fields: [streamId], references: [id], onDelete: Cascade)
  topics      Topic[]
  blogs       Blog[]
  lmsContent  LMSContent[]

  @@unique([streamId, name])
}

model Topic {
  id          String       @id @default(cuid())
  name        String
  description String?
  subjectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   Question[]
  subtopics   Subtopic[]
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  lmsContent  LMSContent[]

  @@unique([subjectId, name])
}

model Subtopic {
  id          String       @id @default(cuid())
  name        String
  description String?
  topicId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   Question[]
  topic       Topic        @relation(fields: [topicId], references: [id], onDelete: Cascade)
  lmsContent  LMSContent[]

  @@unique([topicId, name])
}

model Question {
  id                      String                           @id @default(cuid())
  stem                    String
  explanation             String?
  tip_formula             String?
  difficulty              Difficulty                       @default(MEDIUM)
  yearAppeared            Int?
  isPreviousYear          Boolean                          @default(false)
  isAIGenerated           Boolean                          @default(false)
  aiPrompt                String?
  subjectId               String?
  topicId                 String?
  subtopicId              String?
  createdAt               DateTime                         @default(now())
  updatedAt               DateTime                         @updatedAt
  createdById             String?
  answers                 ExamAnswer[]
  createdBy               User?                            @relation("QuestionCreator", fields: [createdById], references: [id])
  subject                 Subject?                         @relation(fields: [subjectId], references: [id])
  subtopic                Subtopic?                        @relation(fields: [subtopicId], references: [id])
  topic                   Topic?                           @relation(fields: [topicId], references: [id])
  alternativeExplanations QuestionAlternativeExplanation[]
  options                 QuestionOption[]
  reports                 QuestionReport[]
  tags                    QuestionTag[]
  bookmarks               Bookmark[]
}

model QuestionOption {
  id                String       @id @default(cuid())
  questionId        String
  text              String
  isCorrect         Boolean      @default(false)
  order             Int          @default(0)
  selectedByAnswers ExamAnswer[] @relation("SelectedOption")
  question          Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String        @id @default(cuid())
  name      String        @unique
  questions QuestionTag[]
}

model QuestionTag {
  questionId String
  tagId      String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
}

model QuestionReport {
  id                     String                 @id @default(cuid())
  questionId             String
  userId                 String
  reportType             QuestionReportType
  reason                 String
  description            String?
  status                 ReportStatus           @default(PENDING)
  alternativeExplanation String?
  suggestedAnswer        String?
  reviewedById           String?
  reviewedAt             DateTime?
  reviewNotes            String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  question               Question               @relation(fields: [questionId], references: [id], onDelete: Cascade)
  reviewedBy             User?                  @relation("ReportReviewer", fields: [reviewedById], references: [id])
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestedOptions       QuestionReportOption[]
}

model QuestionReportOption {
  id        String         @id @default(cuid())
  reportId  String
  text      String
  isCorrect Boolean        @default(false)
  order     Int            @default(0)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  report    QuestionReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model QuestionAlternativeExplanation {
  id          String   @id @default(cuid())
  questionId  String
  explanation String
  source      String
  reportId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model ExamPaper {
  id           String           @id @default(cuid())
  title        String
  description  String?
  subjectIds   String[]         @default([])
  topicIds     String[]         @default([])
  subtopicIds  String[]         @default([])
  questionIds  String[]         @default([])
  timeLimitMin Int?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  createdById  String?
  createdBy    User?            @relation("ExamPaperCreator", fields: [createdById], references: [id])
  submissions  ExamSubmission[]
}

model ExamSubmission {
  id             String       @id @default(cuid())
  userId         String
  examPaperId    String
  startedAt      DateTime     @default(now())
  submittedAt    DateTime?
  totalQuestions Int
  correctCount   Int          @default(0)
  scorePercent   Float?
  answers        ExamAnswer[]
  examPaper      ExamPaper    @relation(fields: [examPaperId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExamAnswer {
  id               String          @id @default(cuid())
  submissionId     String
  questionId       String
  selectedOptionId String?
  isCorrect        Boolean         @default(false)
  question         Question        @relation(fields: [questionId], references: [id])
  selectedOption   QuestionOption? @relation("SelectedOption", fields: [selectedOptionId], references: [id])
  submission       ExamSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, questionId])
}

model Plan {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  priceCents    Int
  currency      String         @default("usd")
  interval      PlanInterval   @default(MONTH)
  planType      PlanType       @default(MANUAL)
  stripePriceId String?        @unique
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  paymentOrders PaymentOrder[]
  subscriptions Subscription[]
}

model Subscription {
  id               String             @id @default(cuid())
  userId           String
  planId           String
  status           SubscriptionStatus @default(ACTIVE)
  startedAt        DateTime           @default(now())
  endsAt           DateTime?
  stripeCustomerId String?
  stripeSubId      String?
  stripeStatus     String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  plan             Plan               @relation(fields: [planId], references: [id])
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentOrder {
  id                 String             @id @default(cuid())
  userId             String
  planId             String
  merchantOrderId    String             @unique
  amount             Int
  currency           String             @default("INR")
  status             PaymentOrderStatus @default(PENDING)
  gateway            PaymentGateway
  gatewayOrderId     String?
  gatewayStatus      String?
  successUrl         String
  cancelUrl          String
  phonepeRedirectUrl String?
  phonepeDeepLink    String?
  stripeSessionId    String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  errorCode          String?
  errorDetails       String?
  errorMessage       String?
  initialResponse    String?
  statusResponse     String?            // Store last status check response
  webhookHeaders     String?
  webhookPayload     String?
  webhookProcessed   Boolean            @default(false)
  webhookProcessedAt DateTime?
  paymentLogs        PaymentLog[]
  plan               Plan               @relation(fields: [planId], references: [id])
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([merchantOrderId])
  @@index([gateway])
  @@index([status])
  @@index([webhookProcessed])
}

model PaymentLog {
  id               String         @id @default(cuid())
  paymentOrderId   String
  logType          PaymentLogType
  eventType        String?
  message          String
  data             String?
  requestUrl       String?
  requestMethod    String?
  requestHeaders   String?
  requestBody      String?
  responseStatus   Int?
  responseHeaders  String?
  responseBody     String?
  processingTimeMs Int?
  createdAt        DateTime       @default(now())
  paymentOrder     PaymentOrder   @relation(fields: [paymentOrderId], references: [id], onDelete: Cascade)

  @@index([paymentOrderId])
  @@index([logType])
  @@index([eventType])
  @@index([createdAt])
}

model Otp {
  id        String   @id @default(cuid())
  userId    String
  code      String
  type      OtpType
  target    String?
  expiresAt DateTime
  consumed  Boolean  @default(false)
  used      Boolean  @default(false)
  metadata  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
}

model ReferralCode {
  id         String     @id @default(cuid())
  userId     String     @unique
  code       String     @unique
  isActive   Boolean    @default(true)
  usageCount Int        @default(0)
  maxUsage   Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  referrals  Referral[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Referral {
  id             String           @id @default(cuid())
  referrerId     String
  refereeId      String           @unique
  referralCodeId String
  status         ReferralStatus   @default(PENDING)
  completedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  referee        User             @relation("Referee", fields: [refereeId], references: [id])
  referralCode   ReferralCode     @relation(fields: [referralCodeId], references: [id])
  referrer       User             @relation("Referrer", fields: [referrerId], references: [id])
  rewards        ReferralReward[]

  @@unique([referrerId, refereeId])
}

model ReferralReward {
  id          String     @id @default(cuid())
  referralId  String
  type        RewardType
  amount      Int
  currency    String?
  description String
  isClaimed   Boolean    @default(false)
  claimedAt   DateTime?
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  referral    Referral   @relation(fields: [referralId], references: [id])
}

model SystemSettings {
  id                 String   @id @default(cuid())
  siteTitle          String   @default("JEE App")
  siteDescription    String?
  siteKeywords       String?
  logoUrl            String?
  faviconUrl         String?
  ogImageUrl         String?
  contactEmail       String?
  supportEmail       String?
  privacyEmail       String?
  legalEmail         String?
  contactPhone       String?
  address            String?
  facebookUrl        String?
  twitterUrl         String?
  linkedinUrl        String?
  instagramUrl       String?
  youtubeUrl         String?
  googleAnalyticsId  String?
  facebookPixelId    String?
  customCss          String?
  customJs           String?
  maintenanceMode    Boolean  @default(false)
  maintenanceMessage String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  logoFooter         String?

  @@map("system_settings")
}

model Bookmark {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@map("bookmarks")
}

model Formula {
  id          String   @id @default(cuid())
  title       String
  formula     String
  description String?
  subject     String?
  tags        String[] @default([])
  topicId     String?
  subtopicId  String?
  targetRole  UserRole @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("formulas")
}

model Notification {
  id         String               @id @default(cuid())
  title      String
  message    String?
  link       String?
  validFrom  DateTime
  validUntil DateTime
  isActive   Boolean              @default(true)
  priority   NotificationPriority @default(NORMAL)
  targetRole UserRole             @default(STUDENT)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt

  @@map("notifications")
}

model OAuthState {
  id          String   @id @default(cuid())
  state       String   @unique
  provider    String
  redirectUri String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@map("oauth_states")
}

model UserSession {
  id             String   @id @default(cuid())
  userId         String
  sessionId      String   @unique
  deviceInfo     String?
  ipAddress      String?
  userAgent      String?
  isActive       Boolean  @default(true)
  lastActivityAt DateTime @default(now())
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@map("user_sessions")
}

model ContactTicket {
  id        String           @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    TicketStatus     @default(OPEN)
  priority  TicketPriority   @default(NORMAL)
  category  TicketCategory   @default(GENERAL)
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User?            @relation(fields: [userId], references: [id])
  responses TicketResponse[]

  @@map("contact_tickets")
}

model TicketResponse {
  id          String        @id @default(cuid())
  ticketId    String
  message     String
  isInternal  Boolean       @default(false)
  responderId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  responder   User          @relation(fields: [responderId], references: [id])
  ticket      ContactTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model LMSContent {
  id               String        @id @default(cuid())
  title            String
  description      String?
  contentType      ContentType
  status           ContentStatus @default(DRAFT)
  accessType       AccessType    @default(FREE)
  contentData      Json?
  fileUrl          String?
  fileSize         Int?
  fileType         String?
  originalFileName String?
  externalUrl      String?
  iframeCode       String?
  youtubeId        String?
  youtubeUrl       String?
  h5pContent       Json?
  scormData        Json?
  streamId         String?
  subjectId        String?
  topicId          String?
  subtopicId       String?
  isDripContent    Boolean       @default(false)
  dripDelay        Int?
  dripDate         DateTime?
  duration         Int?
  difficulty       Difficulty?
  tags             String[]
  order            Int           @default(0)
  parentId         String?
  views            Int           @default(0)
  completions      Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  parent           LMSContent?   @relation("ContentHierarchy", fields: [parentId], references: [id])
  children         LMSContent[]  @relation("ContentHierarchy")
  stream           Stream?       @relation(fields: [streamId], references: [id])
  subject          Subject?      @relation(fields: [subjectId], references: [id])
  subtopic         Subtopic?     @relation(fields: [subtopicId], references: [id])
  topic            Topic?        @relation(fields: [topicId], references: [id])
  progress         LMSProgress[]

  @@map("lms_content")
}

model LMSProgress {
  id             String         @id @default(cuid())
  userId         String
  contentId      String
  status         ProgressStatus @default(NOT_STARTED)
  progress       Float          @default(0)
  timeSpent      Int            @default(0)
  startedAt      DateTime?
  completedAt    DateTime?
  lastAccessedAt DateTime?
  score          Float?
  attempts       Int            @default(0)
  data           Json?
  content        LMSContent     @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@map("lms_progress")
}

model BlogCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blogs       Blog[]

  @@map("blog_categories")
}

model Blog {
  id              String         @id @default(cuid())
  title           String
  slug            String         @unique
  excerpt         String?
  content         String
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  status          BlogStatus     @default(DRAFT)
  publishedAt     DateTime?
  featuredImage   String?
  categoryId      String?
  tags            String[]
  authorId        String
  streamId        String?
  subjectId       String?
  viewCount       Int            @default(0)
  likeCount       Int            @default(0)
  shareCount      Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  featured        Boolean        @default(false)
  bookmarks       BlogBookmark[]
  comments        BlogComment[]
  likes           BlogLike[]
  author          User           @relation(fields: [authorId], references: [id])
  category        BlogCategory?  @relation(fields: [categoryId], references: [id])
  stream          Stream?        @relation(fields: [streamId], references: [id])
  subject         Subject?       @relation(fields: [subjectId], references: [id])

  @@map("blogs")
}

model BlogComment {
  id          String        @id @default(cuid())
  content     String
  authorId    String
  blogId      String
  status      CommentStatus @default(PENDING)
  moderatedAt DateTime?
  moderatedBy String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id])
  blog        Blog          @relation(fields: [blogId], references: [id])

  @@map("blog_comments")
}

model BlogLike {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, blogId])
  @@map("blog_likes")
}

model BlogBookmark {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, blogId])
  @@map("blog_bookmarks")
}

model WebhookLog {
  id               String    @id @default(cuid())
  gateway          String
  eventType        String?
  merchantOrderId  String?
  payload          Json
  headers          Json?
  rawBody          String?
  processed        Boolean   @default(false)
  processedAt      DateTime?
  processingTimeMs Int?
  response         Json?
  statusCode       Int?
  error            String?
  retryCount       Int       @default(0)
  receivedAt       DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("webhook_logs")
}

enum UserRole {
  ADMIN
  STUDENT
  EXPERT
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestionReportType {
  INCORRECT_ANSWER
  INCORRECT_EXPLANATION
  SUGGESTED_EXPLANATION
  GRAMMATICAL_ERROR
  TECHNICAL_ERROR
  OTHER
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PlanType {
  MANUAL
  AI_ENABLED
}

enum PlanInterval {
  MONTH
  YEAR
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentGateway {
  STRIPE
  PHONEPE
}

enum PaymentOrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentLogType {
  INFO
  WARNING
  ERROR
  WEBHOOK
  API_CALL
  STATUS_UPDATE
}

enum OtpType {
  EMAIL
  PHONE
  EMAIL_CHANGE
  PHONE_CHANGE
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
  CANCELLED
}

enum RewardType {
  SUBSCRIPTION_DAYS
  MONETARY_CREDIT
  FEATURE_ACCESS
  DISCOUNT_PERCENT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TicketCategory {
  GENERAL
  TECHNICAL_SUPPORT
  BILLING
  FEEDBACK
  PARTNERSHIP
  OTHER
}

enum ContentType {
  H5P
  SCORM
  FILE
  URL
  IFRAME
  YOUTUBE
  TEXT
  VIDEO
  AUDIO
  IMAGE
  QUIZ
  ASSIGNMENT
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum AccessType {
  FREE
  SUBSCRIPTION
  PREMIUM
  TRIAL
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}
